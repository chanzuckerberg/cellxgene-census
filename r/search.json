[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Chan Zuckerberg Initiative Foundation Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/census_access_maintained_embeddings.html","id":"open-census","dir":"Articles","previous_headings":"","what":"Open Census","title":"Access CELLxGENE collaboration embeddings (scVI, Geneformer)","text":"","code":"library(\"cellxgene.census\") census <- open_soma(census_version = \"2023-12-15\")"},{"path":"/articles/census_access_maintained_embeddings.html","id":"load-embeddings-as-seurat-reductions","dir":"Articles","previous_headings":"","what":"Load embeddings as Seurat reductions","title":"Access CELLxGENE collaboration embeddings (scVI, Geneformer)","text":"high-level cellxgene.census::get_seurat() function can query Census load embeddings dimensional reductions Seurat object. ask Seurat object expression data human cells tissue_general equal 'central nervous system', along scVI geneformer embeddings (obsm_layers). embeddings stored dimensional reductions seurat_obj, can take quick look scVI embeddings 2D scatter plot via UMAP, colored Census cell_type annotations.","code":"library(\"Seurat\")  seurat_obj <- get_seurat(   census,    organism = \"homo_sapiens\",   obs_value_filter = \"tissue_general == 'central nervous system'\",   obs_column_names = c(\"cell_type\"),   obsm_layers = c(\"scvi\",\"geneformer\") ) seurat_obj <- RunUMAP(   seurat_obj,    reduction = \"scvi\",   dims=1:ncol(Embeddings(seurat_obj, \"scvi\")) )  DimPlot(seurat_obj, reduction = \"umap\", group.by = \"cell_type\") +   theme(legend.text = element_text(size = 8))"},{"path":"/articles/census_access_maintained_embeddings.html","id":"load-embeddings-as-singlecellexperiment-reductions","dir":"Articles","previous_headings":"","what":"Load embeddings as SingleCellExperiment reductions","title":"Access CELLxGENE collaboration embeddings (scVI, Geneformer)","text":"Similarly, cellxgene.census::get_single_cell_experiment() can query Census store embeddings dimensionality reduction results Bioconductor SingleCellExperiment object. , can view UMAP Geneformer embeddings colored cell_type.","code":"library(\"SingleCellExperiment\") sce_obj <- get_single_cell_experiment(   census,    organism = \"homo_sapiens\",   obs_value_filter = \"tissue_general == 'central nervous system'\",   obs_column_names = c(\"cell_type\"),   obsm_layers = c(\"scvi\",\"geneformer\") ) sce_obj <- scater::runUMAP(sce_obj, dimred = \"geneformer\") scater::plotReducedDim(sce_obj, dimred = \"UMAP\", colour_by = \"cell_type\")"},{"path":"/articles/census_access_maintained_embeddings.html","id":"load-embeddings-as-sparsematrix","dir":"Articles","previous_headings":"","what":"Load embeddings as sparseMatrix","title":"Access CELLxGENE collaboration embeddings (scVI, Geneformer)","text":"Lastly, can use SOMAExperimentAxisQuery lower-level access embeddings’ numerical data. can performant use cases don’t need features Seurat SingleCellExperiment. row embeddings sparseMatrix provides fine-tuned Geneformer model’s 512-dimensional embedding vector cell, cell soma_joinids row names. different arguments, SOMAExperimentAxisQuery$to_sparse_matrix() can also read scVI embeddings expression data. Still lower-level access available SOMAExperimentAxisQuery$read(), streams Arrow tables. methods SOMAExperimentAxisQuery can fetch metadata like cell_type: SOMAExperimentAxisQuery loads ask Census, unlike high-level get_seurat() get_single_cell_experiment() functions, eagerly populate objects based query.","code":"query <- census$get(\"census_data\")$get(\"homo_sapiens\")$axis_query(   \"RNA\", obs_query = tiledbsoma::SOMAAxisQuery$new(value_filter = \"tissue == 'tongue'\") ) embeddings <- query$to_sparse_matrix(\"obsm\", \"geneformer\") str(embeddings) #> Formal class 'dgTMatrix' [package \"Matrix\"] with 6 slots #>   ..@ i       : int [1:190464] 0 0 0 0 0 0 0 0 0 0 ... #>   ..@ j       : int [1:190464] 0 1 2 3 4 5 6 7 8 9 ... #>   ..@ Dim     : int [1:2] 372 512 #>   ..@ Dimnames:List of 2 #>   .. ..$ : chr [1:372] \"51784858\" \"51784859\" \"51784860\" \"51784861\" ... #>   .. ..$ : chr [1:512] \"0\" \"1\" \"2\" \"3\" ... #>   ..@ x       : num [1:190464] 0.1104 -1.2031 1.0078 0.0131 1.2422 ... #>   ..@ factors : list() head(as.data.frame(query$obs(column_names = c(\"soma_joinid\",\"cell_type\"))$concat())) #>   soma_joinid  cell_type #> 1    51784858 basal cell #> 2    51784859 basal cell #> 3    51784860 fibroblast #> 4    51784861 fibroblast #> 5    51784862 basal cell #> 6    51784863 basal cell census$close()"},{"path":"/articles/census_citation_generation.html","id":"requirements","dir":"Articles","previous_headings":"","what":"Requirements","title":"Generating citations for Census slices","text":"notebook requires: cellxgene_census Python package. Census data release schema version 1.3.0 greater.","code":""},{"path":"/articles/census_citation_generation.html","id":"generating-citation-strings","dir":"Articles","previous_headings":"","what":"Generating citation strings","title":"Generating citations for Census slices","text":"First open handle Census data. ensure open data release schema version 1.3.0 greater, use census_version=\"latest\" load dataset table contains column \"citation\" dataset included Census. now can use column \"dataset_id\" present dataset table Census cell metadata create citation strings Census slice.","code":"library(\"tiledb\") library(\"cellxgene.census\")  census <- open_soma(census_version = \"latest\") census_release_info <- census$get(\"census_info\")$get(\"summary\")$read()$concat() as.data.frame(census_release_info) #>   soma_joinid                      label      value #> 1           0      census_schema_version      1.3.0 #> 2           1          census_build_date 2024-01-01 #> 3           2     dataset_schema_version      4.0.0 #> 4           3           total_cell_count   75694072 #> 5           4          unique_cell_count   45846761 #> 6           5 number_donors_homo_sapiens      16292 #> 7           6 number_donors_mus_musculus       2153 datasets <- census$get(\"census_info\")$get(\"datasets\")$read()$concat() datasets <- as.data.frame(datasets) head(datasets[\"citation\"]) #>                                                                                                                                                                                                                                                                                                citation #> 1                                                Dataset Version: https://datasets.cellxgene.cziscience.com/4fb3f166-6526-4a3d-b87f-b1cdc545b0f1.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/a0c84e3f-a5ca-4481-b3a5-ccfda0a81ecc #> 2                                                Dataset Version: https://datasets.cellxgene.cziscience.com/9edb54c2-3fe0-4a7a-bd62-a98e98299c5d.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/a0c84e3f-a5ca-4481-b3a5-ccfda0a81ecc #> 3                                                Dataset Version: https://datasets.cellxgene.cziscience.com/0f88d425-2e51-4ecf-903a-921255537466.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/a0c84e3f-a5ca-4481-b3a5-ccfda0a81ecc #> 4                                                Dataset Version: https://datasets.cellxgene.cziscience.com/55c48748-ab69-457b-b9da-1858559f24f4.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/a0c84e3f-a5ca-4481-b3a5-ccfda0a81ecc #> 5 Publication: https://doi.org/10.1002/ctm2.1356 Dataset Version: https://datasets.cellxgene.cziscience.com/0574142b-eeb5-41e4-8d69-b613fd63e67b.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/7dd599c5-d25d-40c0-b1a6-8789791ca808 #> 6 Publication: https://doi.org/10.1002/ctm2.1356 Dataset Version: https://datasets.cellxgene.cziscience.com/507380ee-ba43-4f9a-a5c6-aea27ddb48cb.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/7dd599c5-d25d-40c0-b1a6-8789791ca808"},{"path":"/articles/census_citation_generation.html","id":"via-cell-metadata-query","dir":"Articles","previous_headings":"Generating citation strings","what":"Via cell metadata query","title":"Generating citations for Census slices","text":"","code":"# Query cell metadata cell_metadata <- census$get(\"census_data\")$get(\"homo_sapiens\")$obs$read(     value_filter = \"tissue == 'cardiac atrium'\",     column_names = c(\"dataset_id\", \"cell_type\") )  cell_metadata <- as.data.frame(cell_metadata$concat())  # Get a citation string for the slice slice_datasets = datasets[datasets$dataset_id  %in% cell_metadata$dataset_id,] print(slice_datasets$citation) #> [1] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/4866a804-37eb-436f-8c87-9cd585260061.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [2] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/bfd80f12-725c-4482-ad7f-1ed2b4909b0d.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [3] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/e6df8a57-f54f-413a-9d4d-dee03294d778.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [4] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/8d599205-5c51-4b50-9d48-3dec31238587.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [5] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/f6065c51-bd26-4aa5-a05d-2805aeea48d9.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [6] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/8cdbf790-4d29-4f46-9aef-21adfb2e21da.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\""},{"path":"/articles/census_citation_generation.html","id":"via-seurat-query","dir":"Articles","previous_headings":"Generating citation strings","what":"Via Seurat query","title":"Generating citations for Census slices","text":"","code":"# Fetch a Seurat object seurat_obj <- get_seurat(     census = census,     organism = \"homo_sapiens\",     measurement_name = \"RNA\",     obs_value_filter = \"tissue == 'cardiac atrium'\",     var_value_filter = \"feature_name == 'MYBPC3'\",     obs_column_names = c(\"dataset_id\", \"cell_type\") )  # Get a citation string for the slice slice_datasets = datasets[datasets$dataset_id  %in% seurat_obj[[]]$dataset_id,] print(slice_datasets$citation) #> [1] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/4866a804-37eb-436f-8c87-9cd585260061.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [2] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/bfd80f12-725c-4482-ad7f-1ed2b4909b0d.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [3] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/e6df8a57-f54f-413a-9d4d-dee03294d778.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [4] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/8d599205-5c51-4b50-9d48-3dec31238587.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [5] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/f6065c51-bd26-4aa5-a05d-2805aeea48d9.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [6] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/8cdbf790-4d29-4f46-9aef-21adfb2e21da.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\""},{"path":"/articles/census_citation_generation.html","id":"via-singlecellexperiment-query","dir":"Articles","previous_headings":"Generating citation strings","what":"Via SingleCellExperiment query","title":"Generating citations for Census slices","text":"","code":"# Fetch a Seurat object sce_obj <- get_single_cell_experiment(     census = census,     organism = \"homo_sapiens\",     measurement_name = \"RNA\",     obs_value_filter = \"tissue == 'cardiac atrium'\",     var_value_filter = \"feature_name == 'MYBPC3'\",     obs_column_names = c(\"dataset_id\", \"cell_type\") )  # Get a citation string for the slice slice_datasets = datasets[datasets$dataset_id  %in% sce_obj$dataset_id,] print(slice_datasets$citation) #> [1] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/4866a804-37eb-436f-8c87-9cd585260061.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [2] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/bfd80f12-725c-4482-ad7f-1ed2b4909b0d.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [3] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/e6df8a57-f54f-413a-9d4d-dee03294d778.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [4] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/8d599205-5c51-4b50-9d48-3dec31238587.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [5] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/f6065c51-bd26-4aa5-a05d-2805aeea48d9.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [6] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/8cdbf790-4d29-4f46-9aef-21adfb2e21da.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\""},{"path":"/articles/census_compute_over_X.html","id":"incremental-mean-calculation","dir":"Articles","previous_headings":"","what":"Incremental mean calculation","title":"Computing on X using online (incremental) algorithms","text":"Many statistics, marginal means, easy calculate incrementally. Let’s begin query X$raw sparse matrix unnormalized read counts, return results shards incrementally accumulate read count gene, divide cell count get mean reads per cell gene. First define query - case slice obs axis cells specific tissue & sex value, genes var axis. query$X() method returns iterator results, Arrow Table. table contain sparse X data obs/var coordinates, using standard SOMA names: soma_data - X values (float32) soma_dim_0 - obs coordinate (int64) soma_dim_1 - var coordinate (int64) Important: X matrices joined var/obs axis DataFrames integer join “id” (aka soma_joinid). positionally indexed, given cell gene may soma_joinid value (e.g., large integer). words, given X value, soma_dim_0 corresponds soma_joinid obs dataframe, soma_dim_1 coordinate corresponds soma_joinid var dataframe. convenience, query class includes utility simplify operations query slices. query$indexer indexer used wrap output query$X(), converting soma_joinids positional indexing query results. Positions [0, N), N number results query given axis. Key points: expensive query read results - rather make multiple passes data, read perform multiple computations. default, data census indexed soma_joinid positionally.","code":"library(\"tiledbsoma\") library(\"cellxgene.census\") census <- open_soma()  query <- census$get(\"census_data\")$get(\"mus_musculus\")$axis_query(   measurement_name = \"RNA\",   obs_query = SOMAAxisQuery$new(value_filter = \"tissue=='brain' && sex=='male'\") )  genes_df <- query$var(column_names = c(\"feature_id\", \"feature_name\"))$concat() genes_df <- as.data.frame(genes_df) n_genes <- nrow(genes_df)  # accumulator vector (for each gene) for the total count over all cells in X(\"raw\") raw_sum_by_gene <- numeric(n_genes) names(raw_sum_by_gene) <- genes_df$feature_id  # iterate through in-memory shards of query results tables <- query$X(\"raw\")$tables() while (!tables$read_complete()) {   table_part <- tables$read_next()   # table_part is an Arrow table with the columns mentioned above. The result   # order is not guaranteed!    # table_part$soma_dim_1 is the var/gene soma_joinid. But note that these are   # arbitrary int64 id's, and moreover each table_part may exhibit only a subset   # of the values we'll see over all query results. query$indexer helps us map   # any given soma_dim_1 values onto positions in query$var() (genes_df), that is   # the union of all values we'll see.   gene_indexes <- query$indexer$by_var(table_part$soma_dim_1)$as_vector()   stopifnot(sum(gene_indexes >= n_genes) == 0)   # sum(table_part) group by gene, yielding a numeric vector with the gene_index   # in its names   sum_part <- tapply(as.vector(table_part$soma_data), gene_indexes, sum)   # update the accumulator vector   which_genes <- as.integer(names(sum_part)) + 1  # nb: gene_indexes is zero-based   stopifnot(sum(which_genes > n_genes) == 0)   raw_sum_by_gene[which_genes] <- raw_sum_by_gene[which_genes] + sum_part }  # Divide each sum by cell count to get mean reads per cell (for each gene), # implicitly averaging in all zero entries in X even though they weren't included # in the sparse query results. genes_df$raw_mean <- raw_sum_by_gene / query$n_obs genes_df #>            feature_id  feature_name     raw_mean #> 1  ENSMUSG00000051951          Xkr4 1.397121e+00 #> 2  ENSMUSG00000025900           Rp1 3.162902e-01 #> 3  ENSMUSG00000025902         Sox17 6.604085e+01 #> 4  ENSMUSG00000033845        Mrpl15 3.939172e+01 #> 5  ENSMUSG00000025903        Lypla1 1.986548e+01 #> 6  ENSMUSG00000033813         Tcea1 4.305924e+01 #> 7  ENSMUSG00000002459         Rgs20 3.496194e+00 #> 8  ENSMUSG00000033793       Atp6v1h 7.470932e+01 #> 9  ENSMUSG00000025905         Oprk1 4.568752e-01 #> 10 ENSMUSG00000033774        Npbwr1 1.241003e-04 #> 11 ENSMUSG00000025907        Rb1cc1 3.631679e+01 #> 12 ENSMUSG00000033740          St18 1.660110e+01 #> 13 ENSMUSG00000051285        Pcmtd1 5.410501e+01 #> 14 ENSMUSG00000025909         Sntg1 1.178725e+00 #> 15 ENSMUSG00000061024          Rrs1 2.098927e+01 #> 16 ENSMUSG00000025911        Adhfe1 1.266112e+01 #> 17 ENSMUSG00000079671 2610203C22Rik 9.474621e+00 #> 18 ENSMUSG00000025912         Mybl1 2.643129e-01 #> 19 ENSMUSG00000045210        Vcpip1 3.456668e+01 #> 20 ENSMUSG00000097893 1700034P13Rik 5.721023e-01 #> 21 ENSMUSG00000025915          Sgk3 2.012592e+01 #> 22 ENSMUSG00000098234         Snhg6 6.784314e+00 #> 23 ENSMUSG00000025916       Ppp1r42 2.585422e-01 #> 24 ENSMUSG00000025917         Cops5 7.909310e+01 #> 25 ENSMUSG00000056763         Cspp1 1.635604e+01 #> 26 ENSMUSG00000067851       Arfgef1 1.582897e+01 #> 27 ENSMUSG00000042501          Cpa6 1.880119e-02 #> 28 ENSMUSG00000048960         Prex2 2.283623e+01 #> 29 ENSMUSG00000057715 A830018L16Rik 9.992140e-01 #> 30 ENSMUSG00000016918         Sulf1 5.567469e+00 #> 31 ENSMUSG00000025938       Slco5a1 2.452015e-01 #> 32 ENSMUSG00000042414        Prdm14 6.142964e-03 #> 33 ENSMUSG00000005886         Ncoa2 1.707928e+01 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 52384 rows ]"},{"path":"/articles/census_compute_over_X.html","id":"counting-cells-grouped-by-dataset-and-gene","dir":"Articles","previous_headings":"","what":"Counting cells grouped by dataset and gene","title":"Computing on X using online (incremental) algorithms","text":"goal example count number cells nonzero reads, grouped gene Census dataset_id. result data frame dataset, gene, number cells nonzero reads dataset gene. multi-factor aggregation, ’ll take advantage dplyr routines instead lower-level vector indexer shown . presentation purposes, ’ll limit query four genes, can expanded genes easily. Don’t forget close census.","code":"library(\"dplyr\")  query <- census$get(\"census_data\")$get(\"mus_musculus\")$axis_query(   measurement_name = \"RNA\",   obs_query = SOMAAxisQuery$new(value_filter = \"tissue=='brain'\"),   var_query = SOMAAxisQuery$new(value_filter = \"feature_name %in% c('Malat1', 'Ptprd', 'Dlg2', 'Pcdh9')\") )  obs_tbl <- query$obs(column_names=c(\"soma_joinid\", \"dataset_id\"))$concat() obs_df <- data.frame(   # materialize soma_joinid as character to avoid overflowing R 32-bit integer   cell_id = as.character(obs_tbl$soma_joinid),   dataset_id = obs_tbl$dataset_id$as_vector() ) var_tbl <- query$var(column_names=c(\"soma_joinid\", \"feature_name\"))$concat() var_df <- data.frame(   gene_id = as.character(var_tbl$soma_joinid),   feature_name = var_tbl$feature_name$as_vector() )  # accumulator for # cells by dataset & gene n_cells_grouped <- data.frame(   \"dataset_id\" = character(0),   \"gene_id\" = character(0),   \"n_cells\" = numeric(0) )  # iterate through in-memory shards of query results tables <- query$X(\"raw\")$tables() while (!tables$read_complete()) {   table_part <- tables$read_next()    # prepare a (dataset,gene,1) tuple for each entry in table_part   n_cells_part <- data.frame(     \"cell_id\" = as.character(table_part$soma_dim_0),     \"gene_id\" = as.character(table_part$soma_dim_1),     \"n_cells\" = 1   )   n_cells_part <- left_join(n_cells_part, obs_df, by = \"cell_id\")   stopifnot(sum(is.null(n_cells_part$dataset_id)) == 0)    # fold those into n_cells_grouped   n_cells_grouped <- n_cells_part %>%                      select(-cell_id) %>%                      bind_rows(n_cells_grouped) %>%                       group_by(dataset_id, gene_id) %>%                       summarise(n_cells = sum(n_cells)) %>%                       ungroup() }  # add gene names for display n_cells_grouped <- left_join(n_cells_grouped, var_df, by = \"gene_id\") stopifnot(sum(is.null(n_cells_grouped$feature_name)) == 0) n_cells_grouped[c(\"dataset_id\", \"feature_name\", \"n_cells\")] #> # A tibble: 21 × 3 #>    dataset_id                           feature_name n_cells #>    <chr>                                <chr>          <dbl> #>  1 3bbb6cf9-72b9-41be-b568-656de6eb18b5 Ptprd          79578 #>  2 3bbb6cf9-72b9-41be-b568-656de6eb18b5 Dlg2           79513 #>  3 3bbb6cf9-72b9-41be-b568-656de6eb18b5 Pcdh9          79476 #>  4 3bbb6cf9-72b9-41be-b568-656de6eb18b5 Malat1         79667 #>  5 58b01044-c5e5-4b0f-8a2d-6ebf951e01ff Ptprd            474 #>  6 58b01044-c5e5-4b0f-8a2d-6ebf951e01ff Dlg2              81 #>  7 58b01044-c5e5-4b0f-8a2d-6ebf951e01ff Pcdh9            125 #>  8 58b01044-c5e5-4b0f-8a2d-6ebf951e01ff Malat1         12622 #>  9 66ff82b4-9380-469c-bc4b-cfa08eacd325 Dlg2             856 #> 10 66ff82b4-9380-469c-bc4b-cfa08eacd325 Pcdh9           2910 #> # ℹ 11 more rows census$close()"},{"path":"/articles/census_dataset_presence.html","id":"opening-the-census","dir":"Articles","previous_headings":"","what":"Opening the Census","title":"Genes measured in each cell (dataset presence matrix)","text":"cellxgene.census R package contains convenient API open version Census (default, newest stable version).","code":"library(\"cellxgene.census\") census <- open_soma()"},{"path":"/articles/census_dataset_presence.html","id":"fetching-the-ids-of-the-census-datasets","dir":"Articles","previous_headings":"","what":"Fetching the IDs of the Census datasets","title":"Genes measured in each cell (dataset presence matrix)","text":"Let’s grab table datasets included Census use table combination presence matrix .","code":"# Grab the experiment containing human data, and the measurement therein with RNA human <- census$get(\"census_data\")$get(\"homo_sapiens\") human_rna <- human$ms$get(\"RNA\")  # The census-wide datasets datasets_df <- as.data.frame(census$get(\"census_info\")$get(\"datasets\")$read()$concat()) print(datasets_df) #>    soma_joinid                        collection_id #> 1            0 4dca242c-d302-4dba-a68f-4c61e7bad553 #> 2            1 d17249d2-0e6e-4500-abb8-e6c93fa1ac6f #> 3            2 d17249d2-0e6e-4500-abb8-e6c93fa1ac6f #> 4            3 d17249d2-0e6e-4500-abb8-e6c93fa1ac6f #> 5            4 d17249d2-0e6e-4500-abb8-e6c93fa1ac6f #> 6            5 d17249d2-0e6e-4500-abb8-e6c93fa1ac6f #> 7            6 d17249d2-0e6e-4500-abb8-e6c93fa1ac6f #> 8            7 d17249d2-0e6e-4500-abb8-e6c93fa1ac6f #> 9            8 d17249d2-0e6e-4500-abb8-e6c93fa1ac6f #> 10           9 d17249d2-0e6e-4500-abb8-e6c93fa1ac6f #> 11          10 d17249d2-0e6e-4500-abb8-e6c93fa1ac6f #>                                                                       collection_name #> 1                Comparative transcriptomics reveals human-specific cortical features #> 2  Transcriptomic cytoarchitecture reveals principles of human neocortex organization #> 3  Transcriptomic cytoarchitecture reveals principles of human neocortex organization #> 4  Transcriptomic cytoarchitecture reveals principles of human neocortex organization #> 5  Transcriptomic cytoarchitecture reveals principles of human neocortex organization #> 6  Transcriptomic cytoarchitecture reveals principles of human neocortex organization #> 7  Transcriptomic cytoarchitecture reveals principles of human neocortex organization #> 8  Transcriptomic cytoarchitecture reveals principles of human neocortex organization #> 9  Transcriptomic cytoarchitecture reveals principles of human neocortex organization #> 10 Transcriptomic cytoarchitecture reveals principles of human neocortex organization #> 11 Transcriptomic cytoarchitecture reveals principles of human neocortex organization #>             collection_doi                           dataset_id #> 1  10.1126/science.ade9516 2bdd3a2c-2ff4-4314-adf3-8a06b797a33a #> 2  10.1126/science.adf6812 f5b0810c-1664-4a62-ad06-be1d9964aa8b #> 3  10.1126/science.adf6812 e4ddac12-f48f-4455-8e8d-c2a48a683437 #> 4  10.1126/science.adf6812 e2808a6e-e2ea-41b9-b38c-4a08f1677f02 #> 5  10.1126/science.adf6812 d01c9dff-abd1-4825-bf30-2eb2ba74597e #> 6  10.1126/science.adf6812 c3aa4f95-7a18-4a7d-8dd8-ca324d714363 #> 7  10.1126/science.adf6812 be401db3-d732-408a-b0c4-71af0458b8ab #> 8  10.1126/science.adf6812 a5d5c529-8a1f-40b5-bda3-35208970070d #> 9  10.1126/science.adf6812 9c63201d-bfd9-41a8-bbbc-18d947556f3d #> 10 10.1126/science.adf6812 93cb76aa-a84b-4a92-8e6c-66a914e26d4c #> 11 10.1126/science.adf6812 8d1dd010-5cbc-43fb-83f8-e0de8e8517da #>                      dataset_version_id #> 1  7eb7f2fd-fd74-4c99-863c-97836415652e #> 2  d4427196-7876-4bdd-a929-ae4d177ec776 #> 3  3280113b-7148-4a3e-98d4-015f443aab8a #> 4  dc092185-3b8e-4fcb-ae21-1dc106d683ac #> 5  c4959ded-83dc-4442-aac7-9a59bdb47801 #> 6  0476ef54-aefe-4754-b0e9-d9fcd75adff4 #> 7  ee027704-72aa-4195-a467-0754db1ed65d #> 8  d47c0742-cea2-46c1-9e72-4d479214041c #> 9  8b09695a-1426-4867-961e-c40a1fbcc2da #> 10 98ad7381-f464-4f49-b850-5321b4f98be6 #> 11 c56683d2-452a-45dc-b402-35397e27e325 #>                                           dataset_title #> 1                               Human: Great apes study #> 2                       Dissection: Angular gyrus (AnG) #> 3                Supercluster: CGE-derived interneurons #> 4               Dissection: Primary auditory cortex(A1) #> 5  Supercluster: Deep layer (non-IT) excitatory neurons #> 6        Supercluster: IT-projecting excitatory neurons #> 7           Dissection: Anterior cingulate cortex (ACC) #> 8               Human Multiple Cortical Areas SMART-seq #> 9                Supercluster: MGE-derived interneurons #> 10        Dissection: Primary somatosensory cortex (S1) #> 11                Dissection: Primary visual cortex(V1) #>                            dataset_h5ad_path dataset_total_cell_count #> 1  2bdd3a2c-2ff4-4314-adf3-8a06b797a33a.h5ad                   156285 #> 2  f5b0810c-1664-4a62-ad06-be1d9964aa8b.h5ad                   110752 #> 3  e4ddac12-f48f-4455-8e8d-c2a48a683437.h5ad                   129495 #> 4  e2808a6e-e2ea-41b9-b38c-4a08f1677f02.h5ad                   139054 #> 5  d01c9dff-abd1-4825-bf30-2eb2ba74597e.h5ad                    92969 #> 6  c3aa4f95-7a18-4a7d-8dd8-ca324d714363.h5ad                   638941 #> 7  be401db3-d732-408a-b0c4-71af0458b8ab.h5ad                   135462 #> 8  a5d5c529-8a1f-40b5-bda3-35208970070d.h5ad                    49417 #> 9  9c63201d-bfd9-41a8-bbbc-18d947556f3d.h5ad                   185477 #> 10 93cb76aa-a84b-4a92-8e6c-66a914e26d4c.h5ad                   153159 #> 11 8d1dd010-5cbc-43fb-83f8-e0de8e8517da.h5ad                   241077 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 640 rows ]"},{"path":"/articles/census_dataset_presence.html","id":"fetching-the-dataset-presence-matrix","dir":"Articles","previous_headings":"","what":"Fetching the dataset presence matrix","title":"Genes measured in each cell (dataset presence matrix)","text":"Now let’s fetch dataset presence matrix. convenience, read entire presence matrix (Homo sapiens) sparse matrix. convenience function providing capability: also need var dataframe, read R data frame convenient manipulation:","code":"presence_matrix <- get_presence_matrix(census, \"Homo sapiens\", \"RNA\") print(dim(presence_matrix)) #> NULL var_df <- as.data.frame(human_rna$var$read()$concat()) print(var_df) #>    soma_joinid      feature_id feature_name feature_length      nnz n_measured_obs #> 1            0 ENSG00000233576      HTR3C2P           1057    69370       19581263 #> 2            1 ENSG00000121410         A1BG           3999  5640476       62641311 #> 3            2 ENSG00000268895     A1BG-AS1           3374  3071864       61946057 #> 4            3 ENSG00000148584         A1CF           9603   734347       58195911 #> 5            4 ENSG00000175899          A2M           6318  7894261       62704378 #> 6            5 ENSG00000245105      A2M-AS1           2948  1637794       62086816 #> 7            6 ENSG00000166535        A2ML1           7156  2156616       60911688 #> 8            7 ENSG00000256069        A2MP1           4657   835384       23554778 #> 9            8 ENSG00000184389      A3GALT2           1023   439067       53780311 #> 10           9 ENSG00000128274       A4GALT           3358  2432348       62706770 #> 11          10 ENSG00000118017        A4GNT           1779    52430       56117399 #> 12          11 ENSG00000265544         AA06            632   220755       22545140 #> 13          12 ENSG00000081760         AACS          16039 11280800       62842909 #> 14          13 ENSG00000250420       AACSP1           3380   211588       22831831 #> 15          14 ENSG00000114771        AADAC           1632   552258       54941618 #> 16          15 ENSG00000188984      AADACL3           4055    24626       43074608 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 60648 rows ]"},{"path":"/articles/census_dataset_presence.html","id":"identifying-genes-measured-in-a-specific-dataset","dir":"Articles","previous_headings":"","what":"Identifying genes measured in a specific dataset","title":"Genes measured in each cell (dataset presence matrix)","text":"Now dataset table, genes metadata table, dataset presence matrix, can check gene set genes measured specific dataset. Important: presence matrix indexed soma_joinid, positionally indexed. words: first dimension presence matrix dataset’s soma_joinid, stored census_datasets dataframe. second dimension presence matrix feature’s soma_joinid, stored var dataframe. presence matrix method $take() lets slice soma_joinids census_datasets var. full presence matrix, slices , can exported regular matrix method $get_one_based_matrix() Let’s find gene \"ENSG00000286096\" measured dataset id \"97a17473-e2b1-4f31-a544-44a60773e2dd\".","code":"# Get soma_joinid for datasets and genes of interest var_joinid <- var_df$soma_joinid[var_df$feature_id == \"ENSG00000286096\"] dataset_joinid <- datasets_df$soma_joinid[datasets_df$dataset_id == \"97a17473-e2b1-4f31-a544-44a60773e2dd\"]  # Slice presence matrix with datasets and genes of interest presence_matrix_slice <- presence_matrix$take(i = dataset_joinid, j = var_joinid)  # Convert presence matrix to regular matrix presence_matrix_slice <- presence_matrix_slice$get_one_based_matrix()  # Find how if the gene is present in this dataset is_present <- presence_matrix_slice[, , drop = TRUE] cat(paste(\"Feature is\", if (is_present) \"present.\" else \"not present.\")) #> Feature is present."},{"path":"/articles/census_dataset_presence.html","id":"identifying-datasets-that-measured-specific-genes","dir":"Articles","previous_headings":"","what":"Identifying datasets that measured specific genes","title":"Genes measured in each cell (dataset presence matrix)","text":"Similarly, can determine datasets measured specific gene set genes.","code":"# Grab the feature's soma_joinid from the var dataframe var_joinid <- var_df$soma_joinid[var_df$feature_id == \"ENSG00000286096\"]  # The presence matrix is indexed by the joinids of the dataset and var dataframes, # so slice out the feature of interest by its joinid. presence_matrix_slice  <- presence_matrix$take(j = var_joinid)$get_one_based_matrix() measured_datasets <- presence_matrix_slice[, , drop = TRUE] != 0 dataset_joinids <- datasets_df$soma_joinid[measured_datasets]  # From the datasets dataframe, slice out the datasets which have a joinid in the list print(datasets_df[dataset_joinids, ]) #>    soma_joinid                        collection_id #> 63          62 3f50314f-bdc9-40c6-8e4a-b0901ebfbe4c #> 64          63 e5f58829-1a66-40b5-a624-9046778e74f5 #> 65          64 e5f58829-1a66-40b5-a624-9046778e74f5 #> 66          65 e5f58829-1a66-40b5-a624-9046778e74f5 #> 67          66 e5f58829-1a66-40b5-a624-9046778e74f5 #> 69          68 e5f58829-1a66-40b5-a624-9046778e74f5 #> 70          69 e5f58829-1a66-40b5-a624-9046778e74f5 #> 72          71 e5f58829-1a66-40b5-a624-9046778e74f5 #> 73          72 e5f58829-1a66-40b5-a624-9046778e74f5 #> 77          76 e5f58829-1a66-40b5-a624-9046778e74f5 #> 78          77 e5f58829-1a66-40b5-a624-9046778e74f5 #>                                                                                                                             collection_name #> 63 Single-cell sequencing links multiregional immune landscapes and tissue-resident T cells in ccRCC to tumor topology and therapy efficacy #> 64                                                                                                                           Tabula Sapiens #> 65                                                                                                                           Tabula Sapiens #> 66                                                                                                                           Tabula Sapiens #> 67                                                                                                                           Tabula Sapiens #> 69                                                                                                                           Tabula Sapiens #> 70                                                                                                                           Tabula Sapiens #> 72                                                                                                                           Tabula Sapiens #> 73                                                                                                                           Tabula Sapiens #> 77                                                                                                                           Tabula Sapiens #> 78                                                                                                                           Tabula Sapiens #>                 collection_doi                           dataset_id #> 63 10.1016/j.ccell.2021.03.007 bd65a70f-b274-4133-b9dd-0d1431b6af34 #> 64     10.1126/science.abl4896 ff45e623-7f5f-46e3-b47d-56be0341f66b #> 65     10.1126/science.abl4896 f01bdd17-4902-40f5-86e3-240d66dd2587 #> 66     10.1126/science.abl4896 e6a11140-2545-46bc-929e-da243eed2cae #> 67     10.1126/science.abl4896 e5c63d94-593c-4338-a489-e1048599e751 #> 69     10.1126/science.abl4896 d77ec7d6-ef2e-49d6-9e79-05b7f8881484 #> 70     10.1126/science.abl4896 cee11228-9f0b-4e57-afe2-cfe15ee56312 #> 72     10.1126/science.abl4896 a2d4d33e-4c62-4361-b80a-9be53d2e50e8 #> 73     10.1126/science.abl4896 a0754256-f44b-4c4a-962c-a552e47d3fdc #> 77     10.1126/science.abl4896 6d41668c-168c-4500-b06a-4674ccf3e19d #> 78     10.1126/science.abl4896 5e5e7a2f-8f1c-42ac-90dc-b4f80f38e84c #>                      dataset_version_id #> 63 71815674-a8cf-4add-95dd-c5d5d1631597 #> 64 0b29f4ce-5e72-4356-b74b-b54714979234 #> 65 bd13c169-af97-4d8f-ba45-7588808c2e48 #> 66 47615a3d-0a9f-4a78-88ef-5cce2a84637d #> 67 ac7714f0-dce2-40ba-9912-324de6c9a77f #> 69 c7679ec2-652d-437a-bded-3ec2344829e4 #> 70 f89fa18f-c32b-4bae-9511-1a4d18f200e1 #> 72 37ada0d2-9970-4ff2-8bcd-41e80ab6e081 #> 73 1cda78aa-f0d9-4d50-96bf-8bc309318802 #> 77 5297a910-453f-4e3f-af16-e18fd5a79090 #> 78 b783b036-c837-4290-a07d-f6b79a301f59 #>                                                                                                                               dataset_title #> 63 Single-cell sequencing links multiregional immune landscapes and tissue-resident T cells in ccRCC to tumor topology and therapy efficacy #> 64                                                                                                                Tabula Sapiens - Pancreas #> 65                                                                                                          Tabula Sapiens - Salivary_Gland #> 66                                                                                                                   Tabula Sapiens - Heart #> 67                                                                                                                 Tabula Sapiens - Bladder #> 69                                                                                                                Tabula Sapiens - Prostate #> 70                                                                                                                  Tabula Sapiens - Spleen #> 72                                                                                                             Tabula Sapiens - Vasculature #> 73                                                                                                                     Tabula Sapiens - Eye #> 77                                                                                                                   Tabula Sapiens - Liver #> 78                                                                                                                     Tabula Sapiens - Fat #>                            dataset_h5ad_path dataset_total_cell_count #> 63 bd65a70f-b274-4133-b9dd-0d1431b6af34.h5ad                   167283 #> 64 ff45e623-7f5f-46e3-b47d-56be0341f66b.h5ad                    13497 #> 65 f01bdd17-4902-40f5-86e3-240d66dd2587.h5ad                    27199 #> 66 e6a11140-2545-46bc-929e-da243eed2cae.h5ad                    11505 #> 67 e5c63d94-593c-4338-a489-e1048599e751.h5ad                    24583 #> 69 d77ec7d6-ef2e-49d6-9e79-05b7f8881484.h5ad                    16375 #> 70 cee11228-9f0b-4e57-afe2-cfe15ee56312.h5ad                    34004 #> 72 a2d4d33e-4c62-4361-b80a-9be53d2e50e8.h5ad                    16037 #> 73 a0754256-f44b-4c4a-962c-a552e47d3fdc.h5ad                    10650 #> 77 6d41668c-168c-4500-b06a-4674ccf3e19d.h5ad                     5007 #> 78 5e5e7a2f-8f1c-42ac-90dc-b4f80f38e84c.h5ad                    20263 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 31 rows ]"},{"path":"/articles/census_dataset_presence.html","id":"identifying-all-genes-measured-in-a-dataset","dir":"Articles","previous_headings":"","what":"Identifying all genes measured in a dataset","title":"Genes measured in each cell (dataset presence matrix)","text":"Finally, can find set genes measured cells given dataset.","code":"# Slice the dataset(s) of interest, and get the joinid(s) dataset_joinids <- datasets_df$soma_joinid[datasets_df$collection_id == \"17481d16-ee44-49e5-bcf0-28c0780d8c4a\"]  # Slice the presence matrix by the first dimension, i.e., by dataset presence_matrix_slice <- presence_matrix$take(i = dataset_joinids)$get_one_based_matrix() genes_measured <- Matrix::colSums(presence_matrix_slice) > 0 var_joinids <- var_df$soma_joinid[genes_measured]  print(var_df[var_joinids, ]) #>    soma_joinid      feature_id feature_name feature_length      nnz n_measured_obs #> 1            0 ENSG00000233576      HTR3C2P           1057    69370       19581263 #> 2            1 ENSG00000121410         A1BG           3999  5640476       62641311 #> 3            2 ENSG00000268895     A1BG-AS1           3374  3071864       61946057 #> 4            3 ENSG00000148584         A1CF           9603   734347       58195911 #> 5            4 ENSG00000175899          A2M           6318  7894261       62704378 #> 6            5 ENSG00000245105      A2M-AS1           2948  1637794       62086816 #> 9            8 ENSG00000184389      A3GALT2           1023   439067       53780311 #> 10           9 ENSG00000128274       A4GALT           3358  2432348       62706770 #> 12          11 ENSG00000265544         AA06            632   220755       22545140 #> 14          13 ENSG00000250420       AACSP1           3380   211588       22831831 #> 16          15 ENSG00000188984      AADACL3           4055    24626       43074608 #> 18          17 ENSG00000240602      AADACP1           2012    29491       23133490 #> 19          18 ENSG00000109576        AADAT           2970  4524608       61559099 #> 20          19 ENSG00000158122       PRXL2C           3098  5424472       55618144 #> 21          20 ENSG00000103591        AAGAB           4138 12427442       62843055 #> 22          21 ENSG00000115977         AAK1          24843 29280566       62664775 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 27195 rows ]"},{"path":"/articles/census_dataset_presence.html","id":"close-the-census","dir":"Articles","previous_headings":"Identifying all genes measured in a dataset","what":"Close the census","title":"Genes measured in each cell (dataset presence matrix)","text":"use, census object closed release memory resources. also closes SOMA objects accessed via top-level census. Closing can automated using .exit(census$close(), add = TRUE) immediately census <- open_soma().","code":"census$close()"},{"path":"/articles/census_datasets.html","id":"fetching-the-datasets-table","dir":"Articles","previous_headings":"","what":"Fetching the datasets table","title":"Census Datasets example","text":"Census contains top-level data frame itemizing datasets contained therein. can read SOMADataFrame Arrow Table: R data frame: sum cell counts across datasets match number cells across SOMA experiments (human, mouse).","code":"library(\"cellxgene.census\") census <- open_soma() census_datasets <- census$get(\"census_info\")$get(\"datasets\")$read()$concat() print(census_datasets) #> Table #> 651 rows x 9 columns #> $soma_joinid <int64 not null> #> $collection_id <large_string not null> #> $collection_name <large_string not null> #> $collection_doi <large_string not null> #> $dataset_id <large_string not null> #> $dataset_version_id <large_string not null> #> $dataset_title <large_string not null> #> $dataset_h5ad_path <large_string not null> #> $dataset_total_cell_count <int64 not null> census_datasets <- as.data.frame(census_datasets) print(census_datasets[, c(   \"dataset_id\",   \"dataset_title\",   \"dataset_total_cell_count\" )]) #>                              dataset_id #> 1  2bdd3a2c-2ff4-4314-adf3-8a06b797a33a #> 2  f5b0810c-1664-4a62-ad06-be1d9964aa8b #> 3  e4ddac12-f48f-4455-8e8d-c2a48a683437 #> 4  e2808a6e-e2ea-41b9-b38c-4a08f1677f02 #> 5  d01c9dff-abd1-4825-bf30-2eb2ba74597e #> 6  c3aa4f95-7a18-4a7d-8dd8-ca324d714363 #> 7  be401db3-d732-408a-b0c4-71af0458b8ab #> 8  a5d5c529-8a1f-40b5-bda3-35208970070d #> 9  9c63201d-bfd9-41a8-bbbc-18d947556f3d #> 10 93cb76aa-a84b-4a92-8e6c-66a914e26d4c #> 11 8d1dd010-5cbc-43fb-83f8-e0de8e8517da #> 12 716a4acc-919e-4326-9672-ebe06ede84e6 #> 13 5bdc423a-59e6-457d-aa01-debd2c9c564f #> 14 5346f9c6-755e-4336-94cc-38706ec00c2f #> 15 015c230d-650c-4527-870d-8a805849a382 #> 16 d567b692-c374-4628-a508-8008f6778f22 #> 17 cf83c98a-3791-4537-bbde-a719f6d73c13 #> 18 738942eb-ac72-44ff-a64b-8943b5ecd8d9 #> 19 f8d8b443-bca6-4c3c-9042-669dfb7f8030 #> 20 f5be4b96-f5a3-4c3d-84ac-6f69daf744d5 #> 21 dea1aa78-c0a2-413f-b375-f91cce49e4d0 #> 22 92161459-9103-4379-ae34-73a38eee1d1d #> 23 5829c7ba-697f-418e-8b98-d605b192dc48 #> 24 4dd1cd23-fc4d-4fd1-9709-602540f3ca6f #> 25 2856d06c-0ff9-4e01-bfc9-202b74d0b60f #> 26 251b1a7e-d050-4486-8d50-4c2619eb0f46 #> 27 07760522-707a-4a1c-8891-dbd1226d6b27 #> 28 9fcb0b73-c734-40a5-be9c-ace7eea401c9 #> 29 1a38e762-2465-418f-b81c-6a4bce261c34 #> 30 f16a8f4d-bc97-43c5-a2f6-bbda952e4c5c #> 31 94c41723-b2c4-4b59-a49a-64c9b851903e #> 32 6ceeaa86-9ceb-4582-b390-6d4dd6ff0572 #> 33 9a64bf99-ebe5-4276-93a8-bee9dff1cd47 #> 34 fc0ceb80-d2d9-47c1-9d78-b0e45c64c500 #> 35 d0ea3ec4-0f3b-4649-9146-1c0b5f303a55 #> 36 b8920ef5-7d22-497b-abca-a7a9eb76d79a #> 37 b1d37bbd-9ae4-4404-b2f9-f2fe66750e4e #> 38 a4e89c26-e8d4-4471-9b06-16a1405880f0 #> 39 a190b2e9-3796-4785-9a2f-013e2a9a43e6 #> 40 9ff9f9ba-016b-4cbb-8899-45dc20860b8b #> 41 9940f951-3dc0-4579-bbb2-2392786e59a3 #> 42 74d584f0-74fc-482e-b944-e76f29c1ab85 #> 43 6f7fd0f1-a2ed-4ff1-80d3-33dde731cbc3 #> 44 6cda07c7-5d7a-41ba-9799-5bb73da25a60 #> 45 646e3e87-e46b-4b12-85b5-8d8589e26088 #> 46 6437bc9c-16cb-46c8-8f79-9a7384a0212a #> 47 58c43cc2-e00e-43c4-94eb-8501369264e1 #> 48 53bc5729-6202-4351-bc99-1f36139e9dc4 #> 49 44c83972-e5d2-4858-ac58-2df9f4bf564b #> 50 2ecc72f8-085f-4e86-8692-771f316c54f6 #> 51 2e5a9b5d-d31b-4e9f-a179-d5d70ba459fb #> 52 1c9f5c6b-73da-4d17-95de-df080ffe0df1 #> 53 100c6145-7b0e-4ba6-81c1-ffebed0d1ac4 #> 54 0ed60482-a34f-4268-b576-d69cc30210f6 #> 55 0eccaf0c-19d2-4900-9962-899378adf8be #> 56 04c94a7d-1133-42c9-bb48-c697bd302a8d #> 57 0374f03c-62e2-4859-8a14-acb00b0627d5 #> 58 03181d87-4769-41e7-8c39-d9a81835f0d2 #> 59 f171db61-e57e-4535-a06a-35d8b6ef8f2b #> 60 ecf2e08e-2032-4a9e-b466-b65b395f4a02 #> 61 74cff64f-9da9-4b2a-9b3b-8a04a1598040 #> 62 5af90777-6760-4003-9dba-8f945fec6fdf #> 63 bd65a70f-b274-4133-b9dd-0d1431b6af34 #> 64 ff45e623-7f5f-46e3-b47d-56be0341f66b #> 65 f01bdd17-4902-40f5-86e3-240d66dd2587 #> 66 e6a11140-2545-46bc-929e-da243eed2cae #> 67 e5c63d94-593c-4338-a489-e1048599e751 #> 68 d8732da6-8d1d-42d9-b625-f2416c30054b #> 69 d77ec7d6-ef2e-49d6-9e79-05b7f8881484 #> 70 cee11228-9f0b-4e57-afe2-cfe15ee56312 #> 71 a357414d-2042-4eb5-95f0-c58604a18bdd #> 72 a2d4d33e-4c62-4361-b80a-9be53d2e50e8 #> 73 a0754256-f44b-4c4a-962c-a552e47d3fdc #> 74 983d5ec9-40e8-4512-9e65-a572a9c486cb #> 75 7357cee7-9f7f-4ab0-8cec-90de8f047e38 #> 76 6ec405bb-4727-4c6d-ab4e-01fe489af7ea #> 77 6d41668c-168c-4500-b06a-4674ccf3e19d #> 78 5e5e7a2f-8f1c-42ac-90dc-b4f80f38e84c #> 79 55cf0ea3-9d2b-4294-871e-bb4b49a79fc7 #> 80 4f1555bc-4664-46c3-a606-78d34dd10d92 #> 81 2ba40233-8576-4dec-a5f1-2adfa115e2dc #> 82 2423ce2c-3149-4cca-a2ff-cf682ea29b5f #> 83 1c9eb291-6d31-47e1-96b2-129b5e1ae64f #> 84 18eb630b-a754-4111-8cd4-c24ec80aa5ec #> 85 0d2ee4ac-05ee-40b2-afb6-ebb584caa867 #>                                                                                                                               dataset_title #> 1                                                                                                                   Human: Great apes study #> 2                                                                                                           Dissection: Angular gyrus (AnG) #> 3                                                                                                    Supercluster: CGE-derived interneurons #> 4                                                                                                   Dissection: Primary auditory cortex(A1) #> 5                                                                                      Supercluster: Deep layer (non-IT) excitatory neurons #> 6                                                                                            Supercluster: IT-projecting excitatory neurons #> 7                                                                                               Dissection: Anterior cingulate cortex (ACC) #> 8                                                                                                   Human Multiple Cortical Areas SMART-seq #> 9                                                                                                    Supercluster: MGE-derived interneurons #> 10                                                                                            Dissection: Primary somatosensory cortex (S1) #> 11                                                                                                    Dissection: Primary visual cortex(V1) #> 12                                                                                         Dissection: Dorsolateral prefrontal cortex (DFC) #> 13                                                                                                    Dissection: Primary motor cortex (M1) #> 14                                                                                                         Supercluster: Non-neuronal cells #> 15                                                                                                  Dissection: Middle temporal gyrus (MTG) #> 16                                                                       Combined single cell and single nuclei RNA-Seq data - Heart Global #> 17                                                                                                    Global dataset of infant KMT2Ar B-ALL #> 18                                                                                     Normal immune cells landscape of infant KMT2Ar B-ALL #> 19                                                                                                      Human Human Microglia 10x scRNA-seq #> 20                                                                                                    Human Endothelial cells 10x scRNA-seq #> 21                                                                                                 Human Nurr-Negative Nuclei 10x scRNA-seq #> 22                                                                                                 Human Nurr-Positive Nuclei 10x scRNA-seq #> 23                                                                                                     Human Oligodendrocytes 10x scRNA-seq #> 24                                                                                                            Human OPC Cells 10x scRNA-seq #> 25                                                                                                           Human DA Neurons 10x scRNA-seq #> 26                                                                                                       Human Non-DA Neurons 10x scRNA-seq #> 27                                                                                                           Human Astrocytes 10x scRNA-seq #> 28                                                                              An Integrated Single Cell Meta-atlas of Human Periodontitis #> 29                                                                Single-cell analysis of prenatal and postnatal human cortical development #> 30                                                       All - A single-cell transcriptomic atlas characterizes ageing tissues in the mouse #> 31                                                                                    snRNA-seq of human anterior and posterior hippocampus #> 32                                                                                                                        3-prime FGID data #> 33                                                      Single-Cell RNA Sequencing of Breast Tissues: Cell Subtypes and Cancer Risk Factors #> 34                                                                            Sst Chodl - DLPFC: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 35                                                                                  L6b - DLPFC: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 36                                                                              L5/6 NP - DLPFC: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 37                                                                                 Sncg - DLPFC: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 38                                                                                L6 CT - DLPFC: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 39                                                                           Lamp5 Lhx6 - DLPFC: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 40                                                                                L4 IT - DLPFC: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 41                                                                      Oligodendrocyte - DLPFC: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 42                                                                            Astrocyte - DLPFC: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 43                                                                       Whole Taxonomy - DLPFC: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 44                                                                                L5 ET - DLPFC: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 45                                                                              L2/3 IT - DLPFC: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 46                                                                                L6 IT - DLPFC: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 47                                                                                  OPC - DLPFC: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 48                                                                                  Vip - DLPFC: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 49                                                                                L5 IT - DLPFC: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 50                                                                          Endothelial - DLPFC: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 51                                                                                 VLMC - DLPFC: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 52                                                                           L6 IT Car3 - DLPFC: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 53                                                                        Microglia-PVM - DLPFC: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 54                                                                                Lamp5 - DLPFC: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 55                                                                                 Pax6 - DLPFC: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 56                                                                                Pvalb - DLPFC: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 57                                                                           Chandelier - DLPFC: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 58                                                                                  Sst - DLPFC: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 59                                                                                                                   donor_p13_trophoblasts #> 60                                                                                                                  All donors trophoblasts #> 61                                                                                                     All donors all cell states (in vivo) #> 62                                                                     Single-cell transcriptomic datasets of Renal cell carcinoma patients #> 63 Single-cell sequencing links multiregional immune landscapes and tissue-resident T cells in ccRCC to tumor topology and therapy efficacy #> 64                                                                                                                Tabula Sapiens - Pancreas #> 65                                                                                                          Tabula Sapiens - Salivary_Gland #> 66                                                                                                                   Tabula Sapiens - Heart #> 67                                                                                                                 Tabula Sapiens - Bladder #> 68                                                                                                                 Tabula Sapiens - Trachea #> 69                                                                                                                Tabula Sapiens - Prostate #> 70                                                                                                                  Tabula Sapiens - Spleen #> 71                                                                                                         Tabula Sapiens - Small_Intestine #> 72                                                                                                             Tabula Sapiens - Vasculature #> 73                                                                                                                     Tabula Sapiens - Eye #> 74                                                                                                                   Tabula Sapiens - Blood #> 75                                                                                                         Tabula Sapiens - Large_Intestine #> 76                                                                                                                  Tabula Sapiens - Uterus #> 77                                                                                                                   Tabula Sapiens - Liver #> 78                                                                                                                     Tabula Sapiens - Fat #> 79                                                                                                                  Tabula Sapiens - Tongue #> 80                                                                                                             Tabula Sapiens - Bone_Marrow #> 81                                                                                                                 Tabula Sapiens - Mammary #> 82                                                                                                                  Tabula Sapiens - Kidney #> 83                                                                                                                  Tabula Sapiens - Muscle #> 84                                                                                                              Tabula Sapiens - Lymph_Node #> 85                                                                                                                    Tabula Sapiens - Lung #>    dataset_total_cell_count #> 1                    156285 #> 2                    110752 #> 3                    129495 #> 4                    139054 #> 5                     92969 #> 6                    638941 #> 7                    135462 #> 8                     49417 #> 9                    185477 #> 10                   153159 #> 11                   241077 #> 12                   113339 #> 13                   114605 #> 14                   108940 #> 15                   148374 #> 16                   493236 #> 17                   128588 #> 18                    36313 #> 19                    33041 #> 20                    14903 #> 21                   104097 #> 22                    80576 #> 23                   178815 #> 24                    13691 #> 25                    22048 #> 26                    91479 #> 27                    33506 #> 28                   105918 #> 29                   700391 #> 30                   356213 #> 31                   129905 #> 32                    89849 #> 33                    52681 #> 34                     1772 #> 35                    17996 #> 36                    18154 #> 37                    23640 #> 38                    27454 #> 39                    21603 #> 40                    76195 #> 41                   136076 #> 42                    82936 #> 43                  1309414 #> 44                     3848 #> 45                   317116 #> 46                    44174 #> 47                    27670 #> 48                    95014 #> 49                    97173 #> 50                     2496 #> 51                     4619 #> 52                    13007 #> 53                    40625 #> 54                    52828 #> 55                     8984 #> 56                   109618 #> 57                    14871 #> 58                    71545 #> 59                    31497 #> 60                    67070 #> 61                   286326 #> 62                   270855 #> 63                   167283 #> 64                    13497 #> 65                    27199 #> 66                    11505 #> 67                    24583 #> 68                     9522 #> 69                    16375 #> 70                    34004 #> 71                    12467 #> 72                    16037 #> 73                    10650 #> 74                    50115 #> 75                    13680 #> 76                     7124 #> 77                     5007 #> 78                    20263 #> 79                    15020 #> 80                    12297 #> 81                    11375 #> 82                     9641 #> 83                    30746 #> 84                    53275 #> 85                    35682 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 566 rows ] census_data <- census$get(\"census_data\") all_experiments <- lapply(census_data$to_list(), function(x) census_data$get(x$name)) print(all_experiments) #> $homo_sapiens #> <SOMAExperiment> #>   uri: s3://cellxgene-census-public-us-west-2/cell-census/2023-12-15/soma/census_data/homo_sapiens  #>   arrays: obs*  #>   groups: ms*  #>  #> $mus_musculus #> <SOMAExperiment> #>   uri: s3://cellxgene-census-public-us-west-2/cell-census/2023-12-15/soma/census_data/mus_musculus  #>   arrays: obs*  #>   groups: ms* experiments_total_cells <- sum(sapply(all_experiments, function(x) {   nrow(x$obs$read(column_names = c(\"soma_joinid\"))$concat()) }))  print(paste(\"Found\", experiments_total_cells, \"cells in all experiments.\")) #> [1] \"Found 68683222 cells in all experiments.\" print(paste(   \"Found\", sum(as.vector(census_datasets$dataset_total_cell_count)),   \"cells in all datasets.\" )) #> [1] \"Found 68683222 cells in all datasets.\""},{"path":"/articles/census_datasets.html","id":"fetching-the-expression-data-from-a-single-dataset","dir":"Articles","previous_headings":"","what":"Fetching the expression data from a single dataset","title":"Census Datasets example","text":"Let’s pick one dataset slice census, turn Seurat -memory object. (requires Seurat package installed beforehand.) Create query mouse experiment, “RNA” measurement, dataset_id.","code":"census_datasets[census_datasets$dataset_id == \"0bd1a1de-3aee-40e0-b2ec-86c7a30c7149\", ] #>     soma_joinid                        collection_id    collection_name #> 581         580 0b9d8a04-bb9d-44da-aa27-705bb65b54eb Tabula Muris Senis #>                collection_doi                           dataset_id #> 581 10.1038/s41586-020-2496-1 0bd1a1de-3aee-40e0-b2ec-86c7a30c7149 #>                       dataset_version_id #> 581 ff352f35-58a2-4962-b716-649d1f9e9f44 #>                                                                                        dataset_title #> 581 Bone marrow - A single-cell transcriptomic atlas characterizes ageing tissues in the mouse - 10x #>                             dataset_h5ad_path dataset_total_cell_count #> 581 0bd1a1de-3aee-40e0-b2ec-86c7a30c7149.h5ad                    40220 library(\"tiledbsoma\") obs_query <- SOMAAxisQuery$new(   value_filter = \"dataset_id == '0bd1a1de-3aee-40e0-b2ec-86c7a30c7149'\" ) expt_query <- census_data$get(\"mus_musculus\")$axis_query(   measurement_name = \"RNA\",   obs_query = obs_query ) dataset_seurat <- expt_query$to_seurat(c(counts = \"raw\")) print(dataset_seurat) #> An object of class Seurat  #> 52417 features across 40220 samples within 1 assay  #> Active assay: RNA (52417 features, 0 variable features) #>  2 layers present: counts, data #>  1 dimensional reduction calculated: scvi"},{"path":"/articles/census_datasets.html","id":"downloading-the-original-source-h5ad-file-of-a-dataset","dir":"Articles","previous_headings":"","what":"Downloading the original source H5AD file of a dataset","title":"Census Datasets example","text":"can use cellxgene.census::get_source_h5ad_uri() API fetch URI pointing H5AD associated dataset_id. H5AD can download CZ CELLxGENE Discover, may contain additional data-submitter provided information included Census. can fetch location cloud directly download system. local H5AD file can used R using SeuratDisk’s anndata converter.","code":"# Option 1: Direct download download_source_h5ad(   dataset_id = \"0bd1a1de-3aee-40e0-b2ec-86c7a30c7149\",   file = \"/tmp/Tabula_Muris_Senis-bone_marrow.h5ad\",   overwrite = TRUE ) # Option 2: Get location and download via preferred method get_source_h5ad_uri(\"0bd1a1de-3aee-40e0-b2ec-86c7a30c7149\") #> $uri #> [1] \"s3://cellxgene-census-public-us-west-2/cell-census/2023-12-15/h5ads/0bd1a1de-3aee-40e0-b2ec-86c7a30c7149.h5ad\" #>  #> $s3_region #> [1] \"us-west-2\""},{"path":"/articles/census_datasets.html","id":"close-the-census","dir":"Articles","previous_headings":"Downloading the original source H5AD file of a dataset","what":"Close the census","title":"Census Datasets example","text":"use, census object closed release memory resources. also closes SOMA objects accessed via top-level census. Closing can automated using .exit(census$close(), add = TRUE) immediately census <- open_soma().","code":"census$close()"},{"path":"/articles/census_query_extract.html","id":"opening-the-census","dir":"Articles","previous_headings":"","what":"Opening the census","title":"Querying and fetching the single-cell data and cell/gene metadata","text":"cellxgene.census R package contains convenient API open version Census (default, newest stable version). can learn cellxgene.census methods accessing corresponding documentation, example ?cellxgene.census::open_soma.","code":"library(\"cellxgene.census\") census <- open_soma()"},{"path":"/articles/census_query_extract.html","id":"querying-cell-metadata-obs","dir":"Articles","previous_headings":"","what":"Querying cell metadata (obs)","title":"Querying and fetching the single-cell data and cell/gene metadata","text":"human gene metadata Census, RNA assays, located census$get(\"census_data\")$get(\"homo_sapiens\")$obs. SOMADataFrame can materialized R data frame (tibble) using .data.frame(obs$read()$concat()). mouse cell metadata census$get(\"census_data\")$get(\"mus_musculus\").obs. slicing cell metadata two relevant arguments can passed read(): column_names — character vector indicating metadata columns fetch. Expressions one comparisons Comparisons one <column> <op> <value> <column> <op> <column> Expressions can combine comparisons using && || op one < | > | <= | >= | == | != %% learn metadata columns available fetching filtering can directly look keys cell metadata. soma_joinid special SOMADataFrame column used join operations. definition columns can found Census schema. can used fetch specific columns specific rows matching condition. latter need know values looking priori. example let’s see possible values available sex. can load cell metadata fetching column sex. can see three different values sex, \"male\", \"female\" \"unknown\". information can fetch cell metatadata specific sex value, example \"unknown\". can use column_names value_filter perform specific queries. example let’s fetch disease column cell_type \"B cell\" tissue_general \"lung\".","code":"census$get(\"census_data\")$get(\"homo_sapiens\")$obs$colnames() #>  [1] \"soma_joinid\"                              #>  [2] \"dataset_id\"                               #>  [3] \"assay\"                                    #>  [4] \"assay_ontology_term_id\"                   #>  [5] \"cell_type\"                                #>  [6] \"cell_type_ontology_term_id\"               #>  [7] \"development_stage\"                        #>  [8] \"development_stage_ontology_term_id\"       #>  [9] \"disease\"                                  #> [10] \"disease_ontology_term_id\"                 #> [11] \"donor_id\"                                 #> [12] \"is_primary_data\"                          #> [13] \"self_reported_ethnicity\"                  #> [14] \"self_reported_ethnicity_ontology_term_id\" #> [15] \"sex\"                                      #> [16] \"sex_ontology_term_id\"                     #> [17] \"suspension_type\"                          #> [18] \"tissue\"                                   #> [19] \"tissue_ontology_term_id\"                  #> [20] \"tissue_general\"                           #> [21] \"tissue_general_ontology_term_id\"          #> [22] \"raw_sum\"                                  #> [23] \"nnz\"                                      #> [24] \"raw_mean_nnz\"                             #> [25] \"raw_variance_nnz\"                         #> [26] \"n_measured_vars\" unique(as.data.frame(census$get(\"census_data\")$get(\"homo_sapiens\")$obs$read(column_names = \"sex\")$concat())) #>             sex #> 1          male #> 224      female #> 3747640 unknown as.data.frame(census$get(\"census_data\")$get(\"homo_sapiens\")$obs$read(value_filter = \"sex == 'unknown'\")$concat()) #>   soma_joinid                           dataset_id     assay assay_ontology_term_id #> 1     3747639 9fcb0b73-c734-40a5-be9c-ace7eea401c9 10x 3' v2            EFO:0009899 #> 2     3747640 9fcb0b73-c734-40a5-be9c-ace7eea401c9 10x 3' v2            EFO:0009899 #> 3     3747641 9fcb0b73-c734-40a5-be9c-ace7eea401c9 10x 3' v2            EFO:0009899 #> 4     3747642 9fcb0b73-c734-40a5-be9c-ace7eea401c9 10x 3' v2            EFO:0009899 #> 5     3747643 9fcb0b73-c734-40a5-be9c-ace7eea401c9 10x 3' v2            EFO:0009899 #> 6     3747644 9fcb0b73-c734-40a5-be9c-ace7eea401c9 10x 3' v2            EFO:0009899 #> 7     3747645 9fcb0b73-c734-40a5-be9c-ace7eea401c9 10x 3' v2            EFO:0009899 #> 8     3747646 9fcb0b73-c734-40a5-be9c-ace7eea401c9 10x 3' v2            EFO:0009899 #> 9     3747647 9fcb0b73-c734-40a5-be9c-ace7eea401c9 10x 3' v2            EFO:0009899 #>    cell_type cell_type_ontology_term_id development_stage #> 1 fibroblast                 CL:0000057 human adult stage #> 2 fibroblast                 CL:0000057 human adult stage #> 3 fibroblast                 CL:0000057 human adult stage #> 4 fibroblast                 CL:0000057 human adult stage #> 5 fibroblast                 CL:0000057 human adult stage #> 6 fibroblast                 CL:0000057 human adult stage #> 7 fibroblast                 CL:0000057 human adult stage #> 8 fibroblast                 CL:0000057 human adult stage #> 9 fibroblast                 CL:0000057 human adult stage #>   development_stage_ontology_term_id disease disease_ontology_term_id #> 1                     HsapDv:0000087  normal             PATO:0000461 #> 2                     HsapDv:0000087  normal             PATO:0000461 #> 3                     HsapDv:0000087  normal             PATO:0000461 #> 4                     HsapDv:0000087  normal             PATO:0000461 #> 5                     HsapDv:0000087  normal             PATO:0000461 #> 6                     HsapDv:0000087  normal             PATO:0000461 #> 7                     HsapDv:0000087  normal             PATO:0000461 #> 8                     HsapDv:0000087  normal             PATO:0000461 #> 9                     HsapDv:0000087  normal             PATO:0000461 #>                       donor_id is_primary_data self_reported_ethnicity #> 1 Pagella_GSE161267_GSM4904134            TRUE                 unknown #> 2 Pagella_GSE161267_GSM4904134            TRUE                 unknown #> 3 Pagella_GSE161267_GSM4904134            TRUE                 unknown #> 4 Pagella_GSE161267_GSM4904134            TRUE                 unknown #> 5 Pagella_GSE161267_GSM4904134            TRUE                 unknown #> 6 Pagella_GSE161267_GSM4904134            TRUE                 unknown #> 7 Pagella_GSE161267_GSM4904134            TRUE                 unknown #> 8 Pagella_GSE161267_GSM4904134            TRUE                 unknown #> 9 Pagella_GSE161267_GSM4904134            TRUE                 unknown #>   self_reported_ethnicity_ontology_term_id     sex sex_ontology_term_id suspension_type #> 1                                  unknown unknown              unknown            cell #> 2                                  unknown unknown              unknown            cell #> 3                                  unknown unknown              unknown            cell #> 4                                  unknown unknown              unknown            cell #> 5                                  unknown unknown              unknown            cell #> 6                                  unknown unknown              unknown            cell #> 7                                  unknown unknown              unknown            cell #> 8                                  unknown unknown              unknown            cell #> 9                                  unknown unknown              unknown            cell #>    tissue tissue_ontology_term_id tissue_general tissue_general_ontology_term_id #> 1 gingiva          UBERON:0001828         mucosa                  UBERON:0000344 #> 2 gingiva          UBERON:0001828         mucosa                  UBERON:0000344 #> 3 gingiva          UBERON:0001828         mucosa                  UBERON:0000344 #> 4 gingiva          UBERON:0001828         mucosa                  UBERON:0000344 #> 5 gingiva          UBERON:0001828         mucosa                  UBERON:0000344 #> 6 gingiva          UBERON:0001828         mucosa                  UBERON:0000344 #> 7 gingiva          UBERON:0001828         mucosa                  UBERON:0000344 #> 8 gingiva          UBERON:0001828         mucosa                  UBERON:0000344 #> 9 gingiva          UBERON:0001828         mucosa                  UBERON:0000344 #>   raw_sum  nnz raw_mean_nnz raw_variance_nnz n_measured_vars #> 1     547  329     1.662614        14.559604           31602 #> 2     982  563     1.744227         5.315247           31602 #> 3   12467 3809     3.273038       109.305683           31602 #> 4    1053  566     1.860424         7.430042           31602 #> 5     548  363     1.509642         2.410818           31602 #> 6     678  429     1.580420        11.379616           31602 #> 7     848  524     1.618321         9.437216           31602 #> 8     935  608     1.537829         4.868418           31602 #> 9     735  485     1.515464         6.213087           31602 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 3301779 rows ] cell_metadata_b_cell <- census$get(\"census_data\")$get(\"homo_sapiens\")$obs$read(   value_filter = \"cell_type == 'B cell' & tissue_general == 'lung'\",   column_names = \"disease\" )  cell_metadata_b_cell <- as.data.frame(cell_metadata_b_cell$concat())  table(cell_metadata_b_cell) #> disease #> chronic obstructive pulmonary disease                              COVID-19  #>                                  6369                                  2729  #>          hypersensitivity pneumonitis             interstitial lung disease  #>                                    52                                   376  #>                   lung adenocarcinoma             lung large cell carcinoma  #>                                 62351                                  1534  #>              lymphangioleiomyomatosis         non-small cell lung carcinoma  #>                                   133                                 17484  #>   non-specific interstitial pneumonia                                normal  #>                                   231                                 25461  #>                 pleomorphic carcinoma                             pneumonia  #>                                  1210                                    50  #>                   pulmonary emphysema                    pulmonary fibrosis  #>                                  1512                                  6798  #>                 pulmonary sarcoidosis             small cell lung carcinoma  #>                                     6                                   583  #>          squamous cell lung carcinoma  #>                                 11920"},{"path":"/articles/census_query_extract.html","id":"querying-gene-metadata-var","dir":"Articles","previous_headings":"","what":"Querying gene metadata (var)","title":"Querying and fetching the single-cell data and cell/gene metadata","text":"human gene metadata Census located census$get(\"census_data\")$get(\"homo_sapiens\")$ms$get(\"RNA\")$var. Similarly cell metadata, SOMADataFrame thus can also use method read(). mouse gene metadata census$get(\"census_data\")$get(\"mus_musculus\")$ms$get(\"RNA\")$var. Let’s take look metadata available column selection row filtering. exception soma_joinid columns defined Census schema. Similarly cell metadata, can use operations learn fetch gene metadata. example, get feature_name feature_length genes \"ENSG00000161798\" \"ENSG00000188229\" can following.","code":"census$get(\"census_data\")$get(\"homo_sapiens\")$ms$get(\"RNA\")$var$colnames() #> [1] \"soma_joinid\"    \"feature_id\"     \"feature_name\"   \"feature_length\" \"nnz\"            #> [6] \"n_measured_obs\" var_df <- census$get(\"census_data\")$get(\"homo_sapiens\")$ms$get(\"RNA\")$var$read(   value_filter = \"feature_id %in% c('ENSG00000161798', 'ENSG00000188229')\",   column_names = c(\"feature_name\", \"feature_length\") )  as.data.frame(var_df$concat()) #>   feature_name feature_length #> 1         AQP5           1884 #> 2       TUBB4B           2037"},{"path":"/articles/census_query_extract.html","id":"querying-expression-data-as-seurat","dir":"Articles","previous_headings":"","what":"Querying expression data as Seurat","title":"Querying and fetching the single-cell data and cell/gene metadata","text":"convenient way query fetch expression data use get_seurat method cellxgene.census API. method combines column selection value filtering described obtain slices expression data based metadata queries. method return Seurat object, takes input census object, string organism, cell gene metadata can specify filters column selection described following arguments: obs_column_names — character vector indicating columns select cell metadata. obs_value_filter — expression selection conditions fetch cells meeting criteria. var_column_names — character vector indicating columns select gene metadata. var_value_filter — expression selection conditions fetch genes meeting criteria. example want fetch expression data : Genes \"ENSG00000161798\" \"ENSG00000188229\". \"B cells\" \"lung\" \"COVID-19\". gene metadata adding sex cell metadata. full description refer ?cellxgene.census::get_seurat.","code":"library(\"Seurat\")  seurat_obj <- get_seurat(   census, \"Homo sapiens\",   obs_column_names = c(\"cell_type\", \"tissue_general\", \"disease\", \"sex\"),   var_value_filter = \"feature_id %in% c('ENSG00000161798', 'ENSG00000188229')\",   obs_value_filter = \"cell_type == 'B cell' & tissue_general == 'lung' & disease == 'COVID-19'\" ) seurat_obj #> An object of class Seurat  #> 2 features across 2729 samples within 1 assay  #> Active assay: RNA (2 features, 0 variable features) #>  2 layers present: counts, data head(seurat_obj[[]]) #>                 orig.ident nCount_RNA nFeature_RNA cell_type tissue_general  disease #> cell13391229 SeuratProject          0            0    B cell           lung COVID-19 #> cell13393737 SeuratProject          1            1    B cell           lung COVID-19 #> cell13394391 SeuratProject          0            0    B cell           lung COVID-19 #> cell13394897 SeuratProject          0            0    B cell           lung COVID-19 #> cell13395941 SeuratProject          0            0    B cell           lung COVID-19 #> cell13397408 SeuratProject          0            0    B cell           lung COVID-19 #>                  sex #> cell13391229    male #> cell13393737 unknown #> cell13394391    male #> cell13394897 unknown #> cell13395941    male #> cell13397408 unknown head(seurat_obj$RNA[[]]) #>                 feature_name feature_length      nnz n_measured_obs #> ENSG00000161798         AQP5           1884  1029069       58250439 #> ENSG00000188229       TUBB4B           2037 21416107       62655002"},{"path":"/articles/census_query_extract.html","id":"querying-expression-data-as-singlecellexperiment","dir":"Articles","previous_headings":"","what":"Querying expression data as SingleCellExperiment","title":"Querying and fetching the single-cell data and cell/gene metadata","text":"Similarly previous section, get_single_cell_experiment method cellxgene.census API. behaves exactly get_seurat returns SingleCellExperiment object. example, repeat query can simply following. full description refer ?cellxgene.census::get_single_cell_experiment.","code":"library(\"SingleCellExperiment\")  sce_obj <- get_single_cell_experiment(   census, \"Homo sapiens\",   obs_column_names = c(\"cell_type\", \"tissue_general\", \"disease\", \"sex\"),   var_value_filter = \"feature_id %in% c('ENSG00000161798', 'ENSG00000188229')\",   obs_value_filter = \"cell_type == 'B cell' & tissue_general == 'lung' & disease == 'COVID-19'\" ) sce_obj #> class: SingleCellExperiment  #> dim: 2 2729  #> metadata(0): #> assays(1): counts #> rownames(2): ENSG00000161798 ENSG00000188229 #> rowData names(4): feature_name feature_length nnz n_measured_obs #> colnames(2729): obs13391229 obs13393737 ... obs54635684 obs54635708 #> colData names(4): cell_type tissue_general disease sex #> reducedDimNames(0): #> mainExpName: RNA #> altExpNames(0): head(colData(sce_obj)) #> DataFrame with 6 rows and 4 columns #>               cell_type tissue_general     disease         sex #>             <character>    <character> <character> <character> #> obs13391229      B cell           lung    COVID-19        male #> obs13393737      B cell           lung    COVID-19     unknown #> obs13394391      B cell           lung    COVID-19        male #> obs13394897      B cell           lung    COVID-19     unknown #> obs13395941      B cell           lung    COVID-19        male #> obs13397408      B cell           lung    COVID-19     unknown head(rowData(sce_obj)) #> DataFrame with 2 rows and 4 columns #>                 feature_name feature_length       nnz n_measured_obs #>                  <character>      <integer> <integer>      <integer> #> ENSG00000161798         AQP5           1884   1029069       58250439 #> ENSG00000188229       TUBB4B           2037  21416107       62655002"},{"path":"/articles/census_query_extract.html","id":"close-the-census","dir":"Articles","previous_headings":"Querying expression data as SingleCellExperiment","what":"Close the census","title":"Querying and fetching the single-cell data and cell/gene metadata","text":"use, census object closed release memory resources. also closes SOMA objects accessed via top-level census. Closing can automated using .exit(census$close(), add = TRUE) immediately census <- open_soma().","code":"census$close()"},{"path":"/articles/comp_bio_census_info.html","id":"opening-the-census","dir":"Articles","previous_headings":"","what":"Opening the Census","title":"Learning about the CZ CELLxGENE Census","text":"cellxgene.census R package contains convenient open_soma() API open version Census (stable default). can learn cellxgene.census methods accessing corresponding documentation, example ?cellxgene.census::open_soma.","code":"library(\"cellxgene.census\") census <- open_soma()"},{"path":"/articles/comp_bio_census_info.html","id":"census-organization","dir":"Articles","previous_headings":"","what":"Census organization","title":"Learning about the CZ CELLxGENE Census","text":"Census schema defines structure Census. short, can think Census structured collection items stores different pieces information. items parent collection SOMA objects various types can accessed TileDB-SOMA API (documentation). cellxgene.census package contains convenient wrappers TileDB-SOMA API. example function used open Census: cellxgene_census.open_soma().","code":""},{"path":"/articles/comp_bio_census_info.html","id":"main-census-components","dir":"Articles","previous_headings":"Census organization","what":"Main Census components","title":"Learning about the CZ CELLxGENE Census","text":"command created census, SOMACollection, R6 class providing key-value associative map. get() method can access two top-level collection members, census_info census_data, instances SOMACollection.","code":""},{"path":"/articles/comp_bio_census_info.html","id":"census-summary-info","dir":"Articles","previous_headings":"Census organization","what":"Census summary info","title":"Learning about the CZ CELLxGENE Census","text":"census$get(\"census_info\")$get(\"summary\"): data frame high-level information Census, e.g. build date, total cell count, etc. census$get(\"census_info\")$get(\"datasets\"): data frame datasets CELLxGENE Discover used create Census. census$get(\"census_info\")$get(\"summary_cell_counts\"): data frame cell counts stratified relevant cell metadata Census data Data organism stored independent SOMAExperiment objects specialized form SOMACollection. store data matrix (cell genes), cell metadata, gene metadata, useful components covered notebook. data organized one organism – Homo sapiens: census$get(\"census_data\")$get(\"homo_sapiens\")$obs: Cell metadata census$get(\"census_data\")$get(\"homo_sapiens\")$ms$get(\"RNA\"): Data matrices, currently … census$get(\"census_data\")$get(\"homo_sapiens\")$ms$get(\"RNA\")$X$get(\"raw\"): matrix raw counts SOMASparseNDArray census$get(\"census_data\")$get(\"homo_sapiens\")$ms$get(\"RNA\")$var: Gene Metadata","code":""},{"path":"/articles/comp_bio_census_info.html","id":"cell-metadata","dir":"Articles","previous_headings":"","what":"Cell metadata","title":"Learning about the CZ CELLxGENE Census","text":"can obtain cell metadata variables directly querying columns corresponding SOMADataFrame. variables can used querying Census case want work specific cells. variables defined CELLxGENE dataset schema except following: soma_joinid: SOMA-defined value use join operations. dataset_id: dataset id encoded census$get(\"census_info\")$get(\"datasets\"). tissue_general tissue_general_ontology_term_id: high-level tissue mapping.","code":"census$get(\"census_data\")$get(\"homo_sapiens\")$obs$colnames() #>  [1] \"soma_joinid\"                              #>  [2] \"dataset_id\"                               #>  [3] \"assay\"                                    #>  [4] \"assay_ontology_term_id\"                   #>  [5] \"cell_type\"                                #>  [6] \"cell_type_ontology_term_id\"               #>  [7] \"development_stage\"                        #>  [8] \"development_stage_ontology_term_id\"       #>  [9] \"disease\"                                  #> [10] \"disease_ontology_term_id\"                 #> [11] \"donor_id\"                                 #> [12] \"is_primary_data\"                          #> [13] \"self_reported_ethnicity\"                  #> [14] \"self_reported_ethnicity_ontology_term_id\" #> [15] \"sex\"                                      #> [16] \"sex_ontology_term_id\"                     #> [17] \"suspension_type\"                          #> [18] \"tissue\"                                   #> [19] \"tissue_ontology_term_id\"                  #> [20] \"tissue_general\"                           #> [21] \"tissue_general_ontology_term_id\"          #> [22] \"raw_sum\"                                  #> [23] \"nnz\"                                      #> [24] \"raw_mean_nnz\"                             #> [25] \"raw_variance_nnz\"                         #> [26] \"n_measured_vars\""},{"path":"/articles/comp_bio_census_info.html","id":"gene-metadata","dir":"Articles","previous_headings":"","what":"Gene metadata","title":"Learning about the CZ CELLxGENE Census","text":"Similarly, can obtain gene metadata variables directly querying columns corresponding SOMADataFrame. variables can use querying Census case specific genes interested . variables defined CELLxGENE dataset schema except following: soma_joinid: SOMA-defined value use join operations. feature_length: length base pairs gene.","code":"census$get(\"census_data\")$get(\"homo_sapiens\")$ms$get(\"RNA\")$var$colnames() #> [1] \"soma_joinid\"    \"feature_id\"     \"feature_name\"   \"feature_length\" \"nnz\"            #> [6] \"n_measured_obs\""},{"path":"/articles/comp_bio_census_info.html","id":"census-summary-content-tables","dir":"Articles","previous_headings":"","what":"Census summary content tables","title":"Learning about the CZ CELLxGENE Census","text":"can take quick look high-level Census information looking census$get(\"census_info\")$get(\"summary\"): special interest label-value combinations : total_cell_count total number cells Census. unique_cell_count number unique cells, cells may present twice due meta-analysis consortia-like data. number_donors_homo_sapiens number_donors_mus_musculus number individuals human mouse. guaranteed unique one individual ID may present identical different datasets.","code":"as.data.frame(census$get(\"census_info\")$get(\"summary\")$read()$concat()) #>   soma_joinid                      label      value #> 1           0      census_schema_version      1.2.0 #> 2           1          census_build_date 2023-10-23 #> 3           2     dataset_schema_version      3.1.0 #> 4           3           total_cell_count   68683222 #> 5           4          unique_cell_count   40356133 #> 6           5 number_donors_homo_sapiens      15588 #> 7           6 number_donors_mus_musculus       1990"},{"path":"/articles/comp_bio_census_info.html","id":"cell-counts-by-cell-metadata","dir":"Articles","previous_headings":"Census summary content tables","what":"Cell counts by cell metadata","title":"Learning about the CZ CELLxGENE Census","text":"looking census$get(\"census_info)$get(\"summary_cell_counts\") can get general idea cell counts stratified relevant cell metadata. cell metadata included table, can take look cell gene metadata available sections “Cell metadata” “Gene metadata”. line retrieves table casts R data frame: combination organism values category cell metadata can take look total_cell_count unique_cell_count cell counts combination. values category specified ontology_term_id label, value’s IDs labels, respectively.","code":"census_counts <- as.data.frame(census$get(\"census_info\")$get(\"summary_cell_counts\")$read()$concat()) head(census_counts) #>   soma_joinid     organism category ontology_term_id unique_cell_count total_cell_count #> 1           0 Homo sapiens      all               na          36227903         62998417 #> 2           1 Homo sapiens    assay      EFO:0008722            264166           279635 #> 3           2 Homo sapiens    assay      EFO:0008780             25652            51304 #> 4           3 Homo sapiens    assay      EFO:0008796             54753            54753 #> 5           4 Homo sapiens    assay      EFO:0008919             89477           206754 #> 6           5 Homo sapiens    assay      EFO:0008931             78750           188248 #>        label #> 1         na #> 2   Drop-seq #> 3     inDrop #> 4   MARS-seq #> 5   Seq-Well #> 6 Smart-seq2"},{"path":"/articles/comp_bio_census_info.html","id":"example-cell-metadata-included-in-the-summary-counts-table","dir":"Articles","previous_headings":"Census summary content tables > Cell counts by cell metadata","what":"Example: cell metadata included in the summary counts table","title":"Learning about the CZ CELLxGENE Census","text":"get available cell metadata summary counts table can following. Remember cell metadata available, variables omitted creation table.","code":"t(table(census_counts$organism, census_counts$category)) #>                           #>                           Homo sapiens Mus musculus #>   all                                1            1 #>   assay                             20           10 #>   cell_type                        631          248 #>   disease                           72            5 #>   self_reported_ethnicity           30            1 #>   sex                                3            3 #>   suspension_type                    1            1 #>   tissue                           230           74 #>   tissue_general                    53           27"},{"path":"/articles/comp_bio_census_info.html","id":"example-cell-counts-for-each-sequencing-assay-in-human-data","dir":"Articles","previous_headings":"Census summary content tables > Cell counts by cell metadata","what":"Example: cell counts for each sequencing assay in human data","title":"Learning about the CZ CELLxGENE Census","text":"get cell counts sequencing assay type human data, can perform following operations:","code":"human_assay_counts <- census_counts[census_counts$organism == \"Homo sapiens\" & census_counts$category == \"assay\", ] human_assay_counts <- human_assay_counts[order(human_assay_counts$total_cell_count, decreasing = TRUE), ]"},{"path":"/articles/comp_bio_census_info.html","id":"example-number-of-microglial-cells-in-the-census","dir":"Articles","previous_headings":"Census summary content tables > Cell counts by cell metadata","what":"Example: number of microglial cells in the Census","title":"Learning about the CZ CELLxGENE Census","text":"specific term categories shown can directly find number cells term.","code":"census_counts[census_counts$label == \"microglial cell\", ] #>      soma_joinid     organism  category ontology_term_id unique_cell_count #> 72            71 Homo sapiens cell_type       CL:0000129            359243 #> 1080        1079 Mus musculus cell_type       CL:0000129             48998 #>      total_cell_count           label #> 72             544977 microglial cell #> 1080            75885 microglial cell"},{"path":"/articles/comp_bio_census_info.html","id":"understanding-census-contents-beyond-the-summary-tables","dir":"Articles","previous_headings":"","what":"Understanding Census contents beyond the summary tables","title":"Learning about the CZ CELLxGENE Census","text":"using pre-computed tables census$get(\"census_info\") easy quick way understand contents Census, falls short want learn certain slices Census. example, may want learn : cell types available human liver? total number cells lung datasets stratified sequencing technology? sex distribution cells brain mouse? diseases available T cells? questions can answered directly querying cell metadata shown examples .","code":""},{"path":"/articles/comp_bio_census_info.html","id":"example-all-cell-types-available-in-human","dir":"Articles","previous_headings":"Understanding Census contents beyond the summary tables","what":"Example: all cell types available in human","title":"Learning about the CZ CELLxGENE Census","text":"exemplify process accessing slicing cell metadata summary stats, let’s start trivial example take look human cell types available Census: number rows total number cells humans. Now, wish get cell counts per cell type can work data frame. addition, focus cells marked is_primary_data=TRUE ensures de-duplicate cells appear CELLxGENE Discover. number unique cells. Now let’s look counts per cell type: shows abundant cell types “glutamatergic neuron”, “CD8-positive, alpha-beta T cell”, “CD4-positive, alpha-beta T cell”. Now let’s take look number unique cell types: total number different cell types human. information example can quickly obtained summary table census$get(\"census-info\")$get(\"summary_cell_counts\"). examples complex can achieved accessing cell metadata.","code":"obs_df <-   census$get(\"census_data\")$get(\"homo_sapiens\")$obs$read(column_names = c(\"cell_type\", \"is_primary_data\")) as.data.frame(obs_df$concat()) #>                            cell_type is_primary_data #> 1                    oligodendrocyte           FALSE #> 2     oligodendrocyte precursor cell           FALSE #> 3   astrocyte of the cerebral cortex           FALSE #> 4   astrocyte of the cerebral cortex           FALSE #> 5   astrocyte of the cerebral cortex           FALSE #> 6     oligodendrocyte precursor cell           FALSE #> 7   astrocyte of the cerebral cortex           FALSE #> 8                    microglial cell           FALSE #> 9   astrocyte of the cerebral cortex           FALSE #> 10  astrocyte of the cerebral cortex           FALSE #> 11  astrocyte of the cerebral cortex           FALSE #> 12  astrocyte of the cerebral cortex           FALSE #> 13  astrocyte of the cerebral cortex           FALSE #> 14  astrocyte of the cerebral cortex           FALSE #> 15  astrocyte of the cerebral cortex           FALSE #> 16    oligodendrocyte precursor cell           FALSE #> 17                   oligodendrocyte           FALSE #> 18  astrocyte of the cerebral cortex           FALSE #> 19  astrocyte of the cerebral cortex           FALSE #> 20  astrocyte of the cerebral cortex           FALSE #> 21  astrocyte of the cerebral cortex           FALSE #> 22  astrocyte of the cerebral cortex           FALSE #> 23    oligodendrocyte precursor cell           FALSE #> 24  astrocyte of the cerebral cortex           FALSE #> 25  astrocyte of the cerebral cortex           FALSE #> 26    oligodendrocyte precursor cell           FALSE #> 27                   microglial cell           FALSE #> 28                   oligodendrocyte           FALSE #> 29  astrocyte of the cerebral cortex           FALSE #> 30  cerebral cortex endothelial cell           FALSE #> 31                   microglial cell           FALSE #> 32                   microglial cell           FALSE #> 33                   microglial cell           FALSE #> 34                   oligodendrocyte           FALSE #> 35                   oligodendrocyte           FALSE #> 36                   microglial cell           FALSE #> 37                   oligodendrocyte           FALSE #> 38                   oligodendrocyte           FALSE #> 39  astrocyte of the cerebral cortex           FALSE #> 40                   oligodendrocyte           FALSE #> 41  astrocyte of the cerebral cortex           FALSE #> 42                   oligodendrocyte           FALSE #> 43    oligodendrocyte precursor cell           FALSE #> 44                   oligodendrocyte           FALSE #> 45  astrocyte of the cerebral cortex           FALSE #> 46    oligodendrocyte precursor cell           FALSE #> 47                   oligodendrocyte           FALSE #> 48    oligodendrocyte precursor cell           FALSE #> 49  astrocyte of the cerebral cortex           FALSE #> 50  astrocyte of the cerebral cortex           FALSE #> 51  astrocyte of the cerebral cortex           FALSE #> 52                   oligodendrocyte           FALSE #> 53                   oligodendrocyte           FALSE #> 54                   oligodendrocyte           FALSE #> 55  astrocyte of the cerebral cortex           FALSE #> 56  cerebral cortex endothelial cell           FALSE #> 57                   oligodendrocyte           FALSE #> 58                   oligodendrocyte           FALSE #> 59                   oligodendrocyte           FALSE #> 60                   microglial cell           FALSE #> 61                   microglial cell           FALSE #> 62    oligodendrocyte precursor cell           FALSE #> 63    oligodendrocyte precursor cell           FALSE #> 64                   oligodendrocyte           FALSE #> 65    oligodendrocyte precursor cell           FALSE #> 66                   oligodendrocyte           FALSE #> 67  astrocyte of the cerebral cortex           FALSE #> 68                   oligodendrocyte           FALSE #> 69    oligodendrocyte precursor cell           FALSE #> 70                   oligodendrocyte           FALSE #> 71  astrocyte of the cerebral cortex           FALSE #> 72  astrocyte of the cerebral cortex           FALSE #> 73  astrocyte of the cerebral cortex           FALSE #> 74    oligodendrocyte precursor cell           FALSE #> 75  astrocyte of the cerebral cortex           FALSE #> 76    oligodendrocyte precursor cell           FALSE #> 77                   microglial cell           FALSE #> 78                   microglial cell           FALSE #> 79    oligodendrocyte precursor cell           FALSE #> 80                   oligodendrocyte           FALSE #> 81                   oligodendrocyte           FALSE #> 82  astrocyte of the cerebral cortex           FALSE #> 83                   oligodendrocyte           FALSE #> 84  astrocyte of the cerebral cortex           FALSE #> 85  astrocyte of the cerebral cortex           FALSE #> 86                   oligodendrocyte           FALSE #> 87  astrocyte of the cerebral cortex           FALSE #> 88                   oligodendrocyte           FALSE #> 89    oligodendrocyte precursor cell           FALSE #> 90    oligodendrocyte precursor cell           FALSE #> 91  astrocyte of the cerebral cortex           FALSE #> 92  astrocyte of the cerebral cortex           FALSE #> 93  astrocyte of the cerebral cortex           FALSE #> 94                   oligodendrocyte           FALSE #> 95  astrocyte of the cerebral cortex           FALSE #> 96  astrocyte of the cerebral cortex           FALSE #> 97                   oligodendrocyte           FALSE #> 98                   oligodendrocyte           FALSE #> 99    oligodendrocyte precursor cell           FALSE #> 100                  oligodendrocyte           FALSE #> 101                  oligodendrocyte           FALSE #> 102                  oligodendrocyte           FALSE #> 103 astrocyte of the cerebral cortex           FALSE #> 104   oligodendrocyte precursor cell           FALSE #> 105                  oligodendrocyte           FALSE #> 106   oligodendrocyte precursor cell           FALSE #> 107                  oligodendrocyte           FALSE #> 108                  oligodendrocyte           FALSE #> 109                  oligodendrocyte           FALSE #> 110                  oligodendrocyte           FALSE #> 111   oligodendrocyte precursor cell           FALSE #> 112                  oligodendrocyte           FALSE #> 113                  oligodendrocyte           FALSE #> 114 astrocyte of the cerebral cortex           FALSE #> 115                  oligodendrocyte           FALSE #> 116 astrocyte of the cerebral cortex           FALSE #> 117                  oligodendrocyte           FALSE #> 118                  oligodendrocyte           FALSE #> 119                  oligodendrocyte           FALSE #> 120 astrocyte of the cerebral cortex           FALSE #> 121 astrocyte of the cerebral cortex           FALSE #> 122   oligodendrocyte precursor cell           FALSE #> 123                  microglial cell           FALSE #> 124 astrocyte of the cerebral cortex           FALSE #> 125 astrocyte of the cerebral cortex           FALSE #> 126                  microglial cell           FALSE #> 127 cerebral cortex endothelial cell           FALSE #> 128   oligodendrocyte precursor cell           FALSE #>  [ reached 'max' / getOption(\"max.print\") -- omitted 62998289 rows ] obs_df <- census$get(\"census_data\")$get(\"homo_sapiens\")$obs$read(   column_names = \"cell_type\",   value_filter = \"is_primary_data == TRUE\" )  obs_df <- as.data.frame(obs_df$concat()) nrow(obs_df) #> [1] 36227903 human_cell_type_counts <- table(obs_df$cell_type) sort(human_cell_type_counts, decreasing = TRUE)[1:10] #>  #>                                                             neuron  #>                                                            2815336  #>                                               glutamatergic neuron  #>                                                            1563446  #>                                    CD4-positive, alpha-beta T cell  #>                                                            1243885  #>                                    CD8-positive, alpha-beta T cell  #>                                                            1197715  #> L2/3-6 intratelencephalic projecting glutamatergic cortical neuron  #>                                                            1123360  #>                                                    oligodendrocyte  #>                                                            1063874  #>                                                 classical monocyte  #>                                                            1030996  #>                                                        native cell  #>                                                            1011949  #>                                                             B cell  #>                                                             934060  #>                                                natural killer cell  #>                                                             770637 length(human_cell_type_counts) #> [1] 610"},{"path":"/articles/comp_bio_census_info.html","id":"example-cell-types-available-in-human-liver","dir":"Articles","previous_headings":"Understanding Census contents beyond the summary tables","what":"Example: cell types available in human liver","title":"Learning about the CZ CELLxGENE Census","text":"Similar example , can learn cell types available specific tissue, e.g. liver. achieve goal just need limit cell metadata tissue. use information cell metadata variable tissue_general. variable contains high-level tissue label cells Census: cell types cell counts human liver.","code":"obs_liver_df <- census$get(\"census_data\")$get(\"homo_sapiens\")$obs$read(   column_names = \"cell_type\",   value_filter = \"is_primary_data == TRUE & tissue_general == 'liver'\" )  obs_liver_df <- as.data.frame(obs_liver_df$concat())  sort(table(obs_liver_df$cell_type), decreasing = TRUE)[1:10] #>  #>                          T cell                     hepatoblast  #>                           85739                           58447  #>                 neoplastic cell                    erythroblast  #>                           52431                           45605  #>                        monocyte                      hepatocyte  #>                           31388                           28309  #>             natural killer cell    periportal region hepatocyte  #>                           26871                           23509  #>                      macrophage centrilobular region hepatocyte  #>                           16707                           15819"},{"path":"/articles/comp_bio_census_info.html","id":"example-diseased-t-cells-in-human-tissues","dir":"Articles","previous_headings":"Understanding Census contents beyond the summary tables","what":"Example: diseased T cells in human tissues","title":"Learning about the CZ CELLxGENE Census","text":"example going get counts diseased cells annotated T cells. sake example focus “CD8-positive, alpha-beta T cell” “CD4-positive, alpha-beta T cell”: cell counts annotated indicated disease across human tissues “CD8-positive, alpha-beta T cell” “CD4-positive, alpha-beta T cell”.","code":"obs_t_cells_df <- census$get(\"census_data\")$get(\"homo_sapiens\")$obs$read(   column_names = c(\"disease\", \"tissue_general\"),   value_filter = \"is_primary_data == TRUE & disease != 'normal' & cell_type %in% c('CD8-positive, alpha-beta T cell', 'CD4-positive, alpha-beta T cell')\" )  obs_t_cells_df <- as.data.frame(obs_t_cells_df$concat())  print(table(obs_t_cells_df)) #>                                        tissue_general #> disease                                 adrenal gland  blood bone marrow  brain breast #>   breast cancer                                     0      0           0      0   1850 #>   chronic obstructive pulmonary disease             0      0           0      0      0 #>   chronic rhinitis                                  0      0           0      0      0 #>   clear cell renal carcinoma                        0   6548           0      0      0 #>   COVID-19                                          0 819428           0      0      0 #>   Crohn disease                                     0      0           0      0      0 #>   cystic fibrosis                                   0      0           0      0      0 #>   Down syndrome                                     0      0         181      0      0 #>   follicular lymphoma                               0      0           0      0      0 #>   influenza                                         0   8871           0      0      0 #>   interstitial lung disease                         0      0           0      0      0 #>   kidney benign neoplasm                            0      0           0      0      0 #>   kidney oncocytoma                                 0      0           0      0      0 #>   lung adenocarcinoma                             205      0           0   3274      0 #>   lung large cell carcinoma                         0      0           0      0      0 #>   lymphangioleiomyomatosis                          0      0           0      0      0 #>                                        tissue_general #> disease                                  colon kidney  liver   lung lymph node   nose #>   breast cancer                              0      0      0      0          0      0 #>   chronic obstructive pulmonary disease      0      0      0   9382          0      0 #>   chronic rhinitis                           0      0      0      0          0    909 #>   clear cell renal carcinoma                 0  20540      0      0         36      0 #>   COVID-19                                   0      0      0  30578          0     13 #>   Crohn disease                          17490      0      0      0          0      0 #>   cystic fibrosis                            0      0      0      7          0      0 #>   Down syndrome                              0      0      0      0          0      0 #>   follicular lymphoma                        0      0      0      0       1089      0 #>   influenza                                  0      0      0      0          0      0 #>   interstitial lung disease                  0      0      0   1803          0      0 #>   kidney benign neoplasm                     0     10      0      0          0      0 #>   kidney oncocytoma                          0   2303      0      0          0      0 #>   lung adenocarcinoma                        0      0    507 215013      24969      0 #>   lung large cell carcinoma                  0      0      0   5922          0      0 #>   lymphangioleiomyomatosis                   0      0      0    513          0      0 #>                                        tissue_general #> disease                                 pleural fluid respiratory system saliva #>   breast cancer                                     0                  0      0 #>   chronic obstructive pulmonary disease             0                  0      0 #>   chronic rhinitis                                  0                  0      0 #>   clear cell renal carcinoma                        0                  0      0 #>   COVID-19                                          0                  4     41 #>   Crohn disease                                     0                  0      0 #>   cystic fibrosis                                   0                  0      0 #>   Down syndrome                                     0                  0      0 #>   follicular lymphoma                               0                  0      0 #>   influenza                                         0                  0      0 #>   interstitial lung disease                         0                  0      0 #>   kidney benign neoplasm                            0                  0      0 #>   kidney oncocytoma                                 0                  0      0 #>   lung adenocarcinoma                           11558                  0      0 #>   lung large cell carcinoma                         0                  0      0 #>   lymphangioleiomyomatosis                          0                  0      0 #>                                        tissue_general #> disease                                 small intestine vasculature #>   breast cancer                                       0           0 #>   chronic obstructive pulmonary disease               0           0 #>   chronic rhinitis                                    0           0 #>   clear cell renal carcinoma                          0           0 #>   COVID-19                                            0           0 #>   Crohn disease                                   52029           0 #>   cystic fibrosis                                     0           0 #>   Down syndrome                                       0           0 #>   follicular lymphoma                                 0           0 #>   influenza                                           0           0 #>   interstitial lung disease                           0           0 #>   kidney benign neoplasm                              0           0 #>   kidney oncocytoma                                   0           0 #>   lung adenocarcinoma                                 0           0 #>   lung large cell carcinoma                           0           0 #>   lymphangioleiomyomatosis                            0           0 #>  [ reached getOption(\"max.print\") -- omitted 8 rows ]"},{"path":"/articles/comp_bio_data_integration.html","id":"finding-and-fetching-data-from-mouse-liver-10x-genomics-and-smart-seq2","dir":"Articles","previous_headings":"","what":"Finding and fetching data from mouse liver (10X Genomics and Smart-Seq2)","title":"Integrating multi-dataset slices of data with Seurat","text":"Let’s load packages needed notebook. Now can open Census. notebook use Tabula Muris Senis data liver contains cells 10X Genomics Smart-Seq2 technologies. Let’s query datasets table Census filtering collection_name “Tabula Muris Senis” dataset_title “liver”. Now can use values dataset_id query load Seurat object cells datasets. can check cell counts 10X Genomics Smart-Seq2 data looking assay metadata.","code":"library(\"cellxgene.census\") library(\"Seurat\") census <- open_soma() census_datasets <- census$get(\"census_info\")$get(\"datasets\") census_datasets <- census_datasets$read(value_filter = \"collection_name == 'Tabula Muris Senis'\") census_datasets <- as.data.frame(census_datasets$concat())  # Print rows with liver data census_datasets[grep(\"Liver\", census_datasets$dataset_title), ] #>    soma_joinid                        collection_id    collection_name #> 15         583 0b9d8a04-bb9d-44da-aa27-705bb65b54eb Tabula Muris Senis #> 36         605 0b9d8a04-bb9d-44da-aa27-705bb65b54eb Tabula Muris Senis #>               collection_doi                           dataset_id #> 15 10.1038/s41586-020-2496-1 4546e757-34d0-4d17-be06-538318925fcd #> 36 10.1038/s41586-020-2496-1 6202a243-b713-4e12-9ced-c387f8483dea #>                      dataset_version_id #> 15 0a851e26-a629-4e59-9b52-9b4d1ce4440b #> 36 70f4f091-86a9-44e3-a92a-54cee98cc223 #>                                                                                        dataset_title #> 15 Liver - A single-cell transcriptomic atlas characterizes ageing tissues in the mouse - Smart-seq2 #> 36        Liver - A single-cell transcriptomic atlas characterizes ageing tissues in the mouse - 10x #>                            dataset_h5ad_path dataset_total_cell_count #> 15 4546e757-34d0-4d17-be06-538318925fcd.h5ad                     2859 #> 36 6202a243-b713-4e12-9ced-c387f8483dea.h5ad                     7294 tabula_muris_liver_ids <- c(\"4546e757-34d0-4d17-be06-538318925fcd\", \"6202a243-b713-4e12-9ced-c387f8483dea\")  seurat_obj <- get_seurat(   census,   organism = \"Mus musculus\",   obs_value_filter = \"dataset_id %in% tabula_muris_liver_ids\" ) table(seurat_obj$assay) #>  #>  10x 3' v2 Smart-seq2  #>       7294       2859"},{"path":"/articles/comp_bio_data_integration.html","id":"gene-length-normalization-of-smart-seq2-data-","dir":"Articles","previous_headings":"","what":"Gene-length normalization of Smart-Seq2 data.","title":"Integrating multi-dataset slices of data with Seurat","text":"Smart-seq2 read counts normalized gene length. Lets first get gene lengths var.feature_length. Now can use normalize Smart-seq data. let’s split object assay. normalize Smart-seq slice using gene lengths merge back single object.","code":"smart_seq_gene_lengths <- seurat_obj$RNA[[]]$feature_length seurat_obj.list <- SplitObject(seurat_obj, split.by = \"assay\") seurat_obj.list[[\"Smart-seq2\"]][[\"RNA\"]]@counts <- seurat_obj.list[[\"Smart-seq2\"]][[\"RNA\"]]@counts / smart_seq_gene_lengths seurat_obj <- merge(seurat_obj.list[[1]], seurat_obj.list[[2]])"},{"path":"/articles/comp_bio_data_integration.html","id":"integration-with-seurat","dir":"Articles","previous_headings":"","what":"Integration with Seurat","title":"Integrating multi-dataset slices of data with Seurat","text":"use native integration capabilities Seurat. comprehensive usage best practices Seurat intergation please refer doc site Seurat.","code":""},{"path":"/articles/comp_bio_data_integration.html","id":"inspecting-data-prior-to-integration","dir":"Articles","previous_headings":"Integration with Seurat","what":"Inspecting data prior to integration","title":"Integrating multi-dataset slices of data with Seurat","text":"Let’s take look strength batch effects data. perform embedding visualization via UMAP. Let’s basic data normalization variable gene selection now perform PCA UMAP   can see batch effects strong cells cluster primarily assay cell_type. Properly integrated embedding principle cluster primarily cell_type, assay best randomly distributed.","code":"seurat_obj <- SCTransform(seurat_obj) seurat_obj <- FindVariableFeatures(seurat_obj, selection.method = \"vst\", nfeatures = 2000) seurat_obj <- RunPCA(seurat_obj, features = VariableFeatures(object = seurat_obj)) seurat_obj <- RunUMAP(seurat_obj, dims = 1:30) # By assay p1 <- DimPlot(seurat_obj, reduction = \"umap\", group.by = \"assay\") p1 # By cell type p2 <- DimPlot(seurat_obj, reduction = \"umap\", group.by = \"cell_type\") p2"},{"path":"/articles/comp_bio_data_integration.html","id":"data-integration-with-seurat","dir":"Articles","previous_headings":"Integration with Seurat","what":"Data integration with Seurat","title":"Integrating multi-dataset slices of data with Seurat","text":"Whenever query fetch Census data multiple datasets integration needs performed evidenced batch effects observed. paramaters Seurat used notebook selected model run quickly. best practices integration single-cell data using Seurat please refer documentation page. seurat_d reading article integrated cell atlas human lung health disease Sikkema et al. perfomed integration 43 datasets Lung. focus metadata Census can batch information integration.","code":""},{"path":"/articles/comp_bio_data_integration.html","id":"integration-across-datasets-using-dataset_id","dir":"Articles","previous_headings":"Integration with Seurat > Data integration with Seurat","what":"Integration across datasets using dataset_id","title":"Integrating multi-dataset slices of data with Seurat","text":"cells Census annotated dataset come \"dataset_id\". great place start integration. let’s run Seurat integration pipeline. First define model batch set dataset_id. Firs normalize select variable genes seperated batch key dataset_id Now perform integration. Let’s inspect results normalization UMAP visulization. plot UMAP.   Great! can see clustering longer mainly driven assay, albeit still contributing . Great! can see clustering longer mainly driven assay, albeit still contributing .","code":"# split the dataset into a list of two seurat objects for each dataset seurat_obj.list <- SplitObject(seurat_obj, split.by = \"dataset_id\")  # normalize each dataset independently seurat_obj.list <- lapply(X = seurat_obj.list, FUN = function(x) {   x <- SCTransform(x) })  # select features for integration features <- SelectIntegrationFeatures(object.list = seurat_obj.list) seurat_obj.list <- PrepSCTIntegration(seurat_obj.list, anchor.features = features) seurat_obj.anchors <- FindIntegrationAnchors(object.list = seurat_obj.list, anchor.features = features, normalization.method = \"SCT\") seurat_obj.combined <- IntegrateData(anchorset = seurat_obj.anchors, normalization.method = \"SCT\") DefaultAssay(seurat_obj.combined) <- \"integrated\"  # Run the standard workflow for visualization and clustering seurat_obj.combined <- ScaleData(seurat_obj.combined, verbose = FALSE) seurat_obj.combined <- RunPCA(seurat_obj.combined, npcs = 30, verbose = FALSE) seurat_obj.combined <- RunUMAP(seurat_obj.combined, reduction = \"pca\", dims = 1:30) # By assay p1 <- DimPlot(seurat_obj.combined, reduction = \"umap\", group.by = \"assay\") p1 # By cell type p2 <- DimPlot(seurat_obj.combined, reduction = \"umap\", group.by = \"cell_type\") p2"},{"path":"/articles/comp_bio_data_integration.html","id":"integration-across-datasets-using-dataset_id-and-controlling-for-batch-using-donor_id","dir":"Articles","previous_headings":"Integration with Seurat > Data integration with Seurat","what":"Integration across datasets using dataset_id and controlling for batch using donor_id","title":"Integrating multi-dataset slices of data with Seurat","text":"Similar dataset_id, cells Census annotated donor_id. definition donor_id depends dataset left discretion data curators. However still rich information can used batch variable integration. donor_id guaranteed unique across cells Census, strongly recommend concatenating dataset_id donor_id use batch separator Seurat Now perform integration. inspect new results UMAP. Plot UMAP.   can see using dataset_id donor_id batch cells now mostly cluster cell type.","code":"# split the dataset into a list of two seurat objects for each dataset seurat_obj.list <- SplitObject(seurat_obj, split.by = \"dataset_id\")  # normalize each dataset independently controlling for batch seurat_obj.list <- lapply(X = seurat_obj.list, FUN = function(x) {   x <- SCTransform(x, vars.to.regress = \"donor_id\") })  # select features for integration features <- SelectIntegrationFeatures(object.list = seurat_obj.list) seurat_obj.list <- PrepSCTIntegration(seurat_obj.list, anchor.features = features) seurat_obj.anchors <- FindIntegrationAnchors(object.list = seurat_obj.list, anchor.features = features, normalization.method = \"SCT\") #> Finding all pairwise anchors #> Running CCA #> Merging objects #> Finding neighborhoods #> Finding anchors #>  Found 7161 anchors #> Filtering anchors #>  Retained 4990 anchors seurat_obj.combined <- IntegrateData(anchorset = seurat_obj.anchors, normalization.method = \"SCT\") #> [1] 1 #> Warning: Different cells and/or features from existing assay SCT #> [1] 2 #> Warning: Different cells and/or features from existing assay SCT #> Merging dataset 1 into 2 #> Extracting anchors for merged samples #> Finding integration vectors #> Finding integration vector weights #> Integrating data #> Warning: Assay integrated changing from Assay to SCTAssay  #> Warning: Different cells and/or features from existing assay SCT DefaultAssay(seurat_obj.combined) <- \"integrated\"  # Run the standard workflow for visualization and clustering seurat_obj.combined <- RunPCA(seurat_obj.combined, npcs = 30, verbose = FALSE) seurat_obj.combined <- RunUMAP(seurat_obj.combined, reduction = \"pca\", dims = 1:30) #> 14:49:10 UMAP embedding parameters a = 0.9922 b = 1.112 #> 14:49:10 Read 10153 rows and found 30 numeric columns #> 14:49:10 Using Annoy for neighbor search, n_neighbors = 30 #> 14:49:10 Building Annoy index with metric = cosine, n_trees = 50 #> 0%   10   20   30   40   50   60   70   80   90   100% #> [----|----|----|----|----|----|----|----|----|----| #> **************************************************| #> 14:49:12 Writing NN index file to temp file /tmp/RtmpRa88jI/file926122f23120 #> 14:49:12 Searching Annoy index using 1 thread, search_k = 3000 #> 14:49:16 Annoy recall = 100% #> 14:49:16 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 30 #> 14:49:17 Initializing from normalized Laplacian + noise (using RSpectra) #> 14:49:17 Commencing optimization for 200 epochs, with 409958 positive edges #> 14:49:21 Optimization finished # By assay p1 <- DimPlot(seurat_obj.combined, reduction = \"umap\", group.by = \"assay\") p1 # By cell type p2 <- DimPlot(seurat_obj.combined, reduction = \"umap\", group.by = \"cell_type\") p2"},{"path":"/articles/comp_bio_data_integration.html","id":"integration-across-datasets-using-dataset_id-and-controlling-for-batch-using-donor_id-assay_ontology_term_id-suspension_type-","dir":"Articles","previous_headings":"Integration with Seurat > Data integration with Seurat","what":"Integration across datasets using dataset_id and controlling for batch using donor_id + assay_ontology_term_id + suspension_type.","title":"Integrating multi-dataset slices of data with Seurat","text":"cases one dataset may contain multiple assay types /multiple suspension types (cell vs nucleus), important consider metadata batches. Therefore, comprehensive definition batch Census can accomplished combining cell metadata dataset_id, donor_id, assay_ontology_term_id suspension_type, latter encode EFO ids assay types. example, two datasets used contain cells one assay , one suspension type . Thus make difference include metadata part batch. implementation look line","code":"# EXAMPLE, DON'T RUN.  # split the dataset into a list of seurat objects for each dataset seurat_obj.list <- SplitObject(seurat_obj, split.by = \"dataset_id\")  # normalize each dataset independently controlling for batch seurat_obj.list <- lapply(X = seurat_obj.list, FUN = function(x) {   x <- SCTransform(x, vars.to.regress = c(\"donor_id\", \"assay_ontology_term_id\", \"suspension_type\")) })  # select features for integration features <- SelectIntegrationFeatures(object.list = seurat_obj.list)  # integrate seurat_obj.list <- PrepSCTIntegration(seurat_obj.list, anchor.features = features) seurat_obj.anchors <- FindIntegrationAnchors(object.list = seurat_obj.list, anchor.features = features, normalization.method = \"SCT\") seurat_obj.combined <- IntegrateData(anchorset = seurat_obj.anchors, normalization.method = \"SCT\")"},{"path":"/articles/comp_bio_normalizing_full_gene_sequencing.html","id":"opening-the-census","dir":"Articles","previous_headings":"","what":"Opening the census","title":"Normalizing full-length gene sequencing data","text":"First open Census: can learn cellxgene.census methods accessing corresponding documentation, example ?cellxgene.census::open_soma.","code":"library(\"Seurat\") census <- cellxgene.census::open_soma()"},{"path":"/articles/comp_bio_normalizing_full_gene_sequencing.html","id":"fetching-full-length-example-sequencing-data-smart-seq","dir":"Articles","previous_headings":"","what":"Fetching full-length example sequencing data (Smart-Seq)","title":"Normalizing full-length gene sequencing data","text":"Let’s get example data, case ’ll fetch cells relatively small dataset derived Smart-Seq2 technology performs full-length gene sequencing: Collection: Tabula Muris Senis Dataset: Liver - single-cell transcriptomic atlas characterizes ageing tissues mouse - Smart-seq2 Let’s first find dataset’s id using dataset table Census. Now can use id fetch data. Let’s make sure data contains Smart-Seq2 cells. Great! can see small dataset containing 2,859 cells. Now let’s proceed normalize gene lengths.","code":"liver_dataset <- as.data.frame(   census$get(\"census_info\")$get(\"datasets\")         $read(value_filter=\"dataset_title == 'Liver - A single-cell transcriptomic atlas characterizes ageing tissues in the mouse - Smart-seq2'\")         $concat() ) liver_dataset #>   soma_joinid                        collection_id    collection_name #> 1         583 0b9d8a04-bb9d-44da-aa27-705bb65b54eb Tabula Muris Senis #>              collection_doi                           dataset_id #> 1 10.1038/s41586-020-2496-1 4546e757-34d0-4d17-be06-538318925fcd #>                     dataset_version_id #> 1 0a851e26-a629-4e59-9b52-9b4d1ce4440b #>                                                                                       dataset_title #> 1 Liver - A single-cell transcriptomic atlas characterizes ageing tissues in the mouse - Smart-seq2 #>                           dataset_h5ad_path dataset_total_cell_count #> 1 4546e757-34d0-4d17-be06-538318925fcd.h5ad                     2859 liver_dataset_id <- liver_dataset[1,\"dataset_id\"] liver_seurat <- cellxgene.census::get_seurat(   census,   organism = \"Mus musculus\",   obs_value_filter = paste0(\"dataset_id == '\", liver_dataset_id, \"'\") ) table(liver_seurat$assay) #>  #> Smart-seq2  #>       2859"},{"path":"/articles/comp_bio_normalizing_full_gene_sequencing.html","id":"normalizing-expression-to-account-for-gene-length","dir":"Articles","previous_headings":"","what":"Normalizing expression to account for gene length","title":"Normalizing full-length gene sequencing data","text":"default cellxgene_census::get_seurat() fetches genes Census. let’s first identify genes measured dataset subset Seurat obect include . goal can use “Dataset Presence Matrix” census$get(\"census_data\")$get(\"mus_musculus\")$ms$get(\"RNA\")$get(\"feature_dataset_presence_matrix\"). boolean matrix N x M N number datasets, M number genes Census, 1 entry indicates gene measured dataset. (Note Seurat objects transposed layout M x N.) Let’s get genes measured dataset. can see genes Census 17,992 measured dataset. Now let’s normalize genes gene length. can easily Census gene lengths included gene metadata feature_length. done! can now see real numbers instead integers.","code":"liver_seurat #> An object of class Seurat  #> 52417 features across 2859 samples within 1 assay  #> Active assay: RNA (52417 features, 0 variable features) #>  2 layers present: counts, data liver_dataset_joinid <- liver_dataset$soma_joinid[1] presence_matrix <- cellxgene.census::get_presence_matrix(census, \"Mus musculus\", \"RNA\") presence_matrix <- presence_matrix$take(liver_dataset_joinid) gene_presence <- as.vector(presence_matrix$get_one_based_matrix())  liver_seurat <- liver_seurat[gene_presence, ] liver_seurat #> An object of class Seurat  #> 17992 features across 2859 samples within 1 assay  #> Active assay: RNA (17992 features, 0 variable features) #>  2 layers present: counts, data GetAssayData(liver_seurat[1:5, 1:5], slot = \"data\") #> Warning: The `slot` argument of `GetAssayData()` is deprecated as of SeuratObject 5.0.0. #> ℹ Please use the `layer` argument instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated. #> 5 x 5 sparse Matrix of class \"dgCMatrix\" #>                    cell3959639 cell3959640 cell3959641 cell3959642 cell3959643 #> ENSMUSG00000025900           .           .           .           .           . #> ENSMUSG00000025902           .           .           .           .        2250 #> ENSMUSG00000033845           .         559        1969           .           . #> ENSMUSG00000025903           .           .           .           .           . #> ENSMUSG00000033813           .           .         828           1          54 gene_lengths <- liver_seurat$RNA@meta.features$feature_length liver_seurat <- SetAssayData(   liver_seurat,    new.data = sweep(GetAssayData(liver_seurat, slot = \"data\"), 1, gene_lengths, \"/\") ) GetAssayData(liver_seurat[1:5, 1:5], slot = \"data\") #> 5 x 5 sparse Matrix of class \"dgCMatrix\" #>                    cell3959639 cell3959640 cell3959641  cell3959642 cell3959643 #> ENSMUSG00000025900           .  .            .         .             .          #> ENSMUSG00000025902           .  .            .         .             0.47150042 #> ENSMUSG00000033845           .  0.06586544   0.2320019 .             .          #> ENSMUSG00000025903           .  .            .         .             .          #> ENSMUSG00000033813           .  .            0.2744448 0.0003314551  0.01789857"},{"path":"/articles/comp_bio_normalizing_full_gene_sequencing.html","id":"validation-through-clustering-exploration","dir":"Articles","previous_headings":"","what":"Validation through clustering exploration","title":"Normalizing full-length gene sequencing data","text":"Let’s perform basic clustering analysis see cell types cluster expected using normalized counts. First basic filtering cells genes. normalize account sequencing depth transform data log scale. subset highly variable genes. finally scale values across gene axis. Now can proceed clustering analysis.  exceptions can see cells cell type cluster near serves sanity check gene-length normalization applied. Don’t forget close census.","code":"cells_per_gene <- rowSums(GetAssayData(liver_seurat, slot = \"counts\") > 0) genes_per_cell <- Matrix::colSums(liver_seurat$RNA@counts > 0) liver_seurat <- liver_seurat[cells_per_gene >= 5, genes_per_cell >= 500] liver_seurat <- Seurat::NormalizeData(   liver_seurat,   normalization.method = \"LogNormalize\",   scale.factor = 10000 ) liver_seurat <- Seurat::FindVariableFeatures(   liver_seurat,   selection.method = \"vst\",   nfeatures = 1000 ) all.genes <- rownames(liver_seurat) liver_seurat <- Seurat::ScaleData(liver_seurat, features = all.genes) liver_seurat <- RunPCA(   liver_seurat,   features = VariableFeatures(object = liver_seurat) ) liver_seurat <- FindNeighbors(liver_seurat, dims = 1:40) liver_seurat <- RunUMAP(liver_seurat, dims = 1:40) DimPlot(liver_seurat, reduction = \"umap\", group.by = \"cell_type\") census$close()"},{"path":"/articles/comp_bio_summarize_axis_query.html","id":"opening-the-census","dir":"Articles","previous_headings":"","what":"Opening the Census","title":"Summarizing cell and gene metadata","text":"cellxgene.census R package contains convenient API open version Census (default, newest stable version). open Census, close census$close(). can automated using .exit(census$close(), add = TRUE) immediately census <- open_soma(). can learn cellxgene.census methods accessing corresponding documentation. example ?cellxgene.census::open_soma.","code":"library(\"cellxgene.census\") census <- open_soma()"},{"path":"/articles/comp_bio_summarize_axis_query.html","id":"summarizing-cell-metadata","dir":"Articles","previous_headings":"","what":"Summarizing cell metadata","title":"Summarizing cell and gene metadata","text":"Census open can use TileDB-SOMA methods SOMACollection. can thus access metadata SOMADataFrame objects encoding cell gene metadata. Tips: can read entire SOMADataFrame R using .data.frame(soma_df$read()$concat()). Queries much faster request DataFrame columns required analysis (e.g. column_names = c(\"soma_joinid\", \"cell_type_ontology_term_id\")). can also refine query results using value_filter, filter census matching records.","code":""},{"path":"/articles/comp_bio_summarize_axis_query.html","id":"example-summarize-all-cell-types","dir":"Articles","previous_headings":"Summarizing cell metadata","what":"Example: Summarize all cell types","title":"Summarizing cell and gene metadata","text":"example reads cell metadata (obs) R data frame summarize variety ways.","code":"human <- census$get(\"census_data\")$get(\"homo_sapiens\")  # Read obs into an R data frame (tibble). obs_df <- human$obs$read(column_names = c(\"cell_type\")) obs_df <- as.data.frame(obs_df$concat())  # Find all unique values in the cell_type column. unique_cell_type <- unique(obs_df$cell_type)  cat(   \"There are\",   length(unique_cell_type),   \"cell types in the Census! The first few are: \",   paste(head(unique_cell_type), collapse = \", \") ) #> There are 631 cell types in the Census! The first few are:  oligodendrocyte, oligodendrocyte precursor cell, astrocyte of the cerebral cortex, microglial cell, cerebral cortex endothelial cell, vascular leptomeningeal cell"},{"path":"/articles/comp_bio_summarize_axis_query.html","id":"example-summarize-a-subset-of-cell-types-selected-with-a-value_filter","dir":"Articles","previous_headings":"Summarizing cell metadata","what":"Example: Summarize a subset of cell types, selected with a value_filter","title":"Summarizing cell and gene metadata","text":"example utilizes SOMA “value filter” read subset cells tissue_ontology_term_id equal UBERON:0002048 (lung tissue), summarizes query result. can also define much complex value filters. example: combine terms & | use %% operator query multiple values","code":"# Read cell_type terms for cells which have a specific tissue term LUNG_TISSUE <- \"UBERON:0002048\"  obs_df <- human$obs$read(column_names = c(\"cell_type\"), value_filter = paste0(\"tissue_ontology_term_id == '\", LUNG_TISSUE, \"'\")) obs_df <- as.data.frame(obs_df$concat())  # Find all unique values in the cell_type column as an R data frame. unique_cell_type <- unique(obs_df$cell_type) cat(   \"There are \",   length(unique_cell_type),   \" cell types in the Census where tissue_ontology_term_id == \",   LUNG_TISSUE,   \"!\\nThe first few are:\",   paste(head(unique_cell_type), collapse = \", \"),   \"\\n\" ) #> There are  185  cell types in the Census where tissue_ontology_term_id ==  UBERON:0002048 ! #> The first few are: type II pneumocyte, neutrophil, effector CD4-positive, alpha-beta T cell, effector CD8-positive, alpha-beta T cell, mature NK T cell, blood vessel endothelial cell  # Report the 10 most common top_10 <- sort(table(obs_df$cell_type), decreasing = TRUE)[1:10] cat(   \"The top 10 cell types where tissue_ontology_term_id ==\",    LUNG_TISSUE,   \"are: \",   paste(names(top_10), collapse = \", \") ) #> The top 10 cell types where tissue_ontology_term_id == UBERON:0002048 are:  native cell, alveolar macrophage, CD8-positive, alpha-beta T cell, CD4-positive, alpha-beta T cell, macrophage, type II pneumocyte, classical monocyte, natural killer cell, malignant cell, epithelial cell of lower respiratory tract # You can also do more complex queries, such as testing for inclusion in a list of values obs_df <- human$obs$read(   column_names = c(\"cell_type_ontology_term_id\"),   value_filter = \"tissue_ontology_term_id %in% c('UBERON:0002082', 'UBERON:OOO2084', 'UBERON:0002080')\" )  obs_df <- as.data.frame(obs_df$concat())  # Summarize top_10 <- sort(table(obs_df$cell_type_ontology_term_id), decreasing = TRUE)[1:10] print(top_10) #>  #> CL:0000746 CL:0008034 CL:0002131 CL:0002548 CL:0000115 CL:0000763 CL:0000057 CL:0000669  #>     160974      99458      96953      79733      79626      35560      33075      27515  #> CL:0000003 CL:0002144  #>      23613      18593"},{"path":"/articles/comp_bio_summarize_axis_query.html","id":"full-census-metadata-stats","dir":"Articles","previous_headings":"","what":"Full Census metadata stats","title":"Summarizing cell and gene metadata","text":"example queries organisms Census, summarizes diversity various metadata labels.","code":"cols_to_query <- c(   \"cell_type_ontology_term_id\",   \"assay_ontology_term_id\",   \"tissue_ontology_term_id\" )  total_cells <- 0 for (organism in census$get(\"census_data\")$names()) {   print(organism)      obs_df <- census$get(\"census_data\")$get(organism)$obs$read(column_names = cols_to_query)   obs_df <- as.data.frame(obs_df$concat())      total_cells <- total_cells + nrow(obs_df)   for (col in cols_to_query) {     cat(\"  Unique \", col, \" values: \", length(unique(obs_df[[col]])), \"\\n\")   } } #> [1] \"homo_sapiens\" #>   Unique  cell_type_ontology_term_id  values:  631  #>   Unique  assay_ontology_term_id  values:  20  #>   Unique  tissue_ontology_term_id  values:  230  #> [1] \"mus_musculus\" #>   Unique  cell_type_ontology_term_id  values:  248  #>   Unique  assay_ontology_term_id  values:  10  #>   Unique  tissue_ontology_term_id  values:  74 cat(\"Complete Census contains \", total_cells, \" cells.\") #> Complete Census contains  68683222  cells."},{"path":"/articles/comp_bio_summarize_axis_query.html","id":"close-the-census","dir":"Articles","previous_headings":"Full Census metadata stats","what":"Close the census","title":"Summarizing cell and gene metadata","text":"use, census object closed release memory resources. also closes SOMA objects accessed via top-level census. Closing can automated using .exit(census$close(), add = TRUE) immediately census <- open_soma().","code":"census$close()"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Chan Zuckerberg Initiative Foundation. Author, maintainer, copyright holder, funder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chan Zuckerberg Initiative Foundation (2024). cellxgene.census: CZ CELLxGENE Discover Cell Census. R package version 1.9.1, https://github.com/chanzuckerberg/cellxgene-census.","code":"@Manual{,   title = {cellxgene.census: CZ CELLxGENE Discover Cell Census},   author = {{Chan Zuckerberg Initiative Foundation}},   year = {2024},   note = {R package version 1.9.1},   url = {https://github.com/chanzuckerberg/cellxgene-census}, }"},{"path":"/index.html","id":"r-package-of-cz-cellxgene-discover-census","dir":"","previous_headings":"","what":"CZ CELLxGENE Discover Cell Census","title":"CZ CELLxGENE Discover Cell Census","text":"documentation R package cellxgene.census part CZ CELLxGENE Discover Census. full details Census data capabilities please go main Census site. cellxgene.census provides API efficiently access cloud-hosted Census single-cell data R. just seconds users can access slice Census data using cell gene filters across hundreds single-cell datasets. Census data can fetched iterative fashion bigger--memory slices data, quickly exported basic R structures, well Seurat SingleCellExperiment objects downstream analysis.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"CZ CELLxGENE Discover Cell Census","text":"installing Ubuntu, may need install following libraries via apt install, libxml2-dev libssl-dev libcurl4-openssl-dev. addition must cmake v3.21 greater. installing MacOS, need install developer tools Xcode. Windows supported. R session install cellxgene.census R-Universe. able export Census data Seurat SingleCellExperiment also need install respective packages.","code":"install.packages(   \"cellxgene.census\",   repos=c('https://chanzuckerberg.r-universe.dev', 'https://cloud.r-project.org') ) # Seurat install.packages(\"Seurat\")  # SingleCellExperiment if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"SingleCellExperiment\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"CZ CELLxGENE Discover Cell Census","text":"Check vignettes “Articles” section navigation bar site. highly recommend following vignettes starting point: Querying fetching single-cell data cell/gene metadata Learning CZ CELLxGENE Discover Census can also check quick start guide main Census site.","code":""},{"path":"/index.html","id":"example-seurat-and-singlecellexperiment-query","dir":"","previous_headings":"Usage","what":"Example Seurat and SingleCellExperiment query","title":"CZ CELLxGENE Discover Cell Census","text":"following creates Seurat object -demand sympathetic neurons Census filtering genes ENSG00000161798, ENSG00000188229. following retrieves data SingleCellExperiment object.","code":"library(\"cellxgene.census\") library(\"Seurat\")  census <- open_soma()  organism <- \"Homo sapiens\" gene_filter <- \"feature_id %in% c('ENSG00000107317', 'ENSG00000106034')\" cell_filter <-  \"cell_type == 'sympathetic neuron'\" cell_columns <- c(\"assay\", \"cell_type\", \"tissue\", \"tissue_general\", \"suspension_type\", \"disease\")  seurat_obj <- get_seurat(    census = census,    organism = organism,    var_value_filter = gene_filter,    obs_value_filter = cell_filter,    obs_column_names = cell_columns ) library(\"SingleCellExperiment\")  sce_obj <- get_single_cell_experiment(    census = census,    organism = organism,    var_value_filter = gene_filter,    obs_value_filter = cell_filter,    obs_column_names = cell_columns )"},{"path":"/index.html","id":"for-more-help","dir":"","previous_headings":"","what":"For More Help","title":"CZ CELLxGENE Discover Cell Census","text":"help, please go visit main Census site. believe found security issue, appreciate notification. Please send email security@chanzuckerberg.com.","code":""},{"path":"/reference/download_source_h5ad.html","id":null,"dir":"Reference","previous_headings":"","what":"Download source H5AD to local file name. — download_source_h5ad","title":"Download source H5AD to local file name. — download_source_h5ad","text":"Download source H5AD local file name.","code":""},{"path":"/reference/download_source_h5ad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download source H5AD to local file name. — download_source_h5ad","text":"","code":"download_source_h5ad(   dataset_id,   file,   overwrite = FALSE,   census_version = \"stable\",   census = NULL )"},{"path":"/reference/download_source_h5ad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download source H5AD to local file name. — download_source_h5ad","text":"dataset_id dataset_id interest. file Local file name store H5AD file. overwrite TRUE allow overwriting existing file. census_version desired Census version. census open Census handle census_version. provided, opened closed automatically; efficient reuse handle calling download_source_h5ad() multiple times.","code":""},{"path":"/reference/download_source_h5ad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download source H5AD to local file name. — download_source_h5ad","text":"","code":"download_source_h5ad(\"0895c838-e550-48a3-a777-dbcd35d30272\", \"/tmp/data.h5ad\", overwrite = TRUE)"},{"path":"/reference/get_census_version_description.html","id":null,"dir":"Reference","previous_headings":"","what":"Get release description for a Census version — get_census_version_description","title":"Get release description for a Census version — get_census_version_description","text":"Get release description Census version","code":""},{"path":"/reference/get_census_version_description.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get release description for a Census version — get_census_version_description","text":"","code":"get_census_version_description(census_version)"},{"path":"/reference/get_census_version_description.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get release description for a Census version — get_census_version_description","text":"census_version census version name.","code":""},{"path":"/reference/get_census_version_description.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get release description for a Census version — get_census_version_description","text":"List release location metadata","code":""},{"path":"/reference/get_census_version_description.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get release description for a Census version — get_census_version_description","text":"","code":"as.data.frame(get_census_version_description(\"stable\")) #>   release_date release_build #> 1                 2023-12-15 #>                                                              soma.uri #> 1 s3://cellxgene-census-public-us-west-2/cell-census/2023-12-15/soma/ #>               soma.relative_uri soma.s3_region #> 1 /cell-census/2023-12-15/soma/      us-west-2 #>                                                              h5ads.uri #> 1 s3://cellxgene-census-public-us-west-2/cell-census/2023-12-15/h5ads/ #>               h5ads.relative_uri h5ads.s3_region do_not_delete  lts  alias #> 1 /cell-census/2023-12-15/h5ads/       us-west-2          TRUE TRUE stable #>   census_version #> 1         stable"},{"path":"/reference/get_census_version_directory.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the directory of Census releases currently available — get_census_version_directory","title":"Get the directory of Census releases currently available — get_census_version_directory","text":"Get directory Census releases currently available","code":""},{"path":"/reference/get_census_version_directory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the directory of Census releases currently available — get_census_version_directory","text":"","code":"get_census_version_directory()"},{"path":"/reference/get_census_version_directory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the directory of Census releases currently available — get_census_version_directory","text":"Data frame available cell census releases, including location metadata.","code":""},{"path":"/reference/get_census_version_directory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the directory of Census releases currently available — get_census_version_directory","text":"","code":"get_census_version_directory() #>            release_date release_build #> stable                     2023-12-15 #> latest                     2024-01-01 #> 2023-05-15                 2023-05-15 #> 2023-07-25                 2023-07-25 #> 2023-10-23                 2023-10-23 #> 2023-12-11                 2023-12-11 #> 2023-12-15                 2023-12-15 #> 2023-12-18                 2023-12-18 #> 2023-12-21                 2023-12-21 #> 2023-12-25                 2023-12-25 #> 2024-01-01                 2024-01-01 #>                                                                       soma.uri #> stable     s3://cellxgene-census-public-us-west-2/cell-census/2023-12-15/soma/ #> latest     s3://cellxgene-census-public-us-west-2/cell-census/2024-01-01/soma/ #> 2023-05-15 s3://cellxgene-census-public-us-west-2/cell-census/2023-05-15/soma/ #> 2023-07-25 s3://cellxgene-census-public-us-west-2/cell-census/2023-07-25/soma/ #> 2023-10-23 s3://cellxgene-census-public-us-west-2/cell-census/2023-10-23/soma/ #> 2023-12-11 s3://cellxgene-census-public-us-west-2/cell-census/2023-12-11/soma/ #> 2023-12-15 s3://cellxgene-census-public-us-west-2/cell-census/2023-12-15/soma/ #> 2023-12-18 s3://cellxgene-census-public-us-west-2/cell-census/2023-12-18/soma/ #> 2023-12-21 s3://cellxgene-census-public-us-west-2/cell-census/2023-12-21/soma/ #> 2023-12-25 s3://cellxgene-census-public-us-west-2/cell-census/2023-12-25/soma/ #> 2024-01-01 s3://cellxgene-census-public-us-west-2/cell-census/2024-01-01/soma/ #>                        soma.relative_uri soma.s3_region #> stable     /cell-census/2023-12-15/soma/      us-west-2 #> latest     /cell-census/2024-01-01/soma/      us-west-2 #> 2023-05-15 /cell-census/2023-05-15/soma/      us-west-2 #> 2023-07-25 /cell-census/2023-07-25/soma/      us-west-2 #> 2023-10-23 /cell-census/2023-10-23/soma/      us-west-2 #> 2023-12-11 /cell-census/2023-12-11/soma/      us-west-2 #> 2023-12-15 /cell-census/2023-12-15/soma/      us-west-2 #> 2023-12-18 /cell-census/2023-12-18/soma/      us-west-2 #> 2023-12-21 /cell-census/2023-12-21/soma/      us-west-2 #> 2023-12-25 /cell-census/2023-12-25/soma/      us-west-2 #> 2024-01-01 /cell-census/2024-01-01/soma/      us-west-2 #>                                                                       h5ads.uri #> stable     s3://cellxgene-census-public-us-west-2/cell-census/2023-12-15/h5ads/ #> latest     s3://cellxgene-census-public-us-west-2/cell-census/2024-01-01/h5ads/ #> 2023-05-15 s3://cellxgene-census-public-us-west-2/cell-census/2023-05-15/h5ads/ #> 2023-07-25 s3://cellxgene-census-public-us-west-2/cell-census/2023-07-25/h5ads/ #> 2023-10-23 s3://cellxgene-census-public-us-west-2/cell-census/2023-10-23/h5ads/ #> 2023-12-11 s3://cellxgene-census-public-us-west-2/cell-census/2023-12-11/h5ads/ #> 2023-12-15 s3://cellxgene-census-public-us-west-2/cell-census/2023-12-15/h5ads/ #> 2023-12-18 s3://cellxgene-census-public-us-west-2/cell-census/2023-12-18/h5ads/ #> 2023-12-21 s3://cellxgene-census-public-us-west-2/cell-census/2023-12-21/h5ads/ #> 2023-12-25 s3://cellxgene-census-public-us-west-2/cell-census/2023-12-25/h5ads/ #> 2024-01-01 s3://cellxgene-census-public-us-west-2/cell-census/2024-01-01/h5ads/ #>                        h5ads.relative_uri h5ads.s3_region do_not_delete   lts #> stable     /cell-census/2023-12-15/h5ads/       us-west-2          TRUE  TRUE #> latest     /cell-census/2024-01-01/h5ads/       us-west-2         FALSE    NA #> 2023-05-15 /cell-census/2023-05-15/h5ads/       us-west-2          TRUE  TRUE #> 2023-07-25 /cell-census/2023-07-25/h5ads/       us-west-2          TRUE  TRUE #> 2023-10-23 /cell-census/2023-10-23/h5ads/       us-west-2         FALSE FALSE #> 2023-12-11 /cell-census/2023-12-11/h5ads/       us-west-2         FALSE    NA #> 2023-12-15 /cell-census/2023-12-15/h5ads/       us-west-2          TRUE  TRUE #> 2023-12-18 /cell-census/2023-12-18/h5ads/       us-west-2         FALSE    NA #> 2023-12-21 /cell-census/2023-12-21/h5ads/       us-west-2         FALSE    NA #> 2023-12-25 /cell-census/2023-12-25/h5ads/       us-west-2         FALSE    NA #> 2024-01-01 /cell-census/2024-01-01/h5ads/       us-west-2         FALSE    NA #>             alias #> stable     stable #> latest     latest #> 2023-05-15        #> 2023-07-25        #> 2023-10-23        #> 2023-12-11        #> 2023-12-15        #> 2023-12-18        #> 2023-12-21        #> 2023-12-25        #> 2024-01-01"},{"path":"/reference/get_presence_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the feature dataset presence matrix. — get_presence_matrix","title":"Read the feature dataset presence matrix. — get_presence_matrix","text":"Read feature dataset presence matrix.","code":""},{"path":"/reference/get_presence_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the feature dataset presence matrix. — get_presence_matrix","text":"","code":"get_presence_matrix(census, organism, measurement_name = \"RNA\")"},{"path":"/reference/get_presence_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the feature dataset presence matrix. — get_presence_matrix","text":"census census object cellxgene.census::open_soma(). organism organism query, usually one Homo sapiens Mus musculus measurement_name measurement object query. Defaults RNA.","code":""},{"path":"/reference/get_presence_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read the feature dataset presence matrix. — get_presence_matrix","text":"tiledbsoma::matrixZeroBasedView object dataset join id & feature join id dimensions, filled 1s indicating presence. sparse matrix accessed zero-based indexes since join id's may zero.","code":""},{"path":"/reference/get_presence_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read the feature dataset presence matrix. — get_presence_matrix","text":"","code":"census <- open_soma() #> The stable Census release is currently 2023-12-15. Specify census_version = \"2023-12-15\" in future calls to open_soma() to ensure data consistency. on.exit(census$close(), add = TRUE) print(get_presence_matrix(census, \"Homo sapiens\")$dim()) #> Error in private$check_open_for_read_or_write(): Item must be open for read or write. s3://cellxgene-census-public-us-west-2/cell-census/2023-12-15/soma/"},{"path":"/reference/get_seurat.html","id":null,"dir":"Reference","previous_headings":"","what":"Export Census slices to Seurat — get_seurat","title":"Export Census slices to Seurat — get_seurat","text":"Convenience wrapper around SOMAExperimentAxisQuery, build execute query, return Seurat object.","code":""},{"path":"/reference/get_seurat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export Census slices to Seurat — get_seurat","text":"","code":"get_seurat(   census,   organism,   measurement_name = \"RNA\",   X_layers = c(counts = \"raw\", data = NULL),   obs_value_filter = NULL,   obs_coords = NULL,   obs_column_names = NULL,   obsm_layers = FALSE,   var_value_filter = NULL,   var_coords = NULL,   var_column_names = NULL,   var_index = \"feature_id\" )"},{"path":"/reference/get_seurat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export Census slices to Seurat — get_seurat","text":"census census object, usually returned cellxgene.census::open_soma(). organism organism query, usually one Homo sapiens Mus musculus measurement_name measurement object query. Defaults RNA. X_layers named character X layers add Seurat assay, names names Seurat slots (counts data) values names layers within X. obs_value_filter SOMA value_filter across columns obs dataframe, expressed string. obs_coords set coordinates obs dataframe index, expressed type format supported SOMADataFrame's read() method. obs_column_names Columns fetch obs data frame. obsm_layers Names arrays obsm add cell embeddings; pass FALSE suppress loading dimensional reductions. var_value_filter obs_value_filter var. var_coords obs_coords var. var_column_names Columns fetch var data frame. var_index Name column ‘var’ add feature names.","code":""},{"path":"/reference/get_seurat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export Census slices to Seurat — get_seurat","text":"Seurat object containing sensus slice.","code":""},{"path":"/reference/get_seurat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export Census slices to Seurat — get_seurat","text":"","code":"if (FALSE) { census <- open_soma() seurat_obj <- get_seurat(   census,   organism = \"Homo sapiens\",   obs_value_filter = \"cell_type == 'leptomeningeal cell'\",   var_value_filter = \"feature_id %in% c('ENSG00000107317', 'ENSG00000106034')\" )  seurat_obj  census$close() }"},{"path":"/reference/get_single_cell_experiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Export Census slices to SingleCellExperiment — get_single_cell_experiment","title":"Export Census slices to SingleCellExperiment — get_single_cell_experiment","text":"Convenience wrapper around SOMAExperimentAxisQuery, build execute query, return SingleCellExperiment object.","code":""},{"path":"/reference/get_single_cell_experiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export Census slices to SingleCellExperiment — get_single_cell_experiment","text":"","code":"get_single_cell_experiment(   census,   organism,   measurement_name = \"RNA\",   X_layers = c(counts = \"raw\"),   obs_value_filter = NULL,   obs_coords = NULL,   obs_column_names = NULL,   obsm_layers = FALSE,   var_value_filter = NULL,   var_coords = NULL,   var_column_names = NULL,   var_index = \"feature_id\" )"},{"path":"/reference/get_single_cell_experiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export Census slices to SingleCellExperiment — get_single_cell_experiment","text":"census census object, usually returned cellxgene.census::open_soma(). organism organism query, usually one Homo sapiens Mus musculus measurement_name measurement object query. Defaults RNA. X_layers character vector X layers add assays main experiment; may optionally named set name resulting assay (eg. ‘X_layers = c(counts = \"raw\")’ load X layer “‘raw’” assay “‘counts’”); default, loads X layers obs_value_filter SOMA value_filter across columns obs dataframe, expressed string. obs_coords set coordinates obs dataframe index, expressed type format supported SOMADataFrame's read() method. obs_column_names Columns fetch obs data frame. obsm_layers Names arrays obsm add cell embeddings; pass FALSE suppress loading dimensional reductions. var_value_filter obs_value_filter var. var_coords obs_coords var. var_column_names Columns fetch var data frame. var_index Name column ‘var’ add feature names.","code":""},{"path":"/reference/get_single_cell_experiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export Census slices to SingleCellExperiment — get_single_cell_experiment","text":"SingleCellExperiment object containing sensus slice.","code":""},{"path":"/reference/get_single_cell_experiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export Census slices to SingleCellExperiment — get_single_cell_experiment","text":"","code":"if (FALSE) { census <- open_soma() sce_obj <- get_single_cell_experiment(   census,   organism = \"Homo sapiens\",   obs_value_filter = \"cell_type == 'leptomeningeal cell'\",   var_value_filter = \"feature_id %in% c('ENSG00000107317', 'ENSG00000106034')\" )  sce_obj  census$close() }"},{"path":"/reference/get_source_h5ad_uri.html","id":null,"dir":"Reference","previous_headings":"","what":"Locate source h5ad file for a dataset. — get_source_h5ad_uri","title":"Locate source h5ad file for a dataset. — get_source_h5ad_uri","text":"Locate source h5ad file dataset.","code":""},{"path":"/reference/get_source_h5ad_uri.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locate source h5ad file for a dataset. — get_source_h5ad_uri","text":"","code":"get_source_h5ad_uri(dataset_id, census_version = \"stable\", census = NULL)"},{"path":"/reference/get_source_h5ad_uri.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locate source h5ad file for a dataset. — get_source_h5ad_uri","text":"dataset_id dataset_id interest. census_version desired Census version. census open Census handle census_version. provided, opened closed automatically; efficient reuse handle calling get_source_h5ad_uri() multiple times.","code":""},{"path":"/reference/get_source_h5ad_uri.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locate source h5ad file for a dataset. — get_source_h5ad_uri","text":"list uri optional s3_region.","code":""},{"path":"/reference/get_source_h5ad_uri.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Locate source h5ad file for a dataset. — get_source_h5ad_uri","text":"","code":"get_source_h5ad_uri(\"0895c838-e550-48a3-a777-dbcd35d30272\") #> $uri #> [1] \"s3://cellxgene-census-public-us-west-2/cell-census/2023-12-15/h5ads/0895c838-e550-48a3-a777-dbcd35d30272.h5ad\" #>  #> $s3_region #> [1] \"us-west-2\" #>"},{"path":"/reference/new_SOMATileDBContext_for_census.html","id":null,"dir":"Reference","previous_headings":"","what":"Create SOMATileDBContext for Census — new_SOMATileDBContext_for_census","title":"Create SOMATileDBContext for Census — new_SOMATileDBContext_for_census","text":"Create SOMATileDBContext suitable using open_soma(). Typically open_soma() creates context automatically, one can created separately order set custom configuration options, share multiple open Census handles.","code":""},{"path":"/reference/new_SOMATileDBContext_for_census.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create SOMATileDBContext for Census — new_SOMATileDBContext_for_census","text":"","code":"new_SOMATileDBContext_for_census(   census_version_description,   mirror = \"default\",   ... )"},{"path":"/reference/new_SOMATileDBContext_for_census.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create SOMATileDBContext for Census — new_SOMATileDBContext_for_census","text":"census_version_description result get_census_version_description() desired Census version. mirror name intended census mirror (get_census_mirror_directory()[[name]] save lookup), NULL configure local file access. ... Custom configuration options.","code":""},{"path":"/reference/new_SOMATileDBContext_for_census.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create SOMATileDBContext for Census — new_SOMATileDBContext_for_census","text":"SOMATileDBContext object open_soma().","code":""},{"path":"/reference/new_SOMATileDBContext_for_census.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create SOMATileDBContext for Census — new_SOMATileDBContext_for_census","text":"","code":"census_desc <- get_census_version_description(\"stable\") ctx <- new_SOMATileDBContext_for_census(census_desc, \"soma.init_buffer_bytes\" = paste(4 * 1024**3)) census <- open_soma(\"stable\", tiledbsoma_ctx = ctx) #> The stable Census release is currently 2023-12-15. Specify census_version = \"2023-12-15\" in future calls to open_soma() to ensure data consistency. census$close()"},{"path":"/reference/open_soma.html","id":null,"dir":"Reference","previous_headings":"","what":"Open the Census — open_soma","title":"Open the Census — open_soma","text":"Open Census","code":""},{"path":"/reference/open_soma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open the Census — open_soma","text":"","code":"open_soma(   census_version = \"stable\",   uri = NULL,   tiledbsoma_ctx = NULL,   mirror = NULL )"},{"path":"/reference/open_soma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open the Census — open_soma","text":"census_version version Census, e.g., \"stable\". uri URI containing Census SOMA objects open instead released version. (supplied, takes precedence census_version.) tiledbsoma_ctx tiledbsoma::SOMATileDBContext built using new_SOMATileDBContext_for_census(). Optional (created automatically) using census_version context need reused. mirror Census mirror access; one names(get_census_mirror_directory()).","code":""},{"path":"/reference/open_soma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open the Census — open_soma","text":"Top-level tiledbsoma::SOMACollection object. use, census closed release memory resources, usually .exit(census$close(), add = TRUE). Closing top-level census also close SOMA objects accessed .","code":""},{"path":"/reference/open_soma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open the Census — open_soma","text":"","code":"census <- open_soma() #> The stable Census release is currently 2023-12-15. Specify census_version = \"2023-12-15\" in future calls to open_soma() to ensure data consistency. as.data.frame(census$get(\"census_info\")$get(\"summary\")$read()$concat()) #>   soma_joinid                      label      value #> 1           0      census_schema_version      1.2.0 #> 2           1          census_build_date 2023-10-23 #> 3           2     dataset_schema_version      3.1.0 #> 4           3           total_cell_count   68683222 #> 5           4          unique_cell_count   40356133 #> 6           5 number_donors_homo_sapiens      15588 #> 7           6 number_donors_mus_musculus       1990 census$close()"}]
