[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022, Chan Zuckerberg Initiative Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/census_access_maintained_embeddings.html","id":"open-census","dir":"Articles","previous_headings":"","what":"Open Census","title":"Access CELLxGENE collaboration embeddings (scVI, Geneformer)","text":"","code":"library(\"cellxgene.census\") census <- open_soma(census_version = \"2023-12-15\")"},{"path":"/articles/census_access_maintained_embeddings.html","id":"load-embeddings-as-seurat-reductions","dir":"Articles","previous_headings":"","what":"Load embeddings as Seurat reductions","title":"Access CELLxGENE collaboration embeddings (scVI, Geneformer)","text":"high-level cellxgene.census::get_seurat() function can query Census load embeddings dimensional reductions Seurat object. ask Seurat object expression data human cells tissue_general equal 'central nervous system', along scVI geneformer embeddings (obsm_layers). embeddings stored dimensional reductions seurat_obj, can take quick look scVI embeddings 2D scatter plot via UMAP, colored Census cell_type annotations.","code":"library(\"Seurat\")  seurat_obj <- get_seurat(   census,   organism = \"homo_sapiens\",   obs_value_filter = \"tissue_general == 'central nervous system'\",   obs_column_names = c(\"cell_type\"),   obsm_layers = c(\"scvi\", \"geneformer\") ) seurat_obj <- RunUMAP(   seurat_obj,   reduction = \"scvi\",   dims = 1:ncol(Embeddings(seurat_obj, \"scvi\")) )  DimPlot(seurat_obj, reduction = \"umap\", group.by = \"cell_type\") +   theme(legend.text = element_text(size = 8))"},{"path":"/articles/census_access_maintained_embeddings.html","id":"load-embeddings-as-singlecellexperiment-reductions","dir":"Articles","previous_headings":"","what":"Load embeddings as SingleCellExperiment reductions","title":"Access CELLxGENE collaboration embeddings (scVI, Geneformer)","text":"Similarly, cellxgene.census::get_single_cell_experiment() can query Census store embeddings dimensionality reduction results Bioconductor SingleCellExperiment object. , can view UMAP Geneformer embeddings colored cell_type.","code":"library(\"SingleCellExperiment\") sce_obj <- get_single_cell_experiment(   census,   organism = \"homo_sapiens\",   obs_value_filter = \"tissue_general == 'central nervous system'\",   obs_column_names = c(\"cell_type\"),   obsm_layers = c(\"scvi\", \"geneformer\") ) sce_obj <- scater::runUMAP(sce_obj, dimred = \"geneformer\") scater::plotReducedDim(sce_obj, dimred = \"UMAP\", colour_by = \"cell_type\")"},{"path":"/articles/census_access_maintained_embeddings.html","id":"load-embeddings-as-sparsematrix","dir":"Articles","previous_headings":"","what":"Load embeddings as sparseMatrix","title":"Access CELLxGENE collaboration embeddings (scVI, Geneformer)","text":"Lastly, can use SOMAExperimentAxisQuery lower-level access embeddings’ numerical data. can performant use cases don’t need features Seurat SingleCellExperiment. row embeddings sparseMatrix provides fine-tuned Geneformer model’s 512-dimensional embedding vector cell, cell soma_joinids row names. different arguments, SOMAExperimentAxisQuery$to_sparse_matrix() can also read scVI embeddings expression data. Still lower-level access available SOMAExperimentAxisQuery$read(), streams Arrow tables. methods SOMAExperimentAxisQuery can fetch metadata like cell_type: SOMAExperimentAxisQuery loads ask Census, unlike high-level get_seurat() get_single_cell_experiment() functions, eagerly populate objects based query.","code":"query <- census$get(\"census_data\")$get(\"homo_sapiens\")$axis_query(   \"RNA\",   obs_query = tiledbsoma::SOMAAxisQuery$new(value_filter = \"tissue == 'tongue'\") ) embeddings <- query$to_sparse_matrix(\"obsm\", \"geneformer\") str(embeddings) #> Formal class 'dgTMatrix' [package \"Matrix\"] with 6 slots #>   ..@ i       : int [1:190464] 0 0 0 0 0 0 0 0 0 0 ... #>   ..@ j       : int [1:190464] 0 1 2 3 4 5 6 7 8 9 ... #>   ..@ Dim     : int [1:2] 372 512 #>   ..@ Dimnames:List of 2 #>   .. ..$ : chr [1:372] \"51784858\" \"51784859\" \"51784860\" \"51784861\" ... #>   .. ..$ : chr [1:512] \"0\" \"1\" \"2\" \"3\" ... #>   ..@ x       : num [1:190464] 0.1104 -1.2031 1.0078 0.0131 1.2422 ... #>   ..@ factors : list() head(as.data.frame(query$obs(column_names = c(\"soma_joinid\", \"cell_type\"))$concat())) #>   soma_joinid  cell_type #> 1    51784858 basal cell #> 2    51784859 basal cell #> 3    51784860 fibroblast #> 4    51784861 fibroblast #> 5    51784862 basal cell #> 6    51784863 basal cell census$close()"},{"path":"/articles/census_axis_query.html","id":"axis-query-example","dir":"Articles","previous_headings":"","what":"Axis Query Example","title":"Axis Query Example","text":"Goal: demonstrate basic axis metadata handling. CZ CELLxGENE Census stores obs (cell) metadata SOMA DataFrame, can queried read R data frame. Census also convenience package simplifies opening census. R data frames -memory objects. Take care queries small enough results fit memory.","code":""},{"path":"/articles/census_axis_query.html","id":"opening-the-census","dir":"Articles","previous_headings":"Axis Query Example","what":"Opening the census","title":"Axis Query Example","text":"cellxgene.census R package contains convenient API open latest version Census. can learn cellxgene.census methods accessing corresponding documentation. example ?cellxgene.census::open_soma.","code":"census <- cellxgene.census::open_soma()"},{"path":"/articles/census_axis_query.html","id":"summarize-census-cell-metadata","dir":"Articles","previous_headings":"Axis Query Example","what":"Summarize Census cell metadata","title":"Axis Query Example","text":"Tips: can read entire SOMA dataframe R using .data.frame(soma_df$read()). Queries much faster request DataFrame columns required analysis (e.g. column_names = c(\"soma_joinid\", \"cell_type_ontology_term_id\")). can also refine query results using value_filter, filter census matching records.","code":""},{"path":"/articles/census_axis_query.html","id":"summarize-all-cell-types","dir":"Articles","previous_headings":"Axis Query Example > Summarize Census cell metadata","what":"Summarize all cell types","title":"Axis Query Example","text":"example reads cell metadata (obs) R data frame summarize variety ways.","code":"human <- census$get(\"census_data\")$get(\"homo_sapiens\")  # Read obs into an R data frame (tibble). obs_df <- as.data.frame(human$obs$read(   column_names = c(\"soma_joinid\", \"cell_type_ontology_term_id\") ))  # Find all unique values in the cell_type_ontology_term_id column. unique_cell_type_ontology_term_id <- unique(obs_df$cell_type_ontology_term_id)  cat(paste(   \"There are\",   length(unique_cell_type_ontology_term_id),   \"cell types in the Census! The first few are:\" )) #> There are 604 cell types in the Census! The first few are: head(unique_cell_type_ontology_term_id) #> [1] \"CL:0000540\" \"CL:0000738\" \"CL:0000763\" \"CL:0000136\" \"CL:0000235\" #> [6] \"CL:0000115\""},{"path":"/articles/census_axis_query.html","id":"summarize-a-subset-of-cell-types-selected-with-a-value_filter","dir":"Articles","previous_headings":"Axis Query Example > Summarize Census cell metadata","what":"Summarize a subset of cell types, selected with a value_filter","title":"Axis Query Example","text":"example utilizes SOMA “value filter” read subset cells tissue_ontology_term_id equal UBERON:0002048 (lung tissue), summarizes query result. can also define much complex value filters. example: combine terms use %% operator query multiple values","code":"# Read cell_type terms for cells which have a specific tissue term LUNG_TISSUE <- \"UBERON:0002048\"  obs_df <- as.data.frame(human$obs$read(   column_names = c(\"cell_type_ontology_term_id\"),   value_filter = paste(\"tissue_ontology_term_id == '\", LUNG_TISSUE, \"'\", sep = \"\") ))  # Find all unique values in the cell_type_ontology_term_id column as an R data frame. unique_cell_type_ontology_term_id <- unique(obs_df$cell_type_ontology_term_id) cat(paste(   \"There are \",   length(unique_cell_type_ontology_term_id),   \" cell types in the Census where tissue_ontology_term_id == \",   LUNG_TISSUE,   \"!\\nThe first few are:\",   sep = \"\" )) #> There are 185 cell types in the Census where tissue_ontology_term_id == UBERON:0002048! #> The first few are: head(unique_cell_type_ontology_term_id) #> [1] \"CL:0000003\" \"CL:4028004\" \"CL:0002145\" \"CL:0000625\" \"CL:0000624\" #> [6] \"CL:4028006\"  # Report the 10 most common top_10 <- sort(table(obs_df$cell_type_ontology_term_id), decreasing = TRUE)[1:10] cat(paste(\"The top 10 cell types where tissue_ontology_term_id ==\", LUNG_TISSUE)) #> The top 10 cell types where tissue_ontology_term_id == UBERON:0002048 print(top_10) #>  #> CL:0000003 CL:0000583 CL:0000625 CL:0000624 CL:0000235 CL:0002063 CL:0000860  #>     562038     526859     323433     323067     254173     246279     203526  #> CL:0000623 CL:0001064 CL:0002632  #>     164944     149067     132243 # You can also do more complex queries, such as testing for inclusion in a list of values obs_df <- as.data.frame(human$obs$read(   column_names = c(\"cell_type_ontology_term_id\"),   value_filter = \"tissue_ontology_term_id %in% c('UBERON:0002082', 'UBERON:OOO2084', 'UBERON:0002080')\" ))  # Summarize top_10 <- sort(table(obs_df$cell_type_ontology_term_id), decreasing = TRUE)[1:10] print(top_10) #>  #> CL:0000746 CL:0008034 CL:0002548 CL:0000115 CL:0002131 CL:0000763 CL:0000669  #>     159096      84750      79618      64190      61830      32088      27515  #> CL:0000003 CL:0000057 CL:0002144  #>      22707      20117      18593"},{"path":"/articles/census_axis_query.html","id":"full-census-stats","dir":"Articles","previous_headings":"Axis Query Example > Summarize Census cell metadata","what":"Full census stats","title":"Axis Query Example","text":"example queries organisms Census, summarizes diversity various metadata labels.","code":"cols_to_query <- c(   \"cell_type_ontology_term_id\",   \"assay_ontology_term_id\",   \"tissue_ontology_term_id\" )  total_cells <- 0 for (organism in census$get(\"census_data\")$names()) {   print(organism)   obs_df <- as.data.frame(     census$get(\"census_data\")$get(organism)$obs$read(column_names = cols_to_query)   )   total_cells <- total_cells + nrow(obs_df)   for (col in cols_to_query) {     cat(paste(\"  Unique \", col, \" values: \", length(unique(obs_df[[col]])), \"\\n\", sep = \"\"))   } } #> [1] \"homo_sapiens\" #>   Unique cell_type_ontology_term_id values: 604 #>   Unique assay_ontology_term_id values: 20 #>   Unique tissue_ontology_term_id values: 227 #> [1] \"mus_musculus\" #>   Unique cell_type_ontology_term_id values: 226 #>   Unique assay_ontology_term_id values: 9 #>   Unique tissue_ontology_term_id values: 51 cat(paste(\"Complete Census contains\", total_cells, \"cells.\")) #> Complete Census contains 60361716 cells."},{"path":"/articles/census_citation_generation.html","id":"requirements","dir":"Articles","previous_headings":"","what":"Requirements","title":"Generating citations for Census slices","text":"notebook requires: cellxgene_census Python package. Census data release schema version 1.3.0 greater.","code":""},{"path":"/articles/census_citation_generation.html","id":"generating-citation-strings","dir":"Articles","previous_headings":"","what":"Generating citation strings","title":"Generating citations for Census slices","text":"First open handle Census data. ensure open data release schema version 1.3.0 greater, use census_version=\"latest\" load dataset table contains column \"citation\" dataset included Census. now can use column \"dataset_id\" present dataset table Census cell metadata create citation strings Census slice.","code":"library(\"tiledb\") library(\"cellxgene.census\")  census <- open_soma(census_version = \"latest\") census_release_info <- census$get(\"census_info\")$get(\"summary\")$read()$concat() as.data.frame(census_release_info) #>   soma_joinid                      label      value #> 1           0      census_schema_version      2.1.0 #> 2           1          census_build_date 2024-07-08 #> 3           2     dataset_schema_version      5.1.0 #> 4           3           total_cell_count  117368608 #> 5           4          unique_cell_count   61817346 #> 6           5 number_donors_homo_sapiens      18026 #> 7           6 number_donors_mus_musculus       4255 datasets <- census$get(\"census_info\")$get(\"datasets\")$read()$concat() datasets <- as.data.frame(datasets) head(datasets[\"citation\"]) #>                                                                                                                                                                                                                                                                                                           citation #> 1            Publication: https://doi.org/10.1002/hep4.1854 Dataset Version: https://datasets.cellxgene.cziscience.com/aaab3abd-624a-442e-b62b-3f2edb10b45e.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/44531dd9-1388-4416-a117-af0a99de2294 #> 2   Publication: https://doi.org/10.1126/sciimmunol.abe6291 Dataset Version: https://datasets.cellxgene.cziscience.com/50c1d621-995d-4386-9fcb-5c70fcdf8d66.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/3a2af25b-2338-4266-aad3-aa8d07473f50 #> 3   Publication: https://doi.org/10.1038/s41593-020-00764-7 Dataset Version: https://datasets.cellxgene.cziscience.com/e95b54b1-8656-4fe8-9f53-6fdd97f397ba.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/180bff9c-c8a5-4539-b13b-ddbc00d643e6 #> 4   Publication: https://doi.org/10.1038/s41467-022-29450-x Dataset Version: https://datasets.cellxgene.cziscience.com/d6e742c5-f6e5-42f4-8064-622783542f6b.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/bf325905-5e8e-42e3-933d-9a9053e9af80 #> 5   Publication: https://doi.org/10.1038/s41590-021-01059-0 Dataset Version: https://datasets.cellxgene.cziscience.com/61f15353-e598-43b5-bb5a-80ac44a0cf0b.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/93eebe82-d8c3-41bc-a906-63b5b5f24a9d #> 6 Publication: https://doi.org/10.1016/j.celrep.2019.12.082 Dataset Version: https://datasets.cellxgene.cziscience.com/76b42c8c-9357-4c13-908f-8b757a0f8637.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/939769a8-d8d2-4d01-abfc-55699893fd49"},{"path":"/articles/census_citation_generation.html","id":"via-cell-metadata-query","dir":"Articles","previous_headings":"Generating citation strings","what":"Via cell metadata query","title":"Generating citations for Census slices","text":"","code":"# Query cell metadata cell_metadata <- census$get(\"census_data\")$get(\"homo_sapiens\")$obs$read(   value_filter = \"tissue == 'cardiac atrium'\",   column_names = c(\"dataset_id\", \"cell_type\") )  cell_metadata <- as.data.frame(cell_metadata$concat())  # Get a citation string for the slice slice_datasets <- datasets[datasets$dataset_id %in% cell_metadata$dataset_id, ] print(slice_datasets$citation) #> [1] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/dbcbe0a6-918a-4440-9a56-6d03f0f22df5.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [2] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/07900e47-7ab4-48d4-a26e-abdd010f4bbf.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [3] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/cb872c2c-64a4-405f-96c3-03124405cc6c.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [4] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/3149e7d3-1ae4-4b59-a54b-73e9f591b699.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [5] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/50a18e6a-797b-40bd-aa07-6ed50a1f2cf6.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [6] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/981bcf57-30cb-4a85-b905-e04373432fef.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\""},{"path":"/articles/census_citation_generation.html","id":"via-seurat-query","dir":"Articles","previous_headings":"Generating citation strings","what":"Via Seurat query","title":"Generating citations for Census slices","text":"","code":"# Fetch a Seurat object seurat_obj <- get_seurat(   census = census,   organism = \"homo_sapiens\",   measurement_name = \"RNA\",   obs_value_filter = \"tissue == 'cardiac atrium'\",   var_value_filter = \"feature_name == 'MYBPC3'\",   obs_column_names = c(\"dataset_id\", \"cell_type\") )  # Get a citation string for the slice slice_datasets <- datasets[datasets$dataset_id %in% seurat_obj[[]]$dataset_id, ] print(slice_datasets$citation) #> [1] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/dbcbe0a6-918a-4440-9a56-6d03f0f22df5.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [2] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/07900e47-7ab4-48d4-a26e-abdd010f4bbf.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [3] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/cb872c2c-64a4-405f-96c3-03124405cc6c.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [4] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/3149e7d3-1ae4-4b59-a54b-73e9f591b699.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [5] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/50a18e6a-797b-40bd-aa07-6ed50a1f2cf6.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [6] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/981bcf57-30cb-4a85-b905-e04373432fef.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\""},{"path":"/articles/census_citation_generation.html","id":"via-singlecellexperiment-query","dir":"Articles","previous_headings":"Generating citation strings","what":"Via SingleCellExperiment query","title":"Generating citations for Census slices","text":"","code":"# Fetch a Seurat object sce_obj <- get_single_cell_experiment(   census = census,   organism = \"homo_sapiens\",   measurement_name = \"RNA\",   obs_value_filter = \"tissue == 'cardiac atrium'\",   var_value_filter = \"feature_name == 'MYBPC3'\",   obs_column_names = c(\"dataset_id\", \"cell_type\") )  # Get a citation string for the slice slice_datasets <- datasets[datasets$dataset_id %in% sce_obj$dataset_id, ] print(slice_datasets$citation) #> [1] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/dbcbe0a6-918a-4440-9a56-6d03f0f22df5.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [2] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/07900e47-7ab4-48d4-a26e-abdd010f4bbf.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [3] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/cb872c2c-64a4-405f-96c3-03124405cc6c.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [4] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/3149e7d3-1ae4-4b59-a54b-73e9f591b699.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [5] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/50a18e6a-797b-40bd-aa07-6ed50a1f2cf6.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\" #> [6] \"Publication: https://doi.org/10.1126/science.abl4896 Dataset Version: https://datasets.cellxgene.cziscience.com/981bcf57-30cb-4a85-b905-e04373432fef.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/e5f58829-1a66-40b5-a624-9046778e74f5\""},{"path":"/articles/census_compute_over_X.html","id":"incremental-mean-calculation","dir":"Articles","previous_headings":"","what":"Incremental mean calculation","title":"Computing on X using online (incremental) algorithms","text":"Many statistics, marginal means, easy calculate incrementally. Let’s begin query X$raw sparse matrix unnormalized read counts, return results shards incrementally accumulate read count gene, divide cell count get mean reads per cell gene. First define query - case slice obs axis cells specific tissue & sex value, genes var axis. query$X() method returns iterator results, Arrow Table. table contain sparse X data obs/var coordinates, using standard SOMA names: soma_data - X values (float32) soma_dim_0 - obs coordinate (int64) soma_dim_1 - var coordinate (int64) Important: X matrices joined var/obs axis DataFrames integer join “id” (aka soma_joinid). positionally indexed, given cell gene may soma_joinid value (e.g., large integer). words, given X value, soma_dim_0 corresponds soma_joinid obs dataframe, soma_dim_1 coordinate corresponds soma_joinid var dataframe. convenience, query class includes utility simplify operations query slices. query$indexer indexer used wrap output query$X(), converting soma_joinids positional indexing query results. Positions [0, N), N number results query given axis. Key points: expensive query read results - rather make multiple passes data, read perform multiple computations. default, data census indexed soma_joinid positionally.","code":"library(\"tiledbsoma\") library(\"cellxgene.census\") census <- open_soma()  query <- census$get(\"census_data\")$get(\"mus_musculus\")$axis_query(   measurement_name = \"RNA\",   obs_query = SOMAAxisQuery$new(value_filter = \"tissue=='brain' && sex=='male'\") )  genes_df <- query$var(column_names = c(\"feature_id\", \"feature_name\"))$concat() genes_df <- as.data.frame(genes_df) n_genes <- nrow(genes_df)  # accumulator vector (for each gene) for the total count over all cells in X(\"raw\") raw_sum_by_gene <- numeric(n_genes) names(raw_sum_by_gene) <- genes_df$feature_id  # iterate through in-memory shards of query results tables <- query$X(\"raw\")$tables() while (!tables$read_complete()) {   table_part <- tables$read_next()   # table_part is an Arrow table with the columns mentioned above. The result   # order is not guaranteed!    # table_part$soma_dim_1 is the var/gene soma_joinid. But note that these are   # arbitrary int64 id's, and moreover each table_part may exhibit only a subset   # of the values we'll see over all query results. query$indexer helps us map   # any given soma_dim_1 values onto positions in query$var() (genes_df), that is   # the union of all values we'll see.   gene_indexes <- query$indexer$by_var(table_part$soma_dim_1)$as_vector()   stopifnot(sum(gene_indexes >= n_genes) == 0)   # sum(table_part) group by gene, yielding a numeric vector with the gene_index   # in its names   sum_part <- tapply(as.vector(table_part$soma_data), gene_indexes, sum)   # update the accumulator vector   which_genes <- as.integer(names(sum_part)) + 1 # nb: gene_indexes is zero-based   stopifnot(sum(which_genes > n_genes) == 0)   raw_sum_by_gene[which_genes] <- raw_sum_by_gene[which_genes] + sum_part }  # Divide each sum by cell count to get mean reads per cell (for each gene), # implicitly averaging in all zero entries in X even though they weren't included # in the sparse query results. genes_df$raw_mean <- raw_sum_by_gene / query$n_obs genes_df #>            feature_id  feature_name     raw_mean #> 1  ENSMUSG00000021124         Vti1b 1.051981e+02 #> 2  ENSMUSG00000039377           Hlx 1.864338e+01 #> 3  ENSMUSG00000085604       Dhx58os 4.839911e-03 #> 4  ENSMUSG00000085125       Gm16070 4.343510e-03 #> 5  ENSMUSG00000029439        Sfswap 1.438792e+01 #> 6  ENSMUSG00000027792          Bche 8.145818e+00 #> 7  ENSMUSG00000090363        Gm3512 6.205014e-05 #> 8  ENSMUSG00000074896         Ifit3 6.227774e+01 #> 9  ENSMUSG00000030433          Sbk2 1.782907e-01 #> 10 ENSMUSG00000021972        Hmbox1 5.211322e+00 #> 11 ENSMUSG00000020752        Recql5 7.973649e+00 #> 12 ENSMUSG00000079555         Haus3 7.311037e+00 #> 13 ENSMUSG00000046178         Nxph1 2.097491e+01 #> 14 ENSMUSG00000022159         Rab2b 3.864993e+01 #> 15 ENSMUSG00000042371       Slc5a10 1.161589e+01 #> 16 ENSMUSG00000039270         Megf9 7.668363e+00 #> 17 ENSMUSG00000054641         Mmrn1 9.650865e-02 #> 18 ENSMUSG00000030443        Zfp583 2.867316e+00 #> 19 ENSMUSG00000038502         Ptov1 1.617562e+02 #> 20 ENSMUSG00000050671          Ism2 3.929842e-04 #> 21 ENSMUSG00000097170       Gm16982 1.232936e-01 #> 22 ENSMUSG00000034601 2700049A03Rik 7.181600e+00 #> 23 ENSMUSG00000040258         Nxph4 3.021842e-01 #> 24 ENSMUSG00000001014         Icam4 2.837966e-01 #> 25 ENSMUSG00000019761         Krt10 2.599611e+00 #> 26 ENSMUSG00000042198        Chchd7 2.078421e+01 #> 27 ENSMUSG00000037386         Rims2 1.047379e+01 #> 28 ENSMUSG00000086016 1700084C06Rik 1.447837e-04 #> 29 ENSMUSG00000098055       Gm26947 1.654670e-04 #> 30 ENSMUSG00000015165        Hnrnpl 2.534560e+01 #> 31 ENSMUSG00000056880         Gadl1 3.785265e-01 #> 32 ENSMUSG00000025175          Fn3k 1.647452e+01 #> 33 ENSMUSG00000028772       Zcchc17 5.578566e+01 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 52404 rows ]"},{"path":"/articles/census_compute_over_X.html","id":"counting-cells-grouped-by-dataset-and-gene","dir":"Articles","previous_headings":"","what":"Counting cells grouped by dataset and gene","title":"Computing on X using online (incremental) algorithms","text":"goal example count number cells nonzero reads, grouped gene Census dataset_id. result data frame dataset, gene, number cells nonzero reads dataset gene. multi-factor aggregation, ’ll take advantage dplyr routines instead lower-level vector indexer shown . presentation purposes, ’ll limit query four genes, can expanded genes easily. Don’t forget close census.","code":"library(\"dplyr\")  query <- census$get(\"census_data\")$get(\"mus_musculus\")$axis_query(   measurement_name = \"RNA\",   obs_query = SOMAAxisQuery$new(value_filter = \"tissue=='brain'\"),   var_query = SOMAAxisQuery$new(value_filter = \"feature_name %in% c('Malat1', 'Ptprd', 'Dlg2', 'Pcdh9')\") )  obs_tbl <- query$obs(column_names = c(\"soma_joinid\", \"dataset_id\"))$concat() obs_df <- data.frame(   # materialize soma_joinid as character to avoid overflowing R 32-bit integer   cell_id = as.character(obs_tbl$soma_joinid),   dataset_id = obs_tbl$dataset_id$as_vector() ) var_tbl <- query$var(column_names = c(\"soma_joinid\", \"feature_name\"))$concat() var_df <- data.frame(   gene_id = as.character(var_tbl$soma_joinid),   feature_name = var_tbl$feature_name$as_vector() )  # accumulator for # cells by dataset & gene n_cells_grouped <- data.frame(   \"dataset_id\" = character(0),   \"gene_id\" = character(0),   \"n_cells\" = numeric(0) )  # iterate through in-memory shards of query results tables <- query$X(\"raw\")$tables() while (!tables$read_complete()) {   table_part <- tables$read_next()    # prepare a (dataset,gene,1) tuple for each entry in table_part   n_cells_part <- data.frame(     \"cell_id\" = as.character(table_part$soma_dim_0),     \"gene_id\" = as.character(table_part$soma_dim_1),     \"n_cells\" = 1   )   n_cells_part <- left_join(n_cells_part, obs_df, by = \"cell_id\")   stopifnot(sum(is.null(n_cells_part$dataset_id)) == 0)    # fold those into n_cells_grouped   n_cells_grouped <- n_cells_part %>%     select(-cell_id) %>%     bind_rows(n_cells_grouped) %>%     group_by(dataset_id, gene_id) %>%     summarise(n_cells = sum(n_cells)) %>%     ungroup() }  # add gene names for display n_cells_grouped <- left_join(n_cells_grouped, var_df, by = \"gene_id\") stopifnot(sum(is.null(n_cells_grouped$feature_name)) == 0) n_cells_grouped[c(\"dataset_id\", \"feature_name\", \"n_cells\")] #> # A tibble: 21 x 3 #>    dataset_id                           feature_name n_cells #>    <chr>                                <chr>          <dbl> #>  1 3bbb6cf9-72b9-41be-b568-656de6eb18b5 Ptprd          79578 #>  2 3bbb6cf9-72b9-41be-b568-656de6eb18b5 Dlg2           79513 #>  3 3bbb6cf9-72b9-41be-b568-656de6eb18b5 Malat1         79667 #>  4 3bbb6cf9-72b9-41be-b568-656de6eb18b5 Pcdh9          79476 #>  5 58b01044-c5e5-4b0f-8a2d-6ebf951e01ff Ptprd            474 #>  6 58b01044-c5e5-4b0f-8a2d-6ebf951e01ff Dlg2              81 #>  7 58b01044-c5e5-4b0f-8a2d-6ebf951e01ff Malat1         12622 #>  8 58b01044-c5e5-4b0f-8a2d-6ebf951e01ff Pcdh9            125 #>  9 66ff82b4-9380-469c-bc4b-cfa08eacd325 Dlg2             856 #> 10 66ff82b4-9380-469c-bc4b-cfa08eacd325 Malat1          7102 #> # i 11 more rows census$close()"},{"path":"/articles/census_dataset_presence.html","id":"opening-the-census","dir":"Articles","previous_headings":"","what":"Opening the Census","title":"Genes measured in each cell (dataset presence matrix)","text":"cellxgene.census R package contains convenient API open version Census (default, newest stable version).","code":"library(\"cellxgene.census\") census <- open_soma()"},{"path":"/articles/census_dataset_presence.html","id":"fetching-the-ids-of-the-census-datasets","dir":"Articles","previous_headings":"","what":"Fetching the IDs of the Census datasets","title":"Genes measured in each cell (dataset presence matrix)","text":"Let’s grab table datasets included Census use table combination presence matrix .","code":"# Grab the experiment containing human data, and the measurement therein with RNA human <- census$get(\"census_data\")$get(\"homo_sapiens\") human_rna <- human$ms$get(\"RNA\")  # The census-wide datasets datasets_df <- as.data.frame(census$get(\"census_info\")$get(\"datasets\")$read()$concat()) print(datasets_df) #>    soma_joinid #> 1            0 #> 2            1 #> 3            2 #> 4            3 #> 5            4 #> 6            5 #> 7            6 #> 8            7 #> 9            8 #> 10           9 #>                                                                                                                                                                                                                                                                                                            citation #> 1             Publication: https://doi.org/10.1002/hep4.1854 Dataset Version: https://datasets.cellxgene.cziscience.com/fb76c95f-0391-4fac-9fb9-082ce2430b59.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/44531dd9-1388-4416-a117-af0a99de2294 #> 2    Publication: https://doi.org/10.1126/sciimmunol.abe6291 Dataset Version: https://datasets.cellxgene.cziscience.com/b6737a5e-9069-4dd6-9a57-92e17a746df9.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/3a2af25b-2338-4266-aad3-aa8d07473f50 #> 3    Publication: https://doi.org/10.1038/s41593-020-00764-7 Dataset Version: https://datasets.cellxgene.cziscience.com/0e02290f-b992-450b-8a19-554f73cd7f09.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/180bff9c-c8a5-4539-b13b-ddbc00d643e6 #> 4    Publication: https://doi.org/10.1038/s41467-022-29450-x Dataset Version: https://datasets.cellxgene.cziscience.com/40832710-d7b1-43fb-b2c2-1cd2255bc3ac.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/bf325905-5e8e-42e3-933d-9a9053e9af80 #> 5    Publication: https://doi.org/10.1038/s41590-021-01059-0 Dataset Version: https://datasets.cellxgene.cziscience.com/eb6c070c-ff67-4c1f-8d4d-65f9fe2119ee.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/93eebe82-d8c3-41bc-a906-63b5b5f24a9d #> 6  Publication: https://doi.org/10.1016/j.celrep.2019.12.082 Dataset Version: https://datasets.cellxgene.cziscience.com/650a47be-6666-4f70-ac47-8414c50bbd8e.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/939769a8-d8d2-4d01-abfc-55699893fd49 #> 7    Publication: https://doi.org/10.1038/s41593-020-00764-7 Dataset Version: https://datasets.cellxgene.cziscience.com/1f0cd8ed-94c6-440c-bd5b-bad55e2666b1.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/180bff9c-c8a5-4539-b13b-ddbc00d643e6 #> 8    Publication: https://doi.org/10.1016/j.cell.2022.11.005 Dataset Version: https://datasets.cellxgene.cziscience.com/086c8f4e-3fe7-46e5-8b6b-a8cb7f92dadd.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/2d2e2acd-dade-489f-a2da-6c11aa654028 #> 9    Publication: https://doi.org/10.1016/j.jhep.2023.12.023 Dataset Version: https://datasets.cellxgene.cziscience.com/7e88c4aa-d95f-43e3-bc8b-cf02629d7301.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/0c8a364b-97b5-4cc8-a593-23c38c6f0ac5 #> 10            Publication: https://doi.org/10.1002/hep4.1854 Dataset Version: https://datasets.cellxgene.cziscience.com/575dd70a-45b1-4a82-8acd-467d313e4c66.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/44531dd9-1388-4416-a117-af0a99de2294 #>                           collection_id #> 1  44531dd9-1388-4416-a117-af0a99de2294 #> 2  3a2af25b-2338-4266-aad3-aa8d07473f50 #> 3  180bff9c-c8a5-4539-b13b-ddbc00d643e6 #> 4  bf325905-5e8e-42e3-933d-9a9053e9af80 #> 5  93eebe82-d8c3-41bc-a906-63b5b5f24a9d #> 6  939769a8-d8d2-4d01-abfc-55699893fd49 #> 7  180bff9c-c8a5-4539-b13b-ddbc00d643e6 #> 8  2d2e2acd-dade-489f-a2da-6c11aa654028 #> 9  0c8a364b-97b5-4cc8-a593-23c38c6f0ac5 #> 10 44531dd9-1388-4416-a117-af0a99de2294 #>                                                                                                                                         collection_name #> 1                     Single-Cell, Single-Nucleus, and Spatial RNA Sequencing of the Human Liver Identifies Cholangiocyte and Mesenchymal Heterogeneity #> 2                                       Single-cell analysis of human B cell maturation predicts how antibody class switching shapes selection dynamics #> 3                                                                   Molecular characterization of selectively vulnerable neurons in Alzheimer's Disease #> 4                   Single-cell Atlas of common variable immunodeficiency shows germinal center-associated epigenetic dysregulation in B-cell responses #> 5  Single-cell proteo-genomic reference maps of the hematopoietic system enable the purification and massive profiling of precisely defined cell states #> 6                             Integration of eQTL and a Single-Cell Atlas in the Human Eye Identifies Causal Genes for Age-Related Macular Degeneration #> 7                                                                   Molecular characterization of selectively vulnerable neurons in Alzheimer's Disease #> 8                            A human fetal lung cell atlas uncovers proximal-distal gradients of differentiation and key regulators of epithelial fates #> 9                            Single-cell and spatial transcriptomics characterisation of the immunological landscape in the healthy and PSC human liver #> 10                    Single-Cell, Single-Nucleus, and Spatial RNA Sequencing of the Human Liver Identifies Cholangiocyte and Mesenchymal Heterogeneity #>                  collection_doi                           dataset_id #> 1             10.1002/hep4.1854 0895c838-e550-48a3-a777-dbcd35d30272 #> 2    10.1126/sciimmunol.abe6291 00ff600e-6e2e-4d76-846f-0eec4f0ae417 #> 3    10.1038/s41593-020-00764-7 bdacc907-7c26-419f-8808-969eab3ca2e8 #> 4    10.1038/s41467-022-29450-x a5d95a42-0137-496f-8a60-101e17f263c8 #> 5    10.1038/s41590-021-01059-0 d3566d6a-a455-4a15-980f-45eb29114cab #> 6  10.1016/j.celrep.2019.12.082 de17ac25-550a-4018-be75-bbb485a0636e #> 7    10.1038/s41593-020-00764-7 9f1049ac-f8b7-45ad-8e31-6e96c3e5058f #> 8    10.1016/j.cell.2022.11.005 703f00e6-b996-48e5-bc34-00c41b9876f4 #> 9    10.1016/j.jhep.2023.12.023 e347396c-a7ff-4691-9f7a-99a43555ca18 #> 10            10.1002/hep4.1854 524e045e-e74c-4e00-9884-d5c3bef3d862 #>                      dataset_version_id #> 1  fb76c95f-0391-4fac-9fb9-082ce2430b59 #> 2  b6737a5e-9069-4dd6-9a57-92e17a746df9 #> 3  0e02290f-b992-450b-8a19-554f73cd7f09 #> 4  40832710-d7b1-43fb-b2c2-1cd2255bc3ac #> 5  eb6c070c-ff67-4c1f-8d4d-65f9fe2119ee #> 6  650a47be-6666-4f70-ac47-8414c50bbd8e #> 7  1f0cd8ed-94c6-440c-bd5b-bad55e2666b1 #> 8  086c8f4e-3fe7-46e5-8b6b-a8cb7f92dadd #> 9  7e88c4aa-d95f-43e3-bc8b-cf02629d7301 #> 10 575dd70a-45b1-4a82-8acd-467d313e4c66 #>                                                                                                dataset_title #> 1                                                                               Healthy human liver: B cells #> 2                                                                       Human tonsil nonlymphoid cells scRNA #> 3  Molecular characterization of selectively vulnerable neurons in Alzheimer<U+2019>s Disease: SFG microglia #> 4                                                                           Steady-state B cells - scRNA-seq #> 5                                                           blood and bone marrow from a healthy young donor #> 6                                                                                 Myeloid cells of human eye #> 7   Molecular characterization of selectively vulnerable neurons in Alzheimer<U+2019>s Disease: EC microglia #> 8                                                                                                        PNS #> 9                                                      Stellate cells from human healthy donor liver samples #> 10                                                               Healthy human liver: hepatic stellate cells #>                            dataset_h5ad_path dataset_total_cell_count #> 1  0895c838-e550-48a3-a777-dbcd35d30272.h5ad                      146 #> 2  00ff600e-6e2e-4d76-846f-0eec4f0ae417.h5ad                      363 #> 3  bdacc907-7c26-419f-8808-969eab3ca2e8.h5ad                     3799 #> 4  a5d95a42-0137-496f-8a60-101e17f263c8.h5ad                     1324 #> 5  d3566d6a-a455-4a15-980f-45eb29114cab.h5ad                    15502 #> 6  de17ac25-550a-4018-be75-bbb485a0636e.h5ad                      395 #> 7  9f1049ac-f8b7-45ad-8e31-6e96c3e5058f.h5ad                     5572 #> 8  703f00e6-b996-48e5-bc34-00c41b9876f4.h5ad                      649 #> 9  e347396c-a7ff-4691-9f7a-99a43555ca18.h5ad                     1417 #> 10 524e045e-e74c-4e00-9884-d5c3bef3d862.h5ad                     1374 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 802 rows ]"},{"path":"/articles/census_dataset_presence.html","id":"fetching-the-dataset-presence-matrix","dir":"Articles","previous_headings":"","what":"Fetching the dataset presence matrix","title":"Genes measured in each cell (dataset presence matrix)","text":"Now let’s fetch dataset presence matrix. convenience, read entire presence matrix (Homo sapiens) sparse matrix. convenience function providing capability: also need var dataframe, read R data frame convenient manipulation:","code":"presence_matrix <- get_presence_matrix(census, \"Homo sapiens\", \"RNA\") print(dim(presence_matrix)) #> NULL var_df <- as.data.frame(human_rna$var$read()$concat()) print(var_df) #>    soma_joinid      feature_id feature_name feature_length      nnz n_measured_obs #> 1            0 ENSG00000000003       TSPAN6           4530  4530448       73855064 #> 2            1 ENSG00000000005         TNMD           1476   236059       61201828 #> 3            2 ENSG00000000419         DPM1           9276 17576462       74159149 #> 4            3 ENSG00000000457        SCYL3           6883  9117322       73988868 #> 5            4 ENSG00000000460     C1orf112           5970  6287794       73636201 #> 6            5 ENSG00000000938          FGR           3382  5667858       74061500 #> 7            6 ENSG00000000971          CFH          15284  4423029       74095467 #> 8            7 ENSG00000001036        FUCA2           2822 10129388       73988868 #> 9            8 ENSG00000001084         GCLC           8618 12662710       74226365 #> 10           9 ENSG00000001167         NFYA           6209  4866873       73988868 #> 11          10 ENSG00000001460        STPG1           8511  6138613       74132995 #> 12          11 ENSG00000001461       NIPAL3           9396 13079400       74197924 #> 13          12 ENSG00000001497        LAS1L          12555 10716777       73858963 #> 14          13 ENSG00000001561        ENPP4           4644  9509567       74091113 #> 15          14 ENSG00000001617       SEMA3F           4826  2055855       72941475 #> 16          15 ENSG00000001626         CFTR          16821  5419122       71475983 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 60514 rows ]"},{"path":"/articles/census_dataset_presence.html","id":"identifying-genes-measured-in-a-specific-dataset","dir":"Articles","previous_headings":"","what":"Identifying genes measured in a specific dataset","title":"Genes measured in each cell (dataset presence matrix)","text":"Now dataset table, genes metadata table, dataset presence matrix, can check gene set genes measured specific dataset. Important: presence matrix indexed soma_joinid, positionally indexed. words: first dimension presence matrix dataset’s soma_joinid, stored census_datasets dataframe. second dimension presence matrix feature’s soma_joinid, stored var dataframe. presence matrix method $take() lets slice soma_joinids census_datasets var. full presence matrix, slices , can exported regular matrix method $get_one_based_matrix() Let’s find gene \"ENSG00000286096\" measured dataset id \"97a17473-e2b1-4f31-a544-44a60773e2dd\".","code":"# Get soma_joinid for datasets and genes of interest var_joinid <- var_df$soma_joinid[var_df$feature_id == \"ENSG00000286096\"] dataset_joinid <- datasets_df$soma_joinid[datasets_df$dataset_id == \"97a17473-e2b1-4f31-a544-44a60773e2dd\"]  # Slice presence matrix with datasets and genes of interest presence_matrix_slice <- presence_matrix$take(i = dataset_joinid, j = var_joinid)  # Convert presence matrix to regular matrix presence_matrix_slice <- presence_matrix_slice$get_one_based_matrix()  # Find how if the gene is present in this dataset is_present <- presence_matrix_slice[, , drop = TRUE] cat(paste(\"Feature is\", if (is_present) \"present.\" else \"not present.\")) #> Feature is present."},{"path":"/articles/census_dataset_presence.html","id":"identifying-datasets-that-measured-specific-genes","dir":"Articles","previous_headings":"","what":"Identifying datasets that measured specific genes","title":"Genes measured in each cell (dataset presence matrix)","text":"Similarly, can determine datasets measured specific gene set genes.","code":"# Grab the feature's soma_joinid from the var dataframe var_joinid <- var_df$soma_joinid[var_df$feature_id == \"ENSG00000286096\"]  # The presence matrix is indexed by the joinids of the dataset and var dataframes, # so slice out the feature of interest by its joinid. presence_matrix_slice <- presence_matrix$take(j = var_joinid)$get_one_based_matrix() measured_datasets <- presence_matrix_slice[, , drop = TRUE] != 0 dataset_joinids <- datasets_df$soma_joinid[measured_datasets]  # From the datasets dataframe, slice out the datasets which have a joinid in the list print(datasets_df[dataset_joinids, ]) #>     soma_joinid #> 264         263 #> 272         271 #> 299         298 #> 302         301 #> 316         315 #> 335         334 #> 350         349 #> 352         351 #> 353         352 #> 367         366 #>                                                                                                                                                                                                                                                                                                           citation #> 264  Publication: https://doi.org/10.1038/s41586-020-2496-1 Dataset Version: https://datasets.cellxgene.cziscience.com/a87a3135-3ce7-405e-bc07-b7eac2c09cc6.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/0b9d8a04-bb9d-44da-aa27-705bb65b54eb #> 272 Publication: https://doi.org/10.1016/j.cell.2021.12.018 Dataset Version: https://datasets.cellxgene.cziscience.com/80650a81-3bde-49cf-873b-548425184f7a.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/74e10dc4-cbb2-4605-a189-8a1cd8e44d8c #> 299  Publication: https://doi.org/10.1101/2023.05.08.539485 Dataset Version: https://datasets.cellxgene.cziscience.com/5097433f-5cf0-4a5e-b252-b9f012e76d46.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/1ca90a2d-2943-483d-b678-b809bf464c30 #> 302  Publication: https://doi.org/10.1101/2023.05.08.539485 Dataset Version: https://datasets.cellxgene.cziscience.com/d8df87f4-279a-4e85-a192-b3fe0df3143e.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/1ca90a2d-2943-483d-b678-b809bf464c30 #> 316 Publication: https://doi.org/10.1016/j.cell.2020.08.013 Dataset Version: https://datasets.cellxgene.cziscience.com/74a8e0fe-08ee-4a93-9c2f-9cb70acd714b.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/2f4c738f-e2f3-4553-9db2-0582a38ea4dc #> 335 Publication: https://doi.org/10.1016/j.cell.2021.07.023 Dataset Version: https://datasets.cellxgene.cziscience.com/837efefb-05c5-4dfc-9e02-17842c1880f2.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/35d0b748-3eed-43a5-a1c4-1dade5ec5ca0 #> 350  Publication: https://doi.org/10.1038/s41586-020-2797-4 Dataset Version: https://datasets.cellxgene.cziscience.com/0f5dba64-8621-420f-a404-2f6836cbe1ce.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/b52eb423-5d0d-4645-b217-e1c6d38b2e72 #> 352  Publication: https://doi.org/10.1038/s41586-020-2496-1 Dataset Version: https://datasets.cellxgene.cziscience.com/1bd1f7fb-5efe-4886-abc5-aa08bf218a83.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/0b9d8a04-bb9d-44da-aa27-705bb65b54eb #> 353    Publication: https://doi.org/10.1126/science.add7046 Dataset Version: https://datasets.cellxgene.cziscience.com/fb6148b1-20ab-4e0e-bb6d-e5d8bb2147f2.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/283d65eb-dd53-496d-adb7-7570c7caa443 #> 367    Publication: https://doi.org/10.1126/science.add7046 Dataset Version: https://datasets.cellxgene.cziscience.com/628158bf-037c-4198-8e4e-b97e2675506b.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/283d65eb-dd53-496d-adb7-7570c7caa443 #>                            collection_id #> 264 0b9d8a04-bb9d-44da-aa27-705bb65b54eb #> 272 74e10dc4-cbb2-4605-a189-8a1cd8e44d8c #> 299 1ca90a2d-2943-483d-b678-b809bf464c30 #> 302 1ca90a2d-2943-483d-b678-b809bf464c30 #> 316 2f4c738f-e2f3-4553-9db2-0582a38ea4dc #> 335 35d0b748-3eed-43a5-a1c4-1dade5ec5ca0 #> 350 b52eb423-5d0d-4645-b217-e1c6d38b2e72 #> 352 0b9d8a04-bb9d-44da-aa27-705bb65b54eb #> 353 283d65eb-dd53-496d-adb7-7570c7caa443 #> 367 283d65eb-dd53-496d-adb7-7570c7caa443 #>                                                                                    collection_name #> 264                                                                             Tabula Muris Senis #> 272 Spatial proteogenomics reveals distinct and evolutionarily conserved hepatic macrophage niches #> 299                                    SEA-AD: Seattle Alzheimer<U+2019>s Disease Brain Cell Atlas #> 302                                    SEA-AD: Seattle Alzheimer<U+2019>s Disease Brain Cell Atlas #> 316                     Cell Types of the Human Retina and Its Organoids at Single-Cell Resolution #> 335                   Impaired local intrinsic immunity to SARS-CoV-2 infection in severe COVID-19 #> 350                                                                 Cells of the adult human heart #> 352                                                                             Tabula Muris Senis #> 353                                                                    Human Brain Cell Atlas v1.0 #> 367                                                                    Human Brain Cell Atlas v1.0 #>                 collection_doi                           dataset_id #> 264  10.1038/s41586-020-2496-1 93966790-bbfa-420f-aa85-bc5ca51d9c96 #> 272 10.1016/j.cell.2021.12.018 d1cbed97-d88f-4954-8925-13302fe30b39 #> 299  10.1101/2023.05.08.539485 f67f2cfa-ba45-4f77-8e26-64a15f666043 #> 302  10.1101/2023.05.08.539485 8c6ed88f-11bf-4159-bad7-ff41fb1e1eca #> 316 10.1016/j.cell.2020.08.013 babbf9f3-f482-45a5-ba76-c41f4c2f503e #> 335 10.1016/j.cell.2021.07.023 13b61a7d-5605-4948-ba48-02c588960143 #> 350  10.1038/s41586-020-2797-4 9d584fcb-a28a-4b91-a886-ceb66a88ef81 #> 352  10.1038/s41586-020-2496-1 0fb7916e-7a68-4a4c-a441-3ab3989f29a7 #> 353    10.1126/science.add7046 93131426-0124-4ab4-a013-9dfbcd99d467 #> 367    10.1126/science.add7046 7d3ab174-e433-40fc-a352-6fe71b1a19f9 #>                       dataset_version_id #> 264 a87a3135-3ce7-405e-bc07-b7eac2c09cc6 #> 272 80650a81-3bde-49cf-873b-548425184f7a #> 299 5097433f-5cf0-4a5e-b252-b9f012e76d46 #> 302 d8df87f4-279a-4e85-a192-b3fe0df3143e #> 316 74a8e0fe-08ee-4a93-9c2f-9cb70acd714b #> 335 837efefb-05c5-4dfc-9e02-17842c1880f2 #> 350 0f5dba64-8621-420f-a404-2f6836cbe1ce #> 352 1bd1f7fb-5efe-4886-abc5-aa08bf218a83 #> 353 fb6148b1-20ab-4e0e-bb6d-e5d8bb2147f2 #> 367 628158bf-037c-4198-8e4e-b97e2675506b #>                                                                                          dataset_title #> 264 Bladder lumen - A single-cell transcriptomic atlas characterizes ageing tissues in the mouse - 10x #> 272                                                       CD45 negative cells from human liver dataset #> 299                                             Pax6 - MTG: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 302                                       Chandelier - MTG: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 316                 Fovea - Cell Types of the Human Retina and Its Organoids at Single-Cell Resolution #> 335                                                                                        Nasopharynx #> 350                                                Fibroblasts <U+2014> Cells of the adult human heart #> 352          Lung - A single-cell transcriptomic atlas characterizes ageing tissues in the mouse - 10x #> 353                                                                      Dissection: Epithalamus - ETH #> 367      Dissection: Amygdaloid complex (AMY) - Basolateral nuclear group (BLN) - lateral nucleus - La #>                             dataset_h5ad_path dataset_total_cell_count #> 264 93966790-bbfa-420f-aa85-bc5ca51d9c96.h5ad                     8945 #> 272 d1cbed97-d88f-4954-8925-13302fe30b39.h5ad                    15481 #> 299 f67f2cfa-ba45-4f77-8e26-64a15f666043.h5ad                     8463 #> 302 8c6ed88f-11bf-4159-bad7-ff41fb1e1eca.h5ad                     9893 #> 316 babbf9f3-f482-45a5-ba76-c41f4c2f503e.h5ad                    19768 #> 335 13b61a7d-5605-4948-ba48-02c588960143.h5ad                    32588 #> 350 9d584fcb-a28a-4b91-a886-ceb66a88ef81.h5ad                    59341 #> 352 0fb7916e-7a68-4a4c-a441-3ab3989f29a7.h5ad                    24540 #> 353 93131426-0124-4ab4-a013-9dfbcd99d467.h5ad                    24327 #> 367 7d3ab174-e433-40fc-a352-6fe71b1a19f9.h5ad                    28984 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 32 rows ]"},{"path":"/articles/census_dataset_presence.html","id":"identifying-all-genes-measured-in-a-dataset","dir":"Articles","previous_headings":"","what":"Identifying all genes measured in a dataset","title":"Genes measured in each cell (dataset presence matrix)","text":"Finally, can find set genes measured cells given dataset.","code":"# Slice the dataset(s) of interest, and get the joinid(s) dataset_joinids <- datasets_df$soma_joinid[datasets_df$collection_id == \"17481d16-ee44-49e5-bcf0-28c0780d8c4a\"]  # Slice the presence matrix by the first dimension, i.e., by dataset presence_matrix_slice <- presence_matrix$take(i = dataset_joinids)$get_one_based_matrix() genes_measured <- Matrix::colSums(presence_matrix_slice) > 0 var_joinids <- var_df$soma_joinid[genes_measured]  print(var_df[var_joinids, ]) #>    soma_joinid      feature_id feature_name feature_length      nnz n_measured_obs #> 1            0 ENSG00000000003       TSPAN6           4530  4530448       73855064 #> 2            1 ENSG00000000005         TNMD           1476   236059       61201828 #> 3            2 ENSG00000000419         DPM1           9276 17576462       74159149 #> 4            3 ENSG00000000457        SCYL3           6883  9117322       73988868 #> 5            4 ENSG00000000460     C1orf112           5970  6287794       73636201 #> 6            5 ENSG00000000938          FGR           3382  5667858       74061500 #> 7            6 ENSG00000000971          CFH          15284  4423029       74095467 #> 8            7 ENSG00000001036        FUCA2           2822 10129388       73988868 #> 9            8 ENSG00000001084         GCLC           8618 12662710       74226365 #> 10           9 ENSG00000001167         NFYA           6209  4866873       73988868 #> 11          10 ENSG00000001460        STPG1           8511  6138613       74132995 #> 12          11 ENSG00000001461       NIPAL3           9396 13079400       74197924 #> 13          12 ENSG00000001497        LAS1L          12555 10716777       73858963 #> 14          13 ENSG00000001561        ENPP4           4644  9509567       74091113 #> 15          14 ENSG00000001617       SEMA3F           4826  2055855       72941475 #> 16          15 ENSG00000001626         CFTR          16821  5419122       71475983 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 27130 rows ]"},{"path":"/articles/census_dataset_presence.html","id":"close-the-census","dir":"Articles","previous_headings":"Identifying all genes measured in a dataset","what":"Close the census","title":"Genes measured in each cell (dataset presence matrix)","text":"use, census object closed release memory resources. also closes SOMA objects accessed via top-level census. Closing can automated using .exit(census$close(), add = TRUE) immediately census <- open_soma().","code":"census$close()"},{"path":"/articles/census_datasets.html","id":"fetching-the-datasets-table","dir":"Articles","previous_headings":"","what":"Fetching the datasets table","title":"Census Datasets example","text":"Census contains top-level data frame itemizing datasets contained therein. can read SOMADataFrame Arrow Table: R data frame: sum cell counts across datasets match number cells across SOMA experiments (human, mouse).","code":"library(\"cellxgene.census\") census <- open_soma() census_datasets <- census$get(\"census_info\")$get(\"datasets\")$read()$concat() print(census_datasets) #> Table #> 812 rows x 10 columns #> $soma_joinid <int64 not null> #> $citation <large_string not null> #> $collection_id <large_string not null> #> $collection_name <large_string not null> #> $collection_doi <large_string not null> #> $dataset_id <large_string not null> #> $dataset_version_id <large_string not null> #> $dataset_title <large_string not null> #> $dataset_h5ad_path <large_string not null> #> $dataset_total_cell_count <int64 not null> census_datasets <- as.data.frame(census_datasets) print(census_datasets[, c(   \"dataset_id\",   \"dataset_title\",   \"dataset_total_cell_count\" )]) #>                              dataset_id #> 1  0895c838-e550-48a3-a777-dbcd35d30272 #> 2  00ff600e-6e2e-4d76-846f-0eec4f0ae417 #> 3  bdacc907-7c26-419f-8808-969eab3ca2e8 #> 4  a5d95a42-0137-496f-8a60-101e17f263c8 #> 5  d3566d6a-a455-4a15-980f-45eb29114cab #> 6  de17ac25-550a-4018-be75-bbb485a0636e #> 7  9f1049ac-f8b7-45ad-8e31-6e96c3e5058f #> 8  703f00e6-b996-48e5-bc34-00c41b9876f4 #> 9  e347396c-a7ff-4691-9f7a-99a43555ca18 #> 10 524e045e-e74c-4e00-9884-d5c3bef3d862 #> 11 a49d9109-1d0c-4b36-8139-19aa9a83428c #> 12 0c9a8cfb-6649-4d52-b418-6d8e56bd7afe #> 13 06b91002-4d3d-4d2e-8484-20c3b31e232c #> 14 4993d61c-1d04-4630-9c61-8d9431f39adc #> 15 b94e3bdf-a385-49cc-b312-7a63cc28b77a #> 16 df287f8d-f50d-4620-ab96-489d559e6adc #> 17 eec804b9-2ae5-44f0-a1b5-d721e21257de #> 18 f9ad5649-f372-43e1-a3a8-423383e5a8a2 #> 19 a810e511-c18b-4b2a-8fdf-98a6a0d433a7 #> 20 ea426edb-4e86-4c53-ab17-5b952d94a31e #> 21 04d87de6-c20a-4186-8884-f47dba20b0a4 #> 22 b25f3834-69b3-4d87-a272-3938432d1f30 #> 23 94423ec1-21f8-40e8-b5c9-c3ea82350ca4 #> 24 2f6a20f1-173d-4b8d-860b-c47ffea120fa #> 25 da684768-fb01-455b-9f0f-b63a3e2f844f #> 26 a65bcc2d-4243-44c1-a262-ab7dcddfcf86 #> 27 75a881cf-5d88-46e2-bf9b-97e5cbc1bd56 #> 28 0c86f0de-ddcb-454c-b00b-37feb69e7da1 #> 29 9f049476-2431-4645-a2d6-f6e85892b603 #> 30 0380ddce-c31b-422a-88fe-34a1945bd949 #> 31 1009f384-b12d-448e-ba9f-1b7d2ecfbb4e #> 32 3b6ed41e-10a1-47dd-b995-8cde7d041fd6 #> 33 e763ed0d-0e5a-4b8e-9514-6da3d9e47956 #> 34 d95ab381-2b7c-4885-b168-0097ed4e397f #> 35 b3a5a10f-b1cb-4e8e-abce-bf345448625b #> 36 e5f5d954-cf0e-4bd8-9346-8d1ddf15a08b #> 37 62de80d7-e6c4-4ff0-ad4c-d3d36f57cb93 #> 38 9cfee1e6-b24f-433d-a269-f01841655d6a #> 39 4269074c-f2c1-4d88-b2c3-0946f59d5449 #> 40 7d98cc44-b090-4dc8-804f-2750c84fe9d7 #> 41 c3d381b2-3104-444e-8ad5-d3524407bbb6 #> 42 66d15835-5dc8-4e96-b0eb-f48971cb65e8 #> 43 8a554710-08bc-4005-87cd-da9675bdc2e7 #> 44 ce009dc1-ac57-4386-b72f-5c575701c253 #> 45 dbf0bd35-87f8-4b25-bc90-a3c54f379907 #> 46 6de332e1-465e-4243-9412-6fdc7497e99d #> 47 faed4f71-6b50-4fc7-bd1c-8f385dccfdce #> 48 c8f83821-a242-4ed7-86e9-7da077f5d348 #> 49 731e6380-879f-4b0b-9a1f-2150208852ef #> 50 774c18c5-efa1-4dc5-9e5e-2c824bab2e34 #> 51 ea786a06-5855-48b7-80d7-0313a21a2044 #> 52 524179b0-b406-4723-9c46-293ffa77ca81 #> 53 cbd62079-bed8-4aa1-9659-670f9cb51f9d #> 54 3e87b1fa-472a-401c-8fa8-f31c10437d5f #> 55 f16f4108-7873-4035-9989-3748da1a7ff1 #> 56 58679288-9ecc-4647-9781-12a3a8f8c6fd #> 57 cdefb878-7f00-4b9d-9eda-b3652cfac0c8 #> 58 1492eb6b-7d50-4c4d-94ac-c801a7d5555c #> 59 bdf69f8d-5a96-4d6f-a9f5-9ee0e33597b7 #> 60 ee195b7d-184d-4dfa-9b1c-51a7e601ac11 #> 61 9b188f26-c8e1-4a78-af15-622a35a371fc #> 62 f6dafdd1-d746-407e-8019-4470e02d4cbd #> 63 24066994-8183-488d-b037-ef6bb524af39 #> 64 84242d25-f656-4ca6-8e8d-f3d2beeba11f #> 65 8f1bc86b-7976-4826-8602-f5266160ad86 #> 66 2fc9c59f-3cfd-48d9-9b23-e369ea31bff3 #> 67 470565f2-5afc-456a-b617-18e4496c04fd #> 68 4c6f9f26-5470-455b-8933-c408232fbf56 #> 69 b07e5164-baf6-43d2-bdba-5a249d0da879 #> 70 bf176af2-4432-4391-9b35-e21bd86ca4f8 #> 71 7b3368a5-c1a0-4973-9e75-d95b4150c7da #> 72 f75f2ff4-2884-4c2d-b375-70de37a34507 #> 73 2ecc72f8-085f-4e86-8692-771f316c54f6 #> 74 cec9f9a5-8832-437d-99af-fb8237cde54b #> 75 de4e7a0c-91b2-44e4-b382-87da74c9efb6 #> 76 20d87640-4be8-487f-93d4-dce38378d00f #> 77 81e91ff8-f619-4ad1-a0c3-b45e1dc63f68 #> 78 03d5794d-cde9-4769-a1a9-b3899d2b1d87 #> 79 e2529f66-d051-4670-b34a-7dca4e474f9f #> 80 dc30c3ec-46d6-4cd8-8ec1-b544a3d0f503 #> 81 389b1fd4-2b65-4f60-baba-feeb17507665 #> 82 cd77258f-b08b-4c89-b93f-6e6f146b1a4d #> 83 04b0eb97-d816-44bb-93a5-8b2968791aa0 #> 84 51f476f7-b24d-42f3-8871-7dab3fa35e96 #> 85 6dafb698-7a53-4699-ad13-1b5e2c164be7 #>                                                                                                                           dataset_title #> 1                                                                                                          Healthy human liver: B cells #> 2                                                                                                  Human tonsil nonlymphoid cells scRNA #> 3                             Molecular characterization of selectively vulnerable neurons in Alzheimer<U+2019>s Disease: SFG microglia #> 4                                                                                                      Steady-state B cells - scRNA-seq #> 5                                                                                      blood and bone marrow from a healthy young donor #> 6                                                                                                            Myeloid cells of human eye #> 7                              Molecular characterization of selectively vulnerable neurons in Alzheimer<U+2019>s Disease: EC microglia #> 8                                                                                                                                   PNS #> 9                                                                                 Stellate cells from human healthy donor liver samples #> 10                                                                                          Healthy human liver: hepatic stellate cells #> 11                                                                                                     Healthy human liver: lymphocytes #> 12                                                                                Cholangiocytes from human healthy donor liver samples #> 13                            Molecular characterization of selectively vulnerable neurons in Alzheimer<U+2019>s Disease: EC astrocytes #> 14                                                                                       B cells from human healthy donor liver samples #> 15                           Molecular characterization of selectively vulnerable neurons in Alzheimer<U+2019>s Disease: SFG astrocytes #> 16             Urethral luminal epithelia are castration-insensitive cells of the proximal prostate - Human Fibromuscular Stromal Cells #> 17                                                                           74 years old female - Airway Wash (5 days post-intubation) #> 18                       Molecular characterization of selectively vulnerable neurons in Alzheimer<U+2019>s Disease: EC oligodendrocyte #> 19             Urethral luminal epithelia are castration-insensitive cells of the proximal prostate - Mouse Fibromuscular Stromal Cells #> 20                      A Cellular Anatomy of the Normal Adult Human Prostate and Prostatic Urethra - Human Fibromuscular Stromal Cells #> 21                                                         A single-cell and spatially-resolved atlas of human breast cancers - B_cells #> 22                                                                            82 years old female - Airway Wash (1 day post-intubation) #> 23                                                                                                                UMAP of Myeloid cells #> 24                                                                            Horizontal cells of the human fovea and peripheral retina #> 25                                                                                         UMAP visualization of fibroblast subclusters #> 26                                                                           74 years old female - Airway Wash (7 days post-intubation) #> 27                    Molecular characterization of selectively vulnerable neurons in Alzheimer<U+2019>s Disease: EC inhibitory neurons #> 28                                                    A single-cell and spatially-resolved atlas of human breast cancers - Plasmablasts #> 29                                                                                                  Healthy human liver: cholangiocytes #> 30                                          Aorta <U+2014> A single-cell transcriptomic atlas characterizes ageing tissues in the mouse #> 31                                                                                     Neuronal <U+2014> Cells of the adult human heart #> 32                                                                                                     Healthy human liver: macrophages #> 33                           Platelet sub_clusters of COVID-19 Immune Altas: Integration of 5 public COVID-19 PBMC single-cell datasets #> 34                                                                                                              Cone cells of human eye #> 35                                                                                                       15 leukemic bone marrow donors #> 36                                                                             49 years old male - Airway Wash (3 days post-intubation) #> 37                                                                           66 years old female - Airway Wash (4 days post-intubation) #> 38                                                                                        Retinal pigment epithelial cells of human eye #> 39                                            Spatiotemporal analysis of human intestinal development at single-cell resolution: Immune #> 40                                                                              49 years old male - Airway Wash (1 day post-intubation) #> 41                                                                                                        Horizontal cells of human eye #> 42       Single cell transcriptome analysis of human pancreas reveals transcriptional signatures of aging and somatic mutation patterns #> 43                                                                            82 years old female - Fresh PBMCs (1 day post-intubation) #> 44                                                                           74 years old female - Airway Wash (6 days post-intubation) #> 45                                                                           66 years old female - Airway Wash (3 days post-intubation) #> 46                                                                                                           e12.5 thalamic progenitors #> 47                                                                                                            UMAP of Endothelial cells #> 48                                                                                                            white matter - astrocytes #> 49                                                                           74 years old female - Airway Wash (8 days post-intubation) #> 50                                                                                     Infiltrating Neoplastic Cells Human Glioblastoma #> 51                                                                           66 years old female - Fresh PBMCs (3 days post-intubation) #> 52                                   Kidney - A single-cell transcriptomic atlas characterizes ageing tissues in the mouse - Smart-seq2 #> 53                                      Diaphragm <U+2014> A single-cell transcriptomic atlas characterizes ageing tissues in the mouse #> 54                                                                        Endothelial - MTG: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 55                                                                                    Supercluster: Committed oligodendrocyte precursor #> 56                    Spatiotemporal analysis of human intestinal development at single-cell resolution: Myofibroblasts and Mesothelium #> 57                                                                                                                               Cilium #> 58                   Molecular characterization of selectively vulnerable neurons in Alzheimer<U+2019>s Disease: SFG inhibitory neurons #> 59                                                                                                 DCM/ACM heart cell atlas: Adipocytes #> 60                                                                                                                       Adult duodenum #> 61                                                                                                            UMAP of Fibroblasts cells #> 62                                                                                                                              B cells #> 63                      Molecular characterization of selectively vulnerable neurons in Alzheimer<U+2019>s Disease: SFG oligodendrocyte #> 64                                                                                                             white matter - microglia #> 65                           Brown adipose tissue <U+2014> A single-cell transcriptomic atlas characterizes ageing tissues in the mouse #> 66                                                                                             Mature kidney dataset: non PT parenchyma #> 67                                                                                         Dissection: Midbrain (RN) - Red Nucleus - RN #> 68 chRCC - Single-cell analyses of renal cell cancers reveal insights into tumor microenvironment, cell of origin, and therapy response #> 69                                                                              A Single-Cell Transcriptome Atlas of the Human Pancreas #> 70                                                                              Healthy human liver: liver sinusoidal endothelial cells #> 71                                                                                                                              B cells #> 72                                                                                   Adipocytes <U+2014> Cells of the adult human heart #> 73                                                                      Endothelial - DLPFC: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 74                                                                                                  Retinal ganglion cells of human eye #> 75                          Large intestine - A single-cell transcriptomic atlas characterizes ageing tissues in the mouse - Smart-seq2 #> 76                                                                                                        Mature kidney dataset: immune #> 77                                                                          Sst Chodl - MTG: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 78                                                                                                     UMAP of Plasma and B-Cells cells #> 79                                                             A Single-Cell Atlas of Mouse White Adipose Tissue - Mouse vascular cells #> 80                                                                                                               Oligodendrocytes in MS #> 81                                                                                                                          vasculature #> 82                    Molecular characterization of selectively vulnerable neurons in Alzheimer<U+2019>s Disease: EC excitatory neurons #> 83                                         Spatiotemporal analysis of human intestinal development at single-cell resolution: Pericytes #> 84                                                                           74 years old female - Airway Wash (4 days post-intubation) #> 85                                                                                                              Supercluster: Ependymal #>    dataset_total_cell_count #> 1                       146 #> 2                       363 #> 3                      3799 #> 4                      1324 #> 5                     15502 #> 6                       395 #> 7                      5572 #> 8                       649 #> 9                      1417 #> 10                     1374 #> 11                     2346 #> 12                     1011 #> 13                     5500 #> 14                     1250 #> 15                     5970 #> 16                     1295 #> 17                     1324 #> 18                     8168 #> 19                     1647 #> 20                     2113 #> 21                     3206 #> 22                     1074 #> 23                     3282 #> 24                     2868 #> 25                     2303 #> 26                      810 #> 27                     5331 #> 28                     3524 #> 29                     1861 #> 30                      906 #> 31                     3961 #> 32                     3977 #> 33                     7274 #> 34                     1378 #> 35                    31586 #> 36                     2487 #> 37                     2598 #> 38                     1635 #> 39                     2199 #> 40                     2489 #> 41                     1875 #> 42                     2544 #> 43                     4232 #> 44                     2834 #> 45                     3434 #> 46                     1789 #> 47                     3951 #> 48                     3596 #> 49                     2065 #> 50                     3589 #> 51                     4792 #> 52                     1833 #> 53                     1858 #> 54                     1973 #> 55                     4720 #> 56                     2833 #> 57                     1641 #> 58                     7506 #> 59                     2576 #> 60                     5200 #> 61                     5754 #> 62                     3699 #> 63                    15772 #> 64                     3851 #> 65                     2223 #> 66                     4620 #> 67                     4714 #> 68                     2576 #> 69                     2126 #> 70                     6289 #> 71                     4138 #> 72                     3799 #> 73                     2496 #> 74                     1777 #> 75                     1887 #> 76                     7803 #> 77                     1310 #> 78                     9015 #> 79                     7632 #> 80                    17799 #> 81                      959 #> 82                     8362 #> 83                     4163 #> 84                     4147 #> 85                     5882 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 727 rows ] census_data <- census$get(\"census_data\") all_experiments <- lapply(census_data$to_list(), function(x) census_data$get(x$name)) print(all_experiments) #> $homo_sapiens #> <SOMAExperiment> #>   uri: s3://cellxgene-census-public-us-west-2/cell-census/2024-07-01/soma/census_data/homo_sapiens  #>   arrays: obs*  #>   groups: ms*  #>  #> $mus_musculus #> <SOMAExperiment> #>   uri: s3://cellxgene-census-public-us-west-2/cell-census/2024-07-01/soma/census_data/mus_musculus  #>   arrays: obs*  #>   groups: ms* experiments_total_cells <- sum(sapply(all_experiments, function(x) {   nrow(x$obs$read(column_names = c(\"soma_joinid\"))$concat()) }))  print(paste(\"Found\", experiments_total_cells, \"cells in all experiments.\")) #> [1] \"Found 115556140 cells in all experiments.\" print(paste(   \"Found\", sum(as.vector(census_datasets$dataset_total_cell_count)),   \"cells in all datasets.\" )) #> [1] \"Found 115556140 cells in all datasets.\""},{"path":"/articles/census_datasets.html","id":"fetching-the-expression-data-from-a-single-dataset","dir":"Articles","previous_headings":"","what":"Fetching the expression data from a single dataset","title":"Census Datasets example","text":"Let’s pick one dataset slice census, turn Seurat -memory object. (requires Seurat package installed beforehand.) Create query mouse experiment, “RNA” measurement, dataset_id.","code":"census_datasets[census_datasets$dataset_id == \"0bd1a1de-3aee-40e0-b2ec-86c7a30c7149\", ] #>     soma_joinid #> 514         513 #>                                                                                                                                                                                                                                                                                                          citation #> 514 Publication: https://doi.org/10.1038/s41586-020-2496-1 Dataset Version: https://datasets.cellxgene.cziscience.com/64d581c0-2683-44f4-b65b-019e679a33e8.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/0b9d8a04-bb9d-44da-aa27-705bb65b54eb #>                            collection_id    collection_name            collection_doi #> 514 0b9d8a04-bb9d-44da-aa27-705bb65b54eb Tabula Muris Senis 10.1038/s41586-020-2496-1 #>                               dataset_id                   dataset_version_id #> 514 0bd1a1de-3aee-40e0-b2ec-86c7a30c7149 64d581c0-2683-44f4-b65b-019e679a33e8 #>                                                                                        dataset_title #> 514 Bone marrow - A single-cell transcriptomic atlas characterizes ageing tissues in the mouse - 10x #>                             dataset_h5ad_path dataset_total_cell_count #> 514 0bd1a1de-3aee-40e0-b2ec-86c7a30c7149.h5ad                    40220 library(\"tiledbsoma\") obs_query <- SOMAAxisQuery$new(   value_filter = \"dataset_id == '0bd1a1de-3aee-40e0-b2ec-86c7a30c7149'\" ) expt_query <- census_data$get(\"mus_musculus\")$axis_query(   measurement_name = \"RNA\",   obs_query = obs_query ) dataset_seurat <- expt_query$to_seurat(c(counts = \"raw\")) print(dataset_seurat) #> An object of class Seurat  #> 52437 features across 40220 samples within 1 assay  #> Active assay: RNA (52437 features, 0 variable features) #>  2 layers present: counts, data"},{"path":"/articles/census_datasets.html","id":"downloading-the-original-source-h5ad-file-of-a-dataset","dir":"Articles","previous_headings":"","what":"Downloading the original source H5AD file of a dataset","title":"Census Datasets example","text":"can use cellxgene.census::get_source_h5ad_uri() API fetch URI pointing H5AD associated dataset_id. H5AD can download CZ CELLxGENE Discover, may contain additional data-submitter provided information included Census. can fetch location cloud directly download system. local H5AD file can used R using SeuratDisk’s anndata converter.","code":"# Option 1: Direct download download_source_h5ad(   dataset_id = \"0bd1a1de-3aee-40e0-b2ec-86c7a30c7149\",   file = \"/tmp/Tabula_Muris_Senis-bone_marrow.h5ad\",   overwrite = TRUE ) # Option 2: Get location and download via preferred method get_source_h5ad_uri(\"0bd1a1de-3aee-40e0-b2ec-86c7a30c7149\") #> $uri #> [1] \"s3://cellxgene-census-public-us-west-2/cell-census/2024-07-01/h5ads/0bd1a1de-3aee-40e0-b2ec-86c7a30c7149.h5ad\" #>  #> $s3_region #> [1] \"us-west-2\""},{"path":"/articles/census_datasets.html","id":"close-the-census","dir":"Articles","previous_headings":"Downloading the original source H5AD file of a dataset","what":"Close the census","title":"Census Datasets example","text":"use, census object closed release memory resources. also closes SOMA objects accessed via top-level census. Closing can automated using .exit(census$close(), add = TRUE) immediately census <- open_soma().","code":"census$close()"},{"path":"/articles/census_query_extract.html","id":"opening-the-census","dir":"Articles","previous_headings":"","what":"Opening the census","title":"Querying and fetching the single-cell data and cell/gene metadata","text":"cellxgene.census R package contains convenient API open version Census (default, newest stable version). can learn cellxgene.census methods accessing corresponding documentation, example ?cellxgene.census::open_soma.","code":"library(\"cellxgene.census\") census <- open_soma()"},{"path":"/articles/census_query_extract.html","id":"querying-cell-metadata-obs","dir":"Articles","previous_headings":"","what":"Querying cell metadata (obs)","title":"Querying and fetching the single-cell data and cell/gene metadata","text":"human gene metadata Census, RNA assays, located census$get(\"census_data\")$get(\"homo_sapiens\")$obs. SOMADataFrame can materialized R data frame (tibble) using .data.frame(obs$read()$concat()). mouse cell metadata census$get(\"census_data\")$get(\"mus_musculus\").obs. slicing cell metadata two relevant arguments can passed read(): column_names — character vector indicating metadata columns fetch. Expressions one comparisons Comparisons one <column> <op> <value> <column> <op> <column> Expressions can combine comparisons using && || op one < | > | <= | >= | == | != %% learn metadata columns available fetching filtering can directly look keys cell metadata. soma_joinid special SOMADataFrame column used join operations. definition columns can found Census schema. can used fetch specific columns specific rows matching condition. latter need know values looking priori. example let’s see possible values available sex. can load cell metadata fetching column sex. can see three different values sex, \"male\", \"female\" \"unknown\". information can fetch cell metatadata specific sex value, example \"unknown\". can use column_names value_filter perform specific queries. example let’s fetch disease column cell_type \"B cell\" tissue_general \"lung\".","code":"census$get(\"census_data\")$get(\"homo_sapiens\")$obs$colnames() #>  [1] \"soma_joinid\"                              #>  [2] \"dataset_id\"                               #>  [3] \"assay\"                                    #>  [4] \"assay_ontology_term_id\"                   #>  [5] \"cell_type\"                                #>  [6] \"cell_type_ontology_term_id\"               #>  [7] \"development_stage\"                        #>  [8] \"development_stage_ontology_term_id\"       #>  [9] \"disease\"                                  #> [10] \"disease_ontology_term_id\"                 #> [11] \"donor_id\"                                 #> [12] \"is_primary_data\"                          #> [13] \"observation_joinid\"                       #> [14] \"self_reported_ethnicity\"                  #> [15] \"self_reported_ethnicity_ontology_term_id\" #> [16] \"sex\"                                      #> [17] \"sex_ontology_term_id\"                     #> [18] \"suspension_type\"                          #> [19] \"tissue\"                                   #> [20] \"tissue_ontology_term_id\"                  #> [21] \"tissue_type\"                              #> [22] \"tissue_general\"                           #> [23] \"tissue_general_ontology_term_id\"          #> [24] \"raw_sum\"                                  #> [25] \"nnz\"                                      #> [26] \"raw_mean_nnz\"                             #> [27] \"raw_variance_nnz\"                         #> [28] \"n_measured_vars\" unique(as.data.frame(census$get(\"census_data\")$get(\"homo_sapiens\")$obs$read(column_names = \"sex\")$concat())) #>           sex #> 1      female #> 86       male #> 63810 unknown as.data.frame(census$get(\"census_data\")$get(\"homo_sapiens\")$obs$read(value_filter = \"sex == 'unknown'\")$concat()) #>   soma_joinid                           dataset_id     assay assay_ontology_term_id #> 1       63809 94423ec1-21f8-40e8-b5c9-c3ea82350ca4 10x 3' v2            EFO:0009899 #> 2       63825 94423ec1-21f8-40e8-b5c9-c3ea82350ca4 10x 3' v2            EFO:0009899 #> 3       63829 94423ec1-21f8-40e8-b5c9-c3ea82350ca4 10x 3' v2            EFO:0009899 #> 4       63842 94423ec1-21f8-40e8-b5c9-c3ea82350ca4 10x 3' v2            EFO:0009899 #> 5       63845 94423ec1-21f8-40e8-b5c9-c3ea82350ca4 10x 3' v2            EFO:0009899 #> 6       63848 94423ec1-21f8-40e8-b5c9-c3ea82350ca4 10x 3' v2            EFO:0009899 #> 7       63850 94423ec1-21f8-40e8-b5c9-c3ea82350ca4 10x 3' v2            EFO:0009899 #> 8       63859 94423ec1-21f8-40e8-b5c9-c3ea82350ca4 10x 3' v2            EFO:0009899 #> 9       63877 94423ec1-21f8-40e8-b5c9-c3ea82350ca4 10x 3' v2            EFO:0009899 #>        cell_type cell_type_ontology_term_id development_stage #> 1 dendritic cell                 CL:0000451           unknown #> 2       monocyte                 CL:0000576           unknown #> 3       monocyte                 CL:0000576           unknown #> 4      mast cell                 CL:0000097           unknown #> 5       monocyte                 CL:0000576           unknown #> 6       monocyte                 CL:0000576           unknown #> 7       monocyte                 CL:0000576           unknown #> 8       monocyte                 CL:0000576           unknown #> 9       monocyte                 CL:0000576           unknown #>   development_stage_ontology_term_id disease disease_ontology_term_id donor_id #> 1                            unknown  normal             PATO:0000461    P6709 #> 2                            unknown  normal             PATO:0000461    P6207 #> 3                            unknown  normal             PATO:0000461    P6709 #> 4                            unknown  normal             PATO:0000461    P5846 #> 5                            unknown  normal             PATO:0000461    P6709 #> 6                            unknown  normal             PATO:0000461    P6709 #> 7                            unknown  normal             PATO:0000461    P6709 #> 8                            unknown  normal             PATO:0000461    P6709 #> 9                            unknown  normal             PATO:0000461    P5846 #>   is_primary_data observation_joinid self_reported_ethnicity #> 1           FALSE         C?ICmL<&>Z                 unknown #> 2           FALSE         85i%LjfFIv                 unknown #> 3           FALSE         Ayapye-s;W                 unknown #> 4           FALSE         y?m!gJTm_}                 unknown #> 5           FALSE         ;%L|gB$19h                 unknown #> 6           FALSE         W6Gv)*|fO&                 unknown #> 7           FALSE         C_4WKgszOh                 unknown #> 8           FALSE         z`}uhAE2vd                 unknown #> 9           FALSE         vt{WkZp)ha                 unknown #>   self_reported_ethnicity_ontology_term_id     sex sex_ontology_term_id suspension_type #> 1                                  unknown unknown              unknown            cell #> 2                                  unknown unknown              unknown            cell #> 3                                  unknown unknown              unknown            cell #> 4                                  unknown unknown              unknown            cell #> 5                                  unknown unknown              unknown            cell #> 6                                  unknown unknown              unknown            cell #> 7                                  unknown unknown              unknown            cell #> 8                                  unknown unknown              unknown            cell #> 9                                  unknown unknown              unknown            cell #>            tissue tissue_ontology_term_id tissue_type tissue_general #> 1 body of stomach          UBERON:0001161      tissue        stomach #> 2 body of stomach          UBERON:0001161      tissue        stomach #> 3 body of stomach          UBERON:0001161      tissue        stomach #> 4 body of stomach          UBERON:0001161      tissue        stomach #> 5 body of stomach          UBERON:0001161      tissue        stomach #> 6 body of stomach          UBERON:0001161      tissue        stomach #> 7 body of stomach          UBERON:0001161      tissue        stomach #> 8 body of stomach          UBERON:0001161      tissue        stomach #> 9 body of stomach          UBERON:0001161      tissue        stomach #>   tissue_general_ontology_term_id raw_sum  nnz raw_mean_nnz raw_variance_nnz #> 1                  UBERON:0000945     695  368     1.888587         12.14287 #> 2                  UBERON:0000945    6095 1427     4.271198        124.79807 #> 3                  UBERON:0000945    1045  492     2.123984         23.31861 #> 4                  UBERON:0000945    1546  640     2.415625         27.82386 #> 5                  UBERON:0000945    1308  530     2.467925         59.81466 #> 6                  UBERON:0000945     891  434     2.052995         16.80319 #> 7                  UBERON:0000945     847  399     2.122807         23.51503 #> 8                  UBERON:0000945     445  216     2.060185         55.25683 #> 9                  UBERON:0000945    1672  668     2.502994         15.53672 #>   n_measured_vars #> 1           19550 #> 2           19550 #> 3           19550 #> 4           19550 #> 5           19550 #> 6           19550 #> 7           19550 #> 8           19550 #> 9           19550 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 3756271 rows ] cell_metadata_b_cell <- census$get(\"census_data\")$get(\"homo_sapiens\")$obs$read(   value_filter = \"cell_type == 'B cell' & tissue_general == 'lung'\",   column_names = \"disease\" )  cell_metadata_b_cell <- as.data.frame(cell_metadata_b_cell$concat())  table(cell_metadata_b_cell) #> disease #>                                                        Alzheimer disease  #>                                                                        0  #>                                      B-cell acute lymphoblastic leukemia  #>                                                                        0  #>                                              B-cell non-Hodgkin lymphoma  #>                                                                        0  #>                                                        Barrett esophagus  #>                                                                        0  #>                                                                 COVID-19  #>                                                                     2729  #>                                                            Crohn disease  #>                                                                        0  #>                                                            Crohn ileitis  #>                                                                        0  #>                                                            Down syndrome  #>                                                                        0  #>                                                       Lewy body dementia  #>                                                                        0  #>                                                        Parkinson disease  #>                                                                        0  #>                                              Plasmodium malariae malaria  #>                                                                        0  #>                                                              Wilms tumor  #>                                                                        0  #>                                                     acute kidney failure  #>                                                                        0  #>                                                   acute myeloid leukemia  #>                                                                        0  #>                                              acute myocardial infarction  #>                                                                        0  #>                                             acute promyelocytic leukemia  #>                                                                        0  #>                                                           adenocarcinoma  #>                                                                        0  #>                                       age related macular degeneration 7  #>                                                                        0  #>                                            amyotrophic lateral sclerosis  #>                                                                        0  #> amyotrophic lateral sclerosis 26 with or without frontotemporal dementia  #>                                                                        0  #>                                                              anencephaly  #>                                                                       79  #>                          arrhythmogenic right ventricular cardiomyopathy  #>                                                                        0  #>                                                     aspiration pneumonia  #>                                                                        0  #>                                                     basal cell carcinoma  #>                                                                        0  #>                                                     basal laminar drusen  #>                                                                        0  #>                                             benign prostatic hyperplasia  #>                                                                        0  #>                                                                 blastoma  #>                                                                        0  #>                                                            breast cancer  #>                                                                        0  #>                                                         breast carcinoma  #>                                                                        0  #>                                                           cardiomyopathy  #>                                                                        0  #>                                                                 cataract  #>                                                                        0  #>                                         chromophobe renal cell carcinoma  #>                                                                        0  #>                                                   chronic kidney disease  #>                                                                        0  #>                                    chronic obstructive pulmonary disease  #>                                                                     6369  #>                                                         chronic rhinitis  #>                                                                        0  #>                                               clear cell renal carcinoma  #>                                                                        0  #>                                     colon sessile serrated adenoma/polyp  #>                                                                        0  #>                                                        colorectal cancer  #>                                                                        0  #>                                                      colorectal neoplasm  #>                                                                        0  #>                                         common variable immunodeficiency  #>                                                                        0  #>                                                 congenital heart disease  #>                                                                        0  #>                                                          cystic fibrosis  #>                                                                        0  #>                                                                 dementia  #>                                                                        0  #>                                                digestive system disorder  #>                                                                        0  #>                                                   dilated cardiomyopathy  #>                                                                        0  #>                                                                 epilepsy  #>                                                                        0  #>                                                      follicular lymphoma  #>                                                                        0  #>                                                  frontotemporal dementia  #>                                                                        0  #>                                                           gastric cancer  #>                                                                        0  #>                                            gastric intestinal metaplasia  #>                                                                        0  #>                                                                gastritis  #>                                                                        0  #>                                                               gingivitis  #>                                                                        0  #>                                                             glioblastoma  #>                                                                        0  #>                                                           heart disorder  #>                                                                        0  #>                                                            heart failure  #>                                                                        0  #>                                                             hydrosalpinx  #>                                                                        0  #>                                                       hyperplastic polyp  #>                                                                        0  #>                                             hypersensitivity pneumonitis  #>                                                                       52  #>                                                                influenza  #>                                                                        0  #>                                                                   injury  #>                                                                        0  #>                                                interstitial lung disease  #>                                                                      376  #>                                                                   keloid  #>                                                                        0  #>                                                   kidney benign neoplasm  #>                                                                        0  #>                                                        kidney oncocytoma  #>                                                                        0  #>                                                              listeriosis  #>                                                                        0  #>                                                    localized scleroderma  #>                                                                        0  #>                                                            long COVID-19  #>                                                                        0  #>                                               luminal A breast carcinoma  #>                                                                        0  #>                                               luminal B breast carcinoma  #>                                                                        0  #>                                                      lung adenocarcinoma  #>                                                                    62351  #>                                                lung large cell carcinoma  #>                                                                     1534  #>                                                 lymphangioleiomyomatosis  #>                                                                      133  #>                                                     macular degeneration  #>                                                                        0  #>                                            malignant pancreatic neoplasm  #>                                                                        0  #>                                                       multiple sclerosis  #>                                                                        0  #>                                                    myocardial infarction  #>                                                                        0  #>                                                 neuroendocrine carcinoma  #>                                                                        0  #>                                            non-compaction cardiomyopathy  #>                                                                        0  #>                                            non-small cell lung carcinoma  #>                                                                    17484  #>                                      non-specific interstitial pneumonia  #>                                                                      231  #>                                        nonpapillary renal cell carcinoma  #>                                                                        0  #>                                                                   normal  #>                                                                    25461  #>                                                        opiate dependence  #>                                                                        0  #>                                                            periodontitis  #>                                                                        0  #>                                                    pilocytic astrocytoma  #>                                                                        0  #>                                                      plasma cell myeloma  #>                                                                        0  #>                                                    pleomorphic carcinoma  #>                                                                     1210  #>                                                                pneumonia  #>                                                                       50  #>                                                   post-COVID-19 disorder  #>                                                                        0  #>                                premalignant hematological system disease  #>                                                                        0  #>                                              primary biliary cholangitis  #>                                                                        0  #>                                           primary sclerosing cholangitis  #>                                                                        0  #>                                                      pulmonary emphysema  #>                                                                     1512  #>                                                       pulmonary fibrosis  #>                                                                     6798  #>                                                    pulmonary sarcoidosis  #>                                                                        6  #>                                                      respiratory failure  #>                                                                        0  #>                                              respiratory system disorder  #>                                                                        0  #>                                                small cell lung carcinoma  #>                                                                      583  #>                                             squamous cell lung carcinoma  #>                                                                    11920  #>                                             systemic lupus erythematosus  #>                                                                        0  #>                                                   temporal lobe epilepsy  #>                                                                        0  #>                                                            tongue cancer  #>                                                                        0  #>                                                            toxoplasmosis  #>                                                                        0  #>                                         triple-negative breast carcinoma  #>                                                                        0  #>                                                               trisomy 18  #>                                                                        0  #>                                                          tubular adenoma  #>                                                                        0  #>                                                    tubulovillous adenoma  #>                                                                        0  #>                                                 type 1 diabetes mellitus  #>                                                                        0  #>                                                 type 2 diabetes mellitus  #>                                                                        0"},{"path":"/articles/census_query_extract.html","id":"querying-gene-metadata-var","dir":"Articles","previous_headings":"","what":"Querying gene metadata (var)","title":"Querying and fetching the single-cell data and cell/gene metadata","text":"human gene metadata Census located census$get(\"census_data\")$get(\"homo_sapiens\")$ms$get(\"RNA\")$var. Similarly cell metadata, SOMADataFrame thus can also use method read(). mouse gene metadata census$get(\"census_data\")$get(\"mus_musculus\")$ms$get(\"RNA\")$var. Let’s take look metadata available column selection row filtering. exception soma_joinid columns defined Census schema. Similarly cell metadata, can use operations learn fetch gene metadata. example, get feature_name feature_length genes \"ENSG00000161798\" \"ENSG00000188229\" can following.","code":"census$get(\"census_data\")$get(\"homo_sapiens\")$ms$get(\"RNA\")$var$colnames() #> [1] \"soma_joinid\"    \"feature_id\"     \"feature_name\"   \"feature_length\" \"nnz\"            #> [6] \"n_measured_obs\" var_df <- census$get(\"census_data\")$get(\"homo_sapiens\")$ms$get(\"RNA\")$var$read(   value_filter = \"feature_id %in% c('ENSG00000161798', 'ENSG00000188229')\",   column_names = c(\"feature_name\", \"feature_length\") )  as.data.frame(var_df$concat()) #>   feature_name feature_length #> 1         AQP5           1884 #> 2       TUBB4B           2037"},{"path":"/articles/census_query_extract.html","id":"querying-expression-data-as-seurat","dir":"Articles","previous_headings":"","what":"Querying expression data as Seurat","title":"Querying and fetching the single-cell data and cell/gene metadata","text":"convenient way query fetch expression data use get_seurat method cellxgene.census API. method combines column selection value filtering described obtain slices expression data based metadata queries. method return Seurat object, takes input census object, string organism, cell gene metadata can specify filters column selection described following arguments: obs_column_names — character vector indicating columns select cell metadata. obs_value_filter — expression selection conditions fetch cells meeting criteria. var_column_names — character vector indicating columns select gene metadata. var_value_filter — expression selection conditions fetch genes meeting criteria. example want fetch expression data : Genes \"ENSG00000161798\" \"ENSG00000188229\". \"B cells\" \"lung\" \"COVID-19\". gene metadata adding sex cell metadata. full description refer ?cellxgene.census::get_seurat.","code":"library(\"Seurat\")  seurat_obj <- get_seurat(   census, \"Homo sapiens\",   obs_column_names = c(\"cell_type\", \"tissue_general\", \"disease\", \"sex\"),   var_value_filter = \"feature_id %in% c('ENSG00000161798', 'ENSG00000188229')\",   obs_value_filter = \"cell_type == 'B cell' & tissue_general == 'lung' & disease == 'COVID-19'\" ) seurat_obj #> An object of class Seurat  #> 2 features across 2729 samples within 1 assay  #> Active assay: RNA (2 features, 0 variable features) #>  2 layers present: counts, data head(seurat_obj[[]]) #>                orig.ident cell_type tissue_general  disease  sex #> cell8964464 SeuratProject    B cell           lung COVID-19 male #> cell8964864 SeuratProject    B cell           lung COVID-19 male #> cell8965181 SeuratProject    B cell           lung COVID-19 male #> cell8965207 SeuratProject    B cell           lung COVID-19 male #> cell8965360 SeuratProject    B cell           lung COVID-19 male #> cell8965378 SeuratProject    B cell           lung COVID-19 male head(seurat_obj$RNA[[]]) #>                 feature_name feature_length      nnz n_measured_obs #> ENSG00000161798         AQP5           1884  1226640       68915280 #> ENSG00000188229       TUBB4B           2037 26463689       73806975"},{"path":"/articles/census_query_extract.html","id":"querying-expression-data-as-singlecellexperiment","dir":"Articles","previous_headings":"","what":"Querying expression data as SingleCellExperiment","title":"Querying and fetching the single-cell data and cell/gene metadata","text":"Similarly previous section, get_single_cell_experiment method cellxgene.census API. behaves exactly get_seurat returns SingleCellExperiment object. example, repeat query can simply following. full description refer ?cellxgene.census::get_single_cell_experiment.","code":"library(\"SingleCellExperiment\")  sce_obj <- get_single_cell_experiment(   census, \"Homo sapiens\",   obs_column_names = c(\"cell_type\", \"tissue_general\", \"disease\", \"sex\"),   var_value_filter = \"feature_id %in% c('ENSG00000161798', 'ENSG00000188229')\",   obs_value_filter = \"cell_type == 'B cell' & tissue_general == 'lung' & disease == 'COVID-19'\" ) sce_obj #> class: SingleCellExperiment  #> dim: 2 2729  #> metadata(0): #> assays(1): counts #> rownames(2): ENSG00000161798 ENSG00000188229 #> rowData names(4): feature_name feature_length nnz n_measured_obs #> colnames(2729): obs8964464 obs8964864 ... obs69303276 obs69304862 #> colData names(4): cell_type tissue_general disease sex #> reducedDimNames(0): #> mainExpName: RNA #> altExpNames(0): head(colData(sce_obj)) #> DataFrame with 6 rows and 4 columns #>            cell_type tissue_general  disease      sex #>             <factor>       <factor> <factor> <factor> #> obs8964464    B cell           lung COVID-19     male #> obs8964864    B cell           lung COVID-19     male #> obs8965181    B cell           lung COVID-19     male #> obs8965207    B cell           lung COVID-19     male #> obs8965360    B cell           lung COVID-19     male #> obs8965378    B cell           lung COVID-19     male head(rowData(sce_obj)) #> DataFrame with 2 rows and 4 columns #>                 feature_name feature_length       nnz n_measured_obs #>                  <character>      <integer> <integer>      <integer> #> ENSG00000161798         AQP5           1884   1226640       68915280 #> ENSG00000188229       TUBB4B           2037  26463689       73806975"},{"path":"/articles/census_query_extract.html","id":"close-the-census","dir":"Articles","previous_headings":"Querying expression data as SingleCellExperiment","what":"Close the census","title":"Querying and fetching the single-cell data and cell/gene metadata","text":"use, census object closed release memory resources. also closes SOMA objects accessed via top-level census. Closing can automated using .exit(census$close(), add = TRUE) immediately census <- open_soma().","code":"census$close()"},{"path":"/articles/comp_bio_census_info.html","id":"opening-the-census","dir":"Articles","previous_headings":"","what":"Opening the Census","title":"Learning about the CZ CELLxGENE Census","text":"cellxgene.census R package contains convenient open_soma() API open version Census (stable default). can learn cellxgene.census methods accessing corresponding documentation, example ?cellxgene.census::open_soma.","code":"library(\"cellxgene.census\") census <- open_soma()"},{"path":"/articles/comp_bio_census_info.html","id":"census-organization","dir":"Articles","previous_headings":"","what":"Census organization","title":"Learning about the CZ CELLxGENE Census","text":"Census schema defines structure Census. short, can think Census structured collection items stores different pieces information. items parent collection SOMA objects various types can accessed TileDB-SOMA API (documentation). cellxgene.census package contains convenient wrappers TileDB-SOMA API. example function used open Census: cellxgene_census.open_soma().","code":""},{"path":"/articles/comp_bio_census_info.html","id":"main-census-components","dir":"Articles","previous_headings":"Census organization","what":"Main Census components","title":"Learning about the CZ CELLxGENE Census","text":"command created census, SOMACollection, R6 class providing key-value associative map. get() method can access two top-level collection members, census_info census_data, instances SOMACollection.","code":""},{"path":"/articles/comp_bio_census_info.html","id":"census-summary-info","dir":"Articles","previous_headings":"Census organization","what":"Census summary info","title":"Learning about the CZ CELLxGENE Census","text":"census$get(\"census_info\")$get(\"summary\"): data frame high-level information Census, e.g. build date, total cell count, etc. census$get(\"census_info\")$get(\"datasets\"): data frame datasets CELLxGENE Discover used create Census. census$get(\"census_info\")$get(\"summary_cell_counts\"): data frame cell counts stratified relevant cell metadata Census data Data organism stored independent SOMAExperiment objects specialized form SOMACollection. store data matrix (cell genes), cell metadata, gene metadata, useful components covered notebook. data organized one organism – Homo sapiens: census$get(\"census_data\")$get(\"homo_sapiens\")$obs: Cell metadata census$get(\"census_data\")$get(\"homo_sapiens\")$ms$get(\"RNA\"): Data matrices, currently … census$get(\"census_data\")$get(\"homo_sapiens\")$ms$get(\"RNA\")$X$get(\"raw\"): matrix raw counts SOMASparseNDArray census$get(\"census_data\")$get(\"homo_sapiens\")$ms$get(\"RNA\")$var: Gene Metadata","code":""},{"path":"/articles/comp_bio_census_info.html","id":"cell-metadata","dir":"Articles","previous_headings":"","what":"Cell metadata","title":"Learning about the CZ CELLxGENE Census","text":"can obtain cell metadata variables directly querying columns corresponding SOMADataFrame. variables can used querying Census case want work specific cells. variables defined CELLxGENE dataset schema except following: soma_joinid: SOMA-defined value use join operations. dataset_id: dataset id encoded census$get(\"census_info\")$get(\"datasets\"). tissue_general tissue_general_ontology_term_id: high-level tissue mapping.","code":"census$get(\"census_data\")$get(\"homo_sapiens\")$obs$colnames() #>  [1] \"soma_joinid\"                              #>  [2] \"dataset_id\"                               #>  [3] \"assay\"                                    #>  [4] \"assay_ontology_term_id\"                   #>  [5] \"cell_type\"                                #>  [6] \"cell_type_ontology_term_id\"               #>  [7] \"development_stage\"                        #>  [8] \"development_stage_ontology_term_id\"       #>  [9] \"disease\"                                  #> [10] \"disease_ontology_term_id\"                 #> [11] \"donor_id\"                                 #> [12] \"is_primary_data\"                          #> [13] \"observation_joinid\"                       #> [14] \"self_reported_ethnicity\"                  #> [15] \"self_reported_ethnicity_ontology_term_id\" #> [16] \"sex\"                                      #> [17] \"sex_ontology_term_id\"                     #> [18] \"suspension_type\"                          #> [19] \"tissue\"                                   #> [20] \"tissue_ontology_term_id\"                  #> [21] \"tissue_type\"                              #> [22] \"tissue_general\"                           #> [23] \"tissue_general_ontology_term_id\"          #> [24] \"raw_sum\"                                  #> [25] \"nnz\"                                      #> [26] \"raw_mean_nnz\"                             #> [27] \"raw_variance_nnz\"                         #> [28] \"n_measured_vars\""},{"path":"/articles/comp_bio_census_info.html","id":"gene-metadata","dir":"Articles","previous_headings":"","what":"Gene metadata","title":"Learning about the CZ CELLxGENE Census","text":"Similarly, can obtain gene metadata variables directly querying columns corresponding SOMADataFrame. variables can use querying Census case specific genes interested . variables defined CELLxGENE dataset schema except following: soma_joinid: SOMA-defined value use join operations. feature_length: length base pairs gene.","code":"census$get(\"census_data\")$get(\"homo_sapiens\")$ms$get(\"RNA\")$var$colnames() #> [1] \"soma_joinid\"    \"feature_id\"     \"feature_name\"   \"feature_length\" \"nnz\"            #> [6] \"n_measured_obs\""},{"path":"/articles/comp_bio_census_info.html","id":"census-summary-content-tables","dir":"Articles","previous_headings":"","what":"Census summary content tables","title":"Learning about the CZ CELLxGENE Census","text":"can take quick look high-level Census information looking census$get(\"census_info\")$get(\"summary\"): special interest label-value combinations : total_cell_count total number cells Census. unique_cell_count number unique cells, cells may present twice due meta-analysis consortia-like data. number_donors_homo_sapiens number_donors_mus_musculus number individuals human mouse. guaranteed unique one individual ID may present identical different datasets.","code":"as.data.frame(census$get(\"census_info\")$get(\"summary\")$read()$concat()) #>   soma_joinid                      label      value #> 1           0      census_schema_version      2.0.1 #> 2           1          census_build_date 2024-05-20 #> 3           2     dataset_schema_version      5.0.0 #> 4           3           total_cell_count  115556140 #> 5           4          unique_cell_count   60597966 #> 6           5 number_donors_homo_sapiens      17651 #> 7           6 number_donors_mus_musculus       4216"},{"path":"/articles/comp_bio_census_info.html","id":"cell-counts-by-cell-metadata","dir":"Articles","previous_headings":"Census summary content tables","what":"Cell counts by cell metadata","title":"Learning about the CZ CELLxGENE Census","text":"looking census$get(\"census_info)$get(\"summary_cell_counts\") can get general idea cell counts stratified relevant cell metadata. cell metadata included table, can take look cell gene metadata available sections “Cell metadata” “Gene metadata”. line retrieves table casts R data frame: combination organism values category cell metadata can take look total_cell_count unique_cell_count cell counts combination. values category specified ontology_term_id label, value’s IDs labels, respectively.","code":"census_counts <- as.data.frame(census$get(\"census_info\")$get(\"summary_cell_counts\")$read()$concat()) head(census_counts) #>   soma_joinid     organism category      label ontology_term_id total_cell_count #> 1           0 Homo sapiens      all         na               na         74322510 #> 2           1 Homo sapiens    assay   Drop-seq      EFO:0008722           336562 #> 3           2 Homo sapiens    assay     inDrop      EFO:0008780            51304 #> 4           3 Homo sapiens    assay   MARS-seq      EFO:0008796            70146 #> 5           4 Homo sapiens    assay   Seq-Well      EFO:0008919           206754 #> 6           5 Homo sapiens    assay Smart-seq2      EFO:0008931           190792 #>   unique_cell_count #> 1          44265932 #> 2            292631 #> 3             25652 #> 4             70146 #> 5             89477 #> 6             81294"},{"path":"/articles/comp_bio_census_info.html","id":"example-cell-metadata-included-in-the-summary-counts-table","dir":"Articles","previous_headings":"Census summary content tables > Cell counts by cell metadata","what":"Example: cell metadata included in the summary counts table","title":"Learning about the CZ CELLxGENE Census","text":"get available cell metadata summary counts table can following. Remember cell metadata available, variables omitted creation table.","code":"t(table(census_counts$organism, census_counts$category)) #>                           #>                           Homo sapiens Mus musculus #>   all                                1            1 #>   assay                             24           11 #>   cell_type                        698          364 #>   disease                          109            7 #>   self_reported_ethnicity           31            1 #>   sex                                3            3 #>   suspension_type                    1            1 #>   tissue                           267           84 #>   tissue_general                    55           29"},{"path":"/articles/comp_bio_census_info.html","id":"example-cell-counts-for-each-sequencing-assay-in-human-data","dir":"Articles","previous_headings":"Census summary content tables > Cell counts by cell metadata","what":"Example: cell counts for each sequencing assay in human data","title":"Learning about the CZ CELLxGENE Census","text":"get cell counts sequencing assay type human data, can perform following operations:","code":"human_assay_counts <- census_counts[census_counts$organism == \"Homo sapiens\" & census_counts$category == \"assay\", ] human_assay_counts <- human_assay_counts[order(human_assay_counts$total_cell_count, decreasing = TRUE), ]"},{"path":"/articles/comp_bio_census_info.html","id":"example-number-of-microglial-cells-in-the-census","dir":"Articles","previous_headings":"Census summary content tables > Cell counts by cell metadata","what":"Example: number of microglial cells in the Census","title":"Learning about the CZ CELLxGENE Census","text":"specific term categories shown can directly find number cells term.","code":"census_counts[census_counts$label == \"microglial cell\", ] #>      soma_joinid     organism  category           label ontology_term_id #> 78            77 Homo sapiens cell_type microglial cell       CL:0000129 #> 1237        1236 Mus musculus cell_type microglial cell       CL:0000129 #>      total_cell_count unique_cell_count #> 78             587981            406117 #> 1237           119764             76113"},{"path":"/articles/comp_bio_census_info.html","id":"understanding-census-contents-beyond-the-summary-tables","dir":"Articles","previous_headings":"","what":"Understanding Census contents beyond the summary tables","title":"Learning about the CZ CELLxGENE Census","text":"using pre-computed tables census$get(\"census_info\") easy quick way understand contents Census, falls short want learn certain slices Census. example, may want learn : cell types available human liver? total number cells lung datasets stratified sequencing technology? sex distribution cells brain mouse? diseases available T cells? questions can answered directly querying cell metadata shown examples .","code":""},{"path":"/articles/comp_bio_census_info.html","id":"example-all-cell-types-available-in-human","dir":"Articles","previous_headings":"Understanding Census contents beyond the summary tables","what":"Example: all cell types available in human","title":"Learning about the CZ CELLxGENE Census","text":"exemplify process accessing slicing cell metadata summary stats, let’s start trivial example take look human cell types available Census: number rows total number cells humans. Now, wish get cell counts per cell type can work data frame. addition, focus cells marked is_primary_data=TRUE ensures de-duplicate cells appear CELLxGENE Discover. number unique cells. Now let’s look counts per cell type: shows abundant cell types “glutamatergic neuron”, “CD8-positive, alpha-beta T cell”, “CD4-positive, alpha-beta T cell”. Now let’s take look number unique cell types: total number different cell types human. information example can quickly obtained summary table census$get(\"census-info\")$get(\"summary_cell_counts\"). examples complex can achieved accessing cell metadata.","code":"obs_df <- census$get(\"census_data\")$get(\"homo_sapiens\")$obs$read(column_names = c(\"cell_type\", \"is_primary_data\")) as.data.frame(obs_df$concat()) #>         cell_type is_primary_data #> 1     plasma cell           FALSE #> 2   mature B cell           FALSE #> 3     plasma cell           FALSE #> 4   mature B cell           FALSE #> 5   mature B cell           FALSE #> 6   mature B cell           FALSE #> 7   mature B cell           FALSE #> 8     plasma cell           FALSE #> 9   mature B cell           FALSE #> 10    plasma cell           FALSE #> 11  mature B cell           FALSE #> 12  mature B cell           FALSE #> 13    plasma cell           FALSE #> 14  mature B cell           FALSE #> 15    plasma cell           FALSE #> 16  mature B cell           FALSE #> 17    plasma cell           FALSE #> 18    plasma cell           FALSE #> 19  mature B cell           FALSE #> 20  mature B cell           FALSE #> 21    plasma cell           FALSE #> 22    plasma cell           FALSE #> 23    plasma cell           FALSE #> 24    plasma cell           FALSE #> 25  mature B cell           FALSE #> 26    plasma cell           FALSE #> 27  mature B cell           FALSE #> 28    plasma cell           FALSE #> 29    plasma cell           FALSE #> 30    plasma cell           FALSE #> 31    plasma cell           FALSE #> 32  mature B cell           FALSE #> 33  mature B cell           FALSE #> 34  mature B cell           FALSE #> 35  mature B cell           FALSE #> 36  mature B cell           FALSE #> 37  mature B cell           FALSE #> 38    plasma cell           FALSE #> 39  mature B cell           FALSE #> 40  mature B cell           FALSE #> 41  mature B cell           FALSE #> 42    plasma cell           FALSE #> 43    plasma cell           FALSE #> 44  mature B cell           FALSE #> 45    plasma cell           FALSE #> 46    plasma cell           FALSE #> 47  mature B cell           FALSE #> 48  mature B cell           FALSE #> 49    plasma cell           FALSE #> 50  mature B cell           FALSE #> 51  mature B cell           FALSE #> 52    plasma cell           FALSE #> 53  mature B cell           FALSE #> 54  mature B cell           FALSE #> 55    plasma cell           FALSE #> 56    plasma cell           FALSE #> 57  mature B cell           FALSE #> 58    plasma cell           FALSE #> 59  mature B cell           FALSE #> 60    plasma cell           FALSE #> 61    plasma cell           FALSE #> 62  mature B cell           FALSE #> 63  mature B cell           FALSE #> 64  mature B cell           FALSE #> 65    plasma cell           FALSE #> 66  mature B cell           FALSE #> 67    plasma cell           FALSE #> 68    plasma cell           FALSE #> 69  mature B cell           FALSE #> 70    plasma cell           FALSE #> 71  mature B cell           FALSE #> 72    plasma cell           FALSE #> 73    plasma cell           FALSE #> 74  mature B cell           FALSE #> 75    plasma cell           FALSE #> 76    plasma cell           FALSE #> 77    plasma cell           FALSE #> 78  mature B cell           FALSE #> 79    plasma cell           FALSE #> 80    plasma cell           FALSE #> 81    plasma cell           FALSE #> 82  mature B cell           FALSE #> 83    plasma cell           FALSE #> 84  mature B cell           FALSE #> 85  mature B cell           FALSE #> 86    plasma cell           FALSE #> 87  mature B cell           FALSE #> 88  mature B cell           FALSE #> 89  mature B cell           FALSE #> 90  mature B cell           FALSE #> 91    plasma cell           FALSE #> 92  mature B cell           FALSE #> 93    plasma cell           FALSE #> 94  mature B cell           FALSE #> 95  mature B cell           FALSE #> 96  mature B cell           FALSE #> 97  mature B cell           FALSE #> 98  mature B cell           FALSE #> 99  mature B cell           FALSE #> 100 mature B cell           FALSE #> 101   plasma cell           FALSE #> 102   plasma cell           FALSE #> 103   plasma cell           FALSE #> 104 mature B cell           FALSE #> 105   plasma cell           FALSE #> 106 mature B cell           FALSE #> 107 mature B cell           FALSE #> 108 mature B cell           FALSE #> 109   plasma cell           FALSE #> 110   plasma cell           FALSE #> 111   plasma cell           FALSE #> 112 mature B cell           FALSE #> 113 mature B cell           FALSE #> 114 mature B cell           FALSE #> 115 mature B cell           FALSE #> 116 mature B cell           FALSE #> 117 mature B cell           FALSE #> 118 mature B cell           FALSE #> 119   plasma cell           FALSE #> 120 mature B cell           FALSE #> 121 mature B cell           FALSE #> 122   plasma cell           FALSE #> 123   plasma cell           FALSE #> 124 mature B cell           FALSE #> 125 mature B cell           FALSE #> 126   plasma cell           FALSE #> 127   plasma cell           FALSE #> 128   plasma cell           FALSE #>  [ reached 'max' / getOption(\"max.print\") -- omitted 74322382 rows ] obs_df <- census$get(\"census_data\")$get(\"homo_sapiens\")$obs$read(   column_names = \"cell_type\",   value_filter = \"is_primary_data == TRUE\" )  obs_df <- as.data.frame(obs_df$concat()) nrow(obs_df) #> [1] 44265932 human_cell_type_counts <- table(obs_df$cell_type) sort(human_cell_type_counts, decreasing = TRUE)[1:10] #>  #>                                                    neuron  #>                                                   2987968  #>                                      glutamatergic neuron  #>                                                   1604668  #> L2/3-6 intratelencephalic projecting glutamatergic neuron  #>                                                   1570484  #>                                           oligodendrocyte  #>                                                   1373223  #>                           CD4-positive, alpha-beta T cell  #>                                                   1368136  #>                                                   unknown  #>                                                   1322115  #>                           CD8-positive, alpha-beta T cell  #>                                                   1284243  #>                                        classical monocyte  #>                                                   1059249  #>                                                    B cell  #>                                                   1010055  #>                                       natural killer cell  #>                                                    931240 length(human_cell_type_counts) #> [1] 698"},{"path":"/articles/comp_bio_census_info.html","id":"example-cell-types-available-in-human-liver","dir":"Articles","previous_headings":"Understanding Census contents beyond the summary tables","what":"Example: cell types available in human liver","title":"Learning about the CZ CELLxGENE Census","text":"Similar example , can learn cell types available specific tissue, e.g. liver. achieve goal just need limit cell metadata tissue. use information cell metadata variable tissue_general. variable contains high-level tissue label cells Census: cell types cell counts human liver.","code":"obs_liver_df <- census$get(\"census_data\")$get(\"homo_sapiens\")$obs$read(   column_names = \"cell_type\",   value_filter = \"is_primary_data == TRUE & tissue_general == 'liver'\" )  obs_liver_df <- as.data.frame(obs_liver_df$concat())  sort(table(obs_liver_df$cell_type), decreasing = TRUE)[1:10] #>  #>    periportal region hepatocyte                          T cell  #>                           89999                           88351  #>                      macrophage                     hepatoblast  #>                           72769                           58447  #>                     erythrocyte                 neoplastic cell  #>                           57232                           52431  #>             natural killer cell                        monocyte  #>                           51789                           47013  #>                    erythroblast centrilobular region hepatocyte  #>                           46008                           45920"},{"path":"/articles/comp_bio_census_info.html","id":"example-diseased-t-cells-in-human-tissues","dir":"Articles","previous_headings":"Understanding Census contents beyond the summary tables","what":"Example: diseased T cells in human tissues","title":"Learning about the CZ CELLxGENE Census","text":"example going get counts diseased cells annotated T cells. sake example focus “CD8-positive, alpha-beta T cell” “CD4-positive, alpha-beta T cell”: cell counts annotated indicated disease across human tissues “CD8-positive, alpha-beta T cell” “CD4-positive, alpha-beta T cell”.","code":"obs_t_cells_df <- census$get(\"census_data\")$get(\"homo_sapiens\")$obs$read(   column_names = c(\"disease\", \"tissue_general\"),   value_filter = \"is_primary_data == TRUE & disease != 'normal' & cell_type %in% c('CD8-positive, alpha-beta T cell', 'CD4-positive, alpha-beta T cell')\" )  obs_t_cells_df <- as.data.frame(obs_t_cells_df$concat())  print(table(obs_t_cells_df)) #>                                                                           tissue_general #> disease                                                                    adipose tissue #>   Alzheimer disease                                                                     0 #>   B-cell acute lymphoblastic leukemia                                                   0 #>   B-cell non-Hodgkin lymphoma                                                           0 #>   Barrett esophagus                                                                     0 #>                                                                           tissue_general #> disease                                                                    adrenal gland #>   Alzheimer disease                                                                    0 #>   B-cell acute lymphoblastic leukemia                                                  0 #>   B-cell non-Hodgkin lymphoma                                                          0 #>   Barrett esophagus                                                                    0 #>                                                                           tissue_general #> disease                                                                    axilla #>   Alzheimer disease                                                             0 #>   B-cell acute lymphoblastic leukemia                                           0 #>   B-cell non-Hodgkin lymphoma                                                   0 #>   Barrett esophagus                                                             0 #>                                                                           tissue_general #> disease                                                                    bladder organ #>   Alzheimer disease                                                                    0 #>   B-cell acute lymphoblastic leukemia                                                  0 #>   B-cell non-Hodgkin lymphoma                                                          0 #>   Barrett esophagus                                                                    0 #>                                                                           tissue_general #> disease                                                                     blood #>   Alzheimer disease                                                             0 #>   B-cell acute lymphoblastic leukemia                                           0 #>   B-cell non-Hodgkin lymphoma                                                   0 #>   Barrett esophagus                                                             0 #>                                                                           tissue_general #> disease                                                                    bone marrow #>   Alzheimer disease                                                                  0 #>   B-cell acute lymphoblastic leukemia                                                0 #>   B-cell non-Hodgkin lymphoma                                                        0 #>   Barrett esophagus                                                                  0 #>                                                                           tissue_general #> disease                                                                     brain #>   Alzheimer disease                                                             0 #>   B-cell acute lymphoblastic leukemia                                           0 #>   B-cell non-Hodgkin lymphoma                                                   0 #>   Barrett esophagus                                                             0 #>                                                                           tissue_general #> disease                                                                    breast #>   Alzheimer disease                                                             0 #>   B-cell acute lymphoblastic leukemia                                           0 #>   B-cell non-Hodgkin lymphoma                                                   0 #>   Barrett esophagus                                                             0 #>                                                                           tissue_general #> disease                                                                    central nervous system #>   Alzheimer disease                                                                             0 #>   B-cell acute lymphoblastic leukemia                                                           0 #>   B-cell non-Hodgkin lymphoma                                                                   0 #>   Barrett esophagus                                                                             0 #>                                                                           tissue_general #> disease                                                                     colon #>   Alzheimer disease                                                             0 #>   B-cell acute lymphoblastic leukemia                                           0 #>   B-cell non-Hodgkin lymphoma                                                   0 #>   Barrett esophagus                                                             0 #>                                                                           tissue_general #> disease                                                                    digestive system #>   Alzheimer disease                                                                       0 #>   B-cell acute lymphoblastic leukemia                                                     0 #>   B-cell non-Hodgkin lymphoma                                                             0 #>   Barrett esophagus                                                                       0 #>                                                                           tissue_general #> disease                                                                    embryo #>   Alzheimer disease                                                             0 #>   B-cell acute lymphoblastic leukemia                                           0 #>   B-cell non-Hodgkin lymphoma                                                   0 #>   Barrett esophagus                                                             0 #>                                                                           tissue_general #> disease                                                                    endocrine gland #>   Alzheimer disease                                                                      0 #>   B-cell acute lymphoblastic leukemia                                                    0 #>   B-cell non-Hodgkin lymphoma                                                            0 #>   Barrett esophagus                                                                      0 #>                                                                           tissue_general #> disease                                                                    esophagogastric junction #>   Alzheimer disease                                                                               0 #>   B-cell acute lymphoblastic leukemia                                                             0 #>   B-cell non-Hodgkin lymphoma                                                                     0 #>   Barrett esophagus                                                                               0 #>                                                                           tissue_general #> disease                                                                    esophagus #>   Alzheimer disease                                                                0 #>   B-cell acute lymphoblastic leukemia                                              0 #>   B-cell non-Hodgkin lymphoma                                                      0 #>   Barrett esophagus                                                                0 #>                                                                           tissue_general #> disease                                                                    exocrine gland #>   Alzheimer disease                                                                     0 #>   B-cell acute lymphoblastic leukemia                                                   0 #>   B-cell non-Hodgkin lymphoma                                                           0 #>   Barrett esophagus                                                                     0 #>                                                                           tissue_general #> disease                                                                       eye #>   Alzheimer disease                                                             0 #>   B-cell acute lymphoblastic leukemia                                           0 #>   B-cell non-Hodgkin lymphoma                                                   0 #>   Barrett esophagus                                                             0 #>                                                                           tissue_general #> disease                                                                    fallopian tube #>   Alzheimer disease                                                                     0 #>   B-cell acute lymphoblastic leukemia                                                   0 #>   B-cell non-Hodgkin lymphoma                                                           0 #>   Barrett esophagus                                                                     0 #>                                                                           tissue_general #> disease                                                                    gallbladder #>   Alzheimer disease                                                                  0 #>   B-cell acute lymphoblastic leukemia                                                0 #>   B-cell non-Hodgkin lymphoma                                                        0 #>   Barrett esophagus                                                                  0 #>                                                                           tissue_general #> disease                                                                     heart #>   Alzheimer disease                                                             0 #>   B-cell acute lymphoblastic leukemia                                           0 #>   B-cell non-Hodgkin lymphoma                                                   0 #>   Barrett esophagus                                                             0 #>                                                                           tissue_general #> disease                                                                    immune system #>   Alzheimer disease                                                                    0 #>   B-cell acute lymphoblastic leukemia                                                  0 #>   B-cell non-Hodgkin lymphoma                                                          0 #>   Barrett esophagus                                                                    0 #>                                                                           tissue_general #> disease                                                                    intestine #>   Alzheimer disease                                                                0 #>   B-cell acute lymphoblastic leukemia                                              0 #>   B-cell non-Hodgkin lymphoma                                                      0 #>   Barrett esophagus                                                                0 #>                                                                           tissue_general #> disease                                                                    kidney #>   Alzheimer disease                                                             0 #>   B-cell acute lymphoblastic leukemia                                           0 #>   B-cell non-Hodgkin lymphoma                                                   0 #>   Barrett esophagus                                                             0 #>                                                                           tissue_general #> disease                                                                    lamina propria #>   Alzheimer disease                                                                     0 #>   B-cell acute lymphoblastic leukemia                                                   0 #>   B-cell non-Hodgkin lymphoma                                                           0 #>   Barrett esophagus                                                                     0 #>                                                                           tissue_general #> disease                                                                    large intestine #>   Alzheimer disease                                                                      0 #>   B-cell acute lymphoblastic leukemia                                                    0 #>   B-cell non-Hodgkin lymphoma                                                            0 #>   Barrett esophagus                                                                      0 #>                                                                           tissue_general #> disease                                                                     liver #>   Alzheimer disease                                                             0 #>   B-cell acute lymphoblastic leukemia                                           0 #>   B-cell non-Hodgkin lymphoma                                                   0 #>   Barrett esophagus                                                             0 #>                                                                           tissue_general #> disease                                                                      lung #>   Alzheimer disease                                                             0 #>   B-cell acute lymphoblastic leukemia                                           0 #>   B-cell non-Hodgkin lymphoma                                                   0 #>   Barrett esophagus                                                             0 #>                                                                           tissue_general #> disease                                                                    lymph node #>   Alzheimer disease                                                                 0 #>   B-cell acute lymphoblastic leukemia                                               0 #>   B-cell non-Hodgkin lymphoma                                                       0 #>   Barrett esophagus                                                                 0 #>                                                                           tissue_general #> disease                                                                    mucosa #>   Alzheimer disease                                                             0 #>   B-cell acute lymphoblastic leukemia                                           0 #>   B-cell non-Hodgkin lymphoma                                                   0 #>   Barrett esophagus                                                             0 #>                                                                           tissue_general #> disease                                                                    musculature #>   Alzheimer disease                                                                  0 #>   B-cell acute lymphoblastic leukemia                                                0 #>   B-cell non-Hodgkin lymphoma                                                        0 #>   Barrett esophagus                                                                  0 #>                                                                           tissue_general #> disease                                                                      nose #>   Alzheimer disease                                                             0 #>   B-cell acute lymphoblastic leukemia                                           0 #>   B-cell non-Hodgkin lymphoma                                                   0 #>   Barrett esophagus                                                             0 #>                                                                           tissue_general #> disease                                                                    omentum #>   Alzheimer disease                                                              0 #>   B-cell acute lymphoblastic leukemia                                            0 #>   B-cell non-Hodgkin lymphoma                                                    0 #>   Barrett esophagus                                                              0 #>                                                                           tissue_general #> disease                                                                     ovary #>   Alzheimer disease                                                             0 #>   B-cell acute lymphoblastic leukemia                                           0 #>   B-cell non-Hodgkin lymphoma                                                   0 #>   Barrett esophagus                                                             0 #>                                                                           tissue_general #> disease                                                                    pancreas #>   Alzheimer disease                                                               0 #>   B-cell acute lymphoblastic leukemia                                             0 #>   B-cell non-Hodgkin lymphoma                                                     0 #>   Barrett esophagus                                                               0 #>                                                                           tissue_general #> disease                                                                    placenta #>   Alzheimer disease                                                               0 #>   B-cell acute lymphoblastic leukemia                                             0 #>   B-cell non-Hodgkin lymphoma                                                     0 #>   Barrett esophagus                                                               0 #>                                                                           tissue_general #> disease                                                                    pleura #>   Alzheimer disease                                                             0 #>   B-cell acute lymphoblastic leukemia                                           0 #>   B-cell non-Hodgkin lymphoma                                                   0 #>   Barrett esophagus                                                             0 #>                                                                           tissue_general #> disease                                                                    pleural fluid #>   Alzheimer disease                                                                    0 #>   B-cell acute lymphoblastic leukemia                                                  0 #>   B-cell non-Hodgkin lymphoma                                                          0 #>   Barrett esophagus                                                                    0 #>                                                                           tissue_general #> disease                                                                    prostate gland #>   Alzheimer disease                                                                     0 #>   B-cell acute lymphoblastic leukemia                                                   0 #>   B-cell non-Hodgkin lymphoma                                                           0 #>   Barrett esophagus                                                                     0 #>                                                                           tissue_general #> disease                                                                    reproductive system #>   Alzheimer disease                                                                          0 #>   B-cell acute lymphoblastic leukemia                                                        0 #>   B-cell non-Hodgkin lymphoma                                                                0 #>   Barrett esophagus                                                                          0 #>                                                                           tissue_general #> disease                                                                    respiratory system #>   Alzheimer disease                                                                         0 #>   B-cell acute lymphoblastic leukemia                                                       0 #>   B-cell non-Hodgkin lymphoma                                                               0 #>   Barrett esophagus                                                                         0 #>                                                                           tissue_general #> disease                                                                    saliva #>   Alzheimer disease                                                             0 #>   B-cell acute lymphoblastic leukemia                                           0 #>   B-cell non-Hodgkin lymphoma                                                   0 #>   Barrett esophagus                                                             0 #>                                                                           tissue_general #> disease                                                                     scalp #>   Alzheimer disease                                                             0 #>   B-cell acute lymphoblastic leukemia                                           0 #>   B-cell non-Hodgkin lymphoma                                                   0 #>   Barrett esophagus                                                             0 #>                                                                           tissue_general #> disease                                                                    skeletal system #>   Alzheimer disease                                                                      0 #>   B-cell acute lymphoblastic leukemia                                                    0 #>   B-cell non-Hodgkin lymphoma                                                            0 #>   Barrett esophagus                                                                      0 #>                                                                           tissue_general #> disease                                                                    skin of body #>   Alzheimer disease                                                                   0 #>   B-cell acute lymphoblastic leukemia                                                 0 #>   B-cell non-Hodgkin lymphoma                                                         0 #>   Barrett esophagus                                                                   0 #>                                                                           tissue_general #> disease                                                                    small intestine #>   Alzheimer disease                                                                      0 #>   B-cell acute lymphoblastic leukemia                                                    0 #>   B-cell non-Hodgkin lymphoma                                                            0 #>   Barrett esophagus                                                                      0 #>                                                                           tissue_general #> disease                                                                    spinal cord #>   Alzheimer disease                                                                  0 #>   B-cell acute lymphoblastic leukemia                                                0 #>   B-cell non-Hodgkin lymphoma                                                        0 #>   Barrett esophagus                                                                  0 #>                                                                           tissue_general #> disease                                                                    spleen #>   Alzheimer disease                                                             0 #>   B-cell acute lymphoblastic leukemia                                           0 #>   B-cell non-Hodgkin lymphoma                                                   0 #>   Barrett esophagus                                                             0 #>                                                                           tissue_general #> disease                                                                    stomach #>   Alzheimer disease                                                              0 #>   B-cell acute lymphoblastic leukemia                                            0 #>   B-cell non-Hodgkin lymphoma                                                    0 #>   Barrett esophagus                                                              0 #>                                                                           tissue_general #> disease                                                                    tendon of semitendinosus #>   Alzheimer disease                                                                               0 #>   B-cell acute lymphoblastic leukemia                                                             0 #>   B-cell non-Hodgkin lymphoma                                                                     0 #>   Barrett esophagus                                                                               0 #>                                                                           tissue_general #> disease                                                                    testis #>   Alzheimer disease                                                             0 #>   B-cell acute lymphoblastic leukemia                                           0 #>   B-cell non-Hodgkin lymphoma                                                   0 #>   Barrett esophagus                                                             0 #>                                                                           tissue_general #> disease                                                                    tongue #>   Alzheimer disease                                                             0 #>   B-cell acute lymphoblastic leukemia                                           0 #>   B-cell non-Hodgkin lymphoma                                                   0 #>   Barrett esophagus                                                             0 #>                                                                           tissue_general #> disease                                                                    ureter #>   Alzheimer disease                                                             0 #>   B-cell acute lymphoblastic leukemia                                           0 #>   B-cell non-Hodgkin lymphoma                                                   0 #>   Barrett esophagus                                                             0 #>                                                                           tissue_general #> disease                                                                    uterus #>   Alzheimer disease                                                             0 #>   B-cell acute lymphoblastic leukemia                                           0 #>   B-cell non-Hodgkin lymphoma                                                   0 #>   Barrett esophagus                                                             0 #>                                                                           tissue_general #> disease                                                                    vasculature #>   Alzheimer disease                                                                  0 #>   B-cell acute lymphoblastic leukemia                                                0 #>   B-cell non-Hodgkin lymphoma                                                        0 #>   Barrett esophagus                                                                  0 #>                                                                           tissue_general #> disease                                                                    yolk sac #>   Alzheimer disease                                                               0 #>   B-cell acute lymphoblastic leukemia                                             0 #>   B-cell non-Hodgkin lymphoma                                                     0 #>   Barrett esophagus                                                               0 #>  [ reached getOption(\"max.print\") -- omitted 105 rows ]"},{"path":"/articles/comp_bio_data_integration.html","id":"finding-and-fetching-data-from-mouse-liver-10x-genomics-and-smart-seq2","dir":"Articles","previous_headings":"","what":"Finding and fetching data from mouse liver (10X Genomics and Smart-Seq2)","title":"Integrating multi-dataset slices of data with Seurat","text":"Let’s load packages needed notebook. Now can open Census. notebook use Tabula Muris Senis data liver contains cells 10X Genomics Smart-Seq2 technologies. Let’s query datasets table Census filtering collection_name “Tabula Muris Senis” dataset_title “liver”. Now can use values dataset_id query load Seurat object cells datasets. can check cell counts 10X Genomics Smart-Seq2 data looking assay metadata.","code":"library(\"cellxgene.census\") library(\"Seurat\") census <- open_soma() census_datasets <- census$get(\"census_info\")$get(\"datasets\") census_datasets <- census_datasets$read(value_filter = \"collection_name == 'Tabula Muris Senis'\") census_datasets <- as.data.frame(census_datasets$concat())  # Print rows with liver data census_datasets[grep(\"Liver\", census_datasets$dataset_title), ] #>    soma_joinid #> 7          125 #> 25         208 #>                                                                                                                                                                                                                                                                                                         citation #> 7  Publication: https://doi.org/10.1038/s41586-020-2496-1 Dataset Version: https://datasets.cellxgene.cziscience.com/d32c289e-e881-4140-8db4-078ec04c942f.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/0b9d8a04-bb9d-44da-aa27-705bb65b54eb #> 25 Publication: https://doi.org/10.1038/s41586-020-2496-1 Dataset Version: https://datasets.cellxgene.cziscience.com/e7218cb6-9df7-461e-8425-d8c3ddca9392.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/0b9d8a04-bb9d-44da-aa27-705bb65b54eb #>                           collection_id    collection_name #> 7  0b9d8a04-bb9d-44da-aa27-705bb65b54eb Tabula Muris Senis #> 25 0b9d8a04-bb9d-44da-aa27-705bb65b54eb Tabula Muris Senis #>               collection_doi                           dataset_id #> 7  10.1038/s41586-020-2496-1 4546e757-34d0-4d17-be06-538318925fcd #> 25 10.1038/s41586-020-2496-1 6202a243-b713-4e12-9ced-c387f8483dea #>                      dataset_version_id #> 7  d32c289e-e881-4140-8db4-078ec04c942f #> 25 e7218cb6-9df7-461e-8425-d8c3ddca9392 #>                                                                                        dataset_title #> 7  Liver - A single-cell transcriptomic atlas characterizes ageing tissues in the mouse - Smart-seq2 #> 25        Liver - A single-cell transcriptomic atlas characterizes ageing tissues in the mouse - 10x #>                            dataset_h5ad_path dataset_total_cell_count #> 7  4546e757-34d0-4d17-be06-538318925fcd.h5ad                     2859 #> 25 6202a243-b713-4e12-9ced-c387f8483dea.h5ad                     7294 tabula_muris_liver_ids <- c(\"4546e757-34d0-4d17-be06-538318925fcd\", \"6202a243-b713-4e12-9ced-c387f8483dea\")  seurat_obj <- get_seurat(   census,   organism = \"Mus musculus\",   obs_value_filter = \"dataset_id %in% tabula_muris_liver_ids\" ) table(seurat_obj$assay) #>  #> 10x 3' transcription profiling                      10x 3' v1  #>                              0                              0  #>                      10x 3' v2                      10x 3' v3  #>                           7294                              0  #>                      10x 5' v1                      DroNc-seq  #>                              0                              0  #>                       Drop-seq                      Smart-seq  #>                              0                              0  #>                   Smart-seq v4                     Smart-seq2  #>                              0                           2859  #>                    sci-RNA-seq  #>                              0"},{"path":"/articles/comp_bio_data_integration.html","id":"gene-length-normalization-of-smart-seq2-data-","dir":"Articles","previous_headings":"","what":"Gene-length normalization of Smart-Seq2 data.","title":"Integrating multi-dataset slices of data with Seurat","text":"Smart-seq2 read counts normalized gene length. Lets first get gene lengths var.feature_length. Now can use normalize Smart-seq data. let’s split object assay. normalize Smart-seq slice using gene lengths merge back single object.","code":"smart_seq_gene_lengths <- seurat_obj$RNA[[]]$feature_length seurat_obj.list <- SplitObject(seurat_obj, split.by = \"assay\") seurat_obj.list[[\"Smart-seq2\"]][[\"RNA\"]]@counts <- seurat_obj.list[[\"Smart-seq2\"]][[\"RNA\"]]@counts / smart_seq_gene_lengths seurat_obj <- merge(seurat_obj.list[[1]], seurat_obj.list[[2]])"},{"path":"/articles/comp_bio_data_integration.html","id":"integration-with-seurat","dir":"Articles","previous_headings":"","what":"Integration with Seurat","title":"Integrating multi-dataset slices of data with Seurat","text":"use native integration capabilities Seurat. comprehensive usage best practices Seurat intergation please refer doc site Seurat.","code":""},{"path":"/articles/comp_bio_data_integration.html","id":"inspecting-data-prior-to-integration","dir":"Articles","previous_headings":"Integration with Seurat","what":"Inspecting data prior to integration","title":"Integrating multi-dataset slices of data with Seurat","text":"Let’s take look strength batch effects data. perform embedding visualization via UMAP. Let’s basic data normalization variable gene selection now perform PCA UMAP   can see batch effects strong cells cluster primarily assay cell_type. Properly integrated embedding principle cluster primarily cell_type, assay best randomly distributed.","code":"seurat_obj <- SCTransform(seurat_obj) seurat_obj <- FindVariableFeatures(seurat_obj, selection.method = \"vst\", nfeatures = 2000) seurat_obj <- RunPCA(seurat_obj, features = VariableFeatures(object = seurat_obj)) seurat_obj <- RunUMAP(seurat_obj, dims = 1:30) # By assay p1 <- DimPlot(seurat_obj, reduction = \"umap\", group.by = \"assay\") p1 # By cell type p2 <- DimPlot(seurat_obj, reduction = \"umap\", group.by = \"cell_type\") p2"},{"path":"/articles/comp_bio_data_integration.html","id":"data-integration-with-seurat","dir":"Articles","previous_headings":"Integration with Seurat","what":"Data integration with Seurat","title":"Integrating multi-dataset slices of data with Seurat","text":"Whenever query fetch Census data multiple datasets integration needs performed evidenced batch effects observed. paramaters Seurat used notebook selected model run quickly. best practices integration single-cell data using Seurat please refer documentation page. seurat_d reading article integrated cell atlas human lung health disease Sikkema et al. perfomed integration 43 datasets Lung. focus metadata Census can batch information integration.","code":""},{"path":"/articles/comp_bio_data_integration.html","id":"integration-across-datasets-using-dataset_id","dir":"Articles","previous_headings":"Integration with Seurat > Data integration with Seurat","what":"Integration across datasets using dataset_id","title":"Integrating multi-dataset slices of data with Seurat","text":"cells Census annotated dataset come \"dataset_id\". great place start integration. let’s run Seurat integration pipeline. First define model batch set dataset_id. Firs normalize select variable genes seperated batch key dataset_id Now perform integration. Let’s inspect results normalization UMAP visulization. plot UMAP.   Great! can see clustering longer mainly driven assay, albeit still contributing . Great! can see clustering longer mainly driven assay, albeit still contributing .","code":"# split the dataset into a list of two seurat objects for each dataset seurat_obj.list <- SplitObject(seurat_obj, split.by = \"dataset_id\")  # normalize each dataset independently seurat_obj.list <- lapply(X = seurat_obj.list, FUN = function(x) {   x <- SCTransform(x) })  # select features for integration features <- SelectIntegrationFeatures(object.list = seurat_obj.list) seurat_obj.list <- PrepSCTIntegration(seurat_obj.list, anchor.features = features) seurat_obj.anchors <- FindIntegrationAnchors(object.list = seurat_obj.list, anchor.features = features, normalization.method = \"SCT\") seurat_obj.combined <- IntegrateData(anchorset = seurat_obj.anchors, normalization.method = \"SCT\") DefaultAssay(seurat_obj.combined) <- \"integrated\"  # Run the standard workflow for visualization and clustering seurat_obj.combined <- ScaleData(seurat_obj.combined, verbose = FALSE) seurat_obj.combined <- RunPCA(seurat_obj.combined, npcs = 30, verbose = FALSE) seurat_obj.combined <- RunUMAP(seurat_obj.combined, reduction = \"pca\", dims = 1:30) # By assay p1 <- DimPlot(seurat_obj.combined, reduction = \"umap\", group.by = \"assay\") p1 # By cell type p2 <- DimPlot(seurat_obj.combined, reduction = \"umap\", group.by = \"cell_type\") p2"},{"path":"/articles/comp_bio_data_integration.html","id":"integration-across-datasets-using-dataset_id-and-controlling-for-batch-using-donor_id","dir":"Articles","previous_headings":"Integration with Seurat > Data integration with Seurat","what":"Integration across datasets using dataset_id and controlling for batch using donor_id","title":"Integrating multi-dataset slices of data with Seurat","text":"Similar dataset_id, cells Census annotated donor_id. definition donor_id depends dataset left discretion data curators. However still rich information can used batch variable integration. donor_id guaranteed unique across cells Census, strongly recommend concatenating dataset_id donor_id use batch separator Seurat Now perform integration. inspect new results UMAP. Plot UMAP.   can see using dataset_id donor_id batch cells now mostly cluster cell type.","code":"# split the dataset into a list of two seurat objects for each dataset seurat_obj.list <- SplitObject(seurat_obj, split.by = \"dataset_id\")  # normalize each dataset independently controlling for batch seurat_obj.list <- lapply(X = seurat_obj.list, FUN = function(x) {   x <- SCTransform(x, vars.to.regress = \"donor_id\") })  # select features for integration features <- SelectIntegrationFeatures(object.list = seurat_obj.list) seurat_obj.list <- PrepSCTIntegration(seurat_obj.list, anchor.features = features) seurat_obj.anchors <- FindIntegrationAnchors(object.list = seurat_obj.list, anchor.features = features, normalization.method = \"SCT\") #> Finding all pairwise anchors #> Running CCA #> Merging objects #> Finding neighborhoods #> Finding anchors #>  Found 7209 anchors #> Filtering anchors #>  Retained 5036 anchors seurat_obj.combined <- IntegrateData(anchorset = seurat_obj.anchors, normalization.method = \"SCT\") #> [1] 1 #> Warning: Different cells and/or features from existing assay SCT #> Warning: Layer counts isn't present in the assay object; returning NULL #> [1] 2 #> Warning: Different cells and/or features from existing assay SCT #> Layer counts isn't present in the assay object; returning NULL #> Merging dataset 1 into 2 #> Extracting anchors for merged samples #> Finding integration vectors #> Finding integration vector weights #> Integrating data #> Warning: Layer counts isn't present in the assay object; returning NULL #> Warning: Assay integrated changing from Assay to SCTAssay #> Warning: Layer counts isn't present in the assay object; returning NULL #> Warning: Different cells and/or features from existing assay SCT DefaultAssay(seurat_obj.combined) <- \"integrated\"  # Run the standard workflow for visualization and clustering seurat_obj.combined <- RunPCA(seurat_obj.combined, npcs = 30, verbose = FALSE) seurat_obj.combined <- RunUMAP(seurat_obj.combined, reduction = \"pca\", dims = 1:30) #> 20:56:54 UMAP embedding parameters a = 0.9922 b = 1.112 #> 20:56:54 Read 10153 rows and found 30 numeric columns #> 20:56:54 Using Annoy for neighbor search, n_neighbors = 30 #> 20:56:54 Building Annoy index with metric = cosine, n_trees = 50 #> 0%   10   20   30   40   50   60   70   80   90   100% #> [----|----|----|----|----|----|----|----|----|----| #> **************************************************| #> 20:56:57 Writing NN index file to temp file /tmp/RtmpRaLBMq/file222876a759fd9 #> 20:56:57 Searching Annoy index using 1 thread, search_k = 3000 #> 20:57:02 Annoy recall = 100% #> 20:57:03 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 30 #> 20:57:05 Initializing from normalized Laplacian + noise (using RSpectra) #> 20:57:05 Commencing optimization for 200 epochs, with 410512 positive edges #> 20:57:12 Optimization finished # By assay p1 <- DimPlot(seurat_obj.combined, reduction = \"umap\", group.by = \"assay\") p1 # By cell type p2 <- DimPlot(seurat_obj.combined, reduction = \"umap\", group.by = \"cell_type\") p2"},{"path":"/articles/comp_bio_data_integration.html","id":"integration-across-datasets-using-dataset_id-and-controlling-for-batch-using-donor_id-assay_ontology_term_id-suspension_type-","dir":"Articles","previous_headings":"Integration with Seurat > Data integration with Seurat","what":"Integration across datasets using dataset_id and controlling for batch using donor_id + assay_ontology_term_id + suspension_type.","title":"Integrating multi-dataset slices of data with Seurat","text":"cases one dataset may contain multiple assay types /multiple suspension types (cell vs nucleus), important consider metadata batches. Therefore, comprehensive definition batch Census can accomplished combining cell metadata dataset_id, donor_id, assay_ontology_term_id suspension_type, latter encode EFO ids assay types. example, two datasets used contain cells one assay , one suspension type . Thus make difference include metadata part batch. implementation look line","code":"# EXAMPLE, DON'T RUN.  # split the dataset into a list of seurat objects for each dataset seurat_obj.list <- SplitObject(seurat_obj, split.by = \"dataset_id\")  # normalize each dataset independently controlling for batch seurat_obj.list <- lapply(X = seurat_obj.list, FUN = function(x) {   x <- SCTransform(x, vars.to.regress = c(\"donor_id\", \"assay_ontology_term_id\", \"suspension_type\")) })  # select features for integration features <- SelectIntegrationFeatures(object.list = seurat_obj.list)  # integrate seurat_obj.list <- PrepSCTIntegration(seurat_obj.list, anchor.features = features) seurat_obj.anchors <- FindIntegrationAnchors(object.list = seurat_obj.list, anchor.features = features, normalization.method = \"SCT\") seurat_obj.combined <- IntegrateData(anchorset = seurat_obj.anchors, normalization.method = \"SCT\")"},{"path":"/articles/comp_bio_normalizing_full_gene_sequencing.html","id":"opening-the-census","dir":"Articles","previous_headings":"","what":"Opening the census","title":"Normalizing full-length gene sequencing data","text":"First open Census: can learn cellxgene.census methods accessing corresponding documentation, example ?cellxgene.census::open_soma.","code":"library(\"Seurat\") census <- cellxgene.census::open_soma()"},{"path":"/articles/comp_bio_normalizing_full_gene_sequencing.html","id":"fetching-full-length-example-sequencing-data-smart-seq","dir":"Articles","previous_headings":"","what":"Fetching full-length example sequencing data (Smart-Seq)","title":"Normalizing full-length gene sequencing data","text":"Let’s get example data, case ’ll fetch cells relatively small dataset derived Smart-Seq2 technology performs full-length gene sequencing: Collection: Tabula Muris Senis Dataset: Liver - single-cell transcriptomic atlas characterizes ageing tissues mouse - Smart-seq2 Let’s first find dataset’s id using dataset table Census. Now can use id fetch data. Let’s make sure data contains Smart-Seq2 cells. Great! can see small dataset containing 2,859 cells. Now let’s proceed normalize gene lengths.","code":"liver_dataset <- as.data.frame(   census$get(\"census_info\")$get(\"datasets\")   $read(value_filter = \"dataset_title == 'Liver - A single-cell transcriptomic atlas characterizes ageing tissues in the mouse - Smart-seq2'\")   $concat() ) liver_dataset #>   soma_joinid #> 1         125 #>                                                                                                                                                                                                                                                                                                        citation #> 1 Publication: https://doi.org/10.1038/s41586-020-2496-1 Dataset Version: https://datasets.cellxgene.cziscience.com/d32c289e-e881-4140-8db4-078ec04c942f.h5ad curated and distributed by CZ CELLxGENE Discover in Collection: https://cellxgene.cziscience.com/collections/0b9d8a04-bb9d-44da-aa27-705bb65b54eb #>                          collection_id    collection_name            collection_doi #> 1 0b9d8a04-bb9d-44da-aa27-705bb65b54eb Tabula Muris Senis 10.1038/s41586-020-2496-1 #>                             dataset_id                   dataset_version_id #> 1 4546e757-34d0-4d17-be06-538318925fcd d32c289e-e881-4140-8db4-078ec04c942f #>                                                                                       dataset_title #> 1 Liver - A single-cell transcriptomic atlas characterizes ageing tissues in the mouse - Smart-seq2 #>                           dataset_h5ad_path dataset_total_cell_count #> 1 4546e757-34d0-4d17-be06-538318925fcd.h5ad                     2859 liver_dataset_id <- liver_dataset[1, \"dataset_id\"] liver_seurat <- cellxgene.census::get_seurat(   census,   organism = \"Mus musculus\",   obs_value_filter = paste0(\"dataset_id == '\", liver_dataset_id, \"'\") ) table(liver_seurat$assay) #>  #> 10x 3' transcription profiling                      10x 3' v1  #>                              0                              0  #>                      10x 3' v2                      10x 3' v3  #>                              0                              0  #>                      10x 5' v1                      DroNc-seq  #>                              0                              0  #>                       Drop-seq                      Smart-seq  #>                              0                              0  #>                   Smart-seq v4                     Smart-seq2  #>                              0                           2859  #>                    sci-RNA-seq  #>                              0"},{"path":"/articles/comp_bio_normalizing_full_gene_sequencing.html","id":"normalizing-expression-to-account-for-gene-length","dir":"Articles","previous_headings":"","what":"Normalizing expression to account for gene length","title":"Normalizing full-length gene sequencing data","text":"default cellxgene_census::get_seurat() fetches genes Census. let’s first identify genes measured dataset subset Seurat obect include . goal can use “Dataset Presence Matrix” census$get(\"census_data\")$get(\"mus_musculus\")$ms$get(\"RNA\")$get(\"feature_dataset_presence_matrix\"). boolean matrix N x M N number datasets, M number genes Census, 1 entry indicates gene measured dataset. (Note Seurat objects transposed layout M x N.) Let’s get genes measured dataset. can see genes Census 17,992 measured dataset. Now let’s normalize genes gene length. can easily Census gene lengths included gene metadata feature_length. done! can now see real numbers instead integers.","code":"liver_seurat #> An object of class Seurat  #> 52437 features across 2859 samples within 1 assay  #> Active assay: RNA (52437 features, 0 variable features) #>  2 layers present: counts, data liver_dataset_joinid <- liver_dataset$soma_joinid[1] presence_matrix <- cellxgene.census::get_presence_matrix(census, \"Mus musculus\", \"RNA\") presence_matrix <- presence_matrix$take(liver_dataset_joinid) gene_presence <- as.vector(presence_matrix$get_one_based_matrix())  liver_seurat <- liver_seurat[gene_presence, ] liver_seurat #> An object of class Seurat  #> 17992 features across 2859 samples within 1 assay  #> Active assay: RNA (17992 features, 0 variable features) #>  2 layers present: counts, data GetAssayData(liver_seurat[1:5, 1:5], slot = \"data\") #> Warning: The `slot` argument of `GetAssayData()` is deprecated as of SeuratObject 5.0.0. #> i Please use the `layer` argument instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated. #> 5 x 5 sparse Matrix of class \"dgCMatrix\" #>                    cell37846 cell37847 cell37848 cell37849 cell37850 #> ENSMUSG00000021124         .         .      1611         .         4 #> ENSMUSG00000039377         .         .      2040         .        43 #> ENSMUSG00000029439         .         .         .         .         . #> ENSMUSG00000027792       378         .         .         .         . #> ENSMUSG00000074896         .         .         .         .         . gene_lengths <- liver_seurat$RNA@meta.features$feature_length liver_seurat <- SetAssayData(   liver_seurat,   new.data = sweep(GetAssayData(liver_seurat, slot = \"data\"), 1, gene_lengths, \"/\") ) GetAssayData(liver_seurat[1:5, 1:5], slot = \"data\") #> 5 x 5 sparse Matrix of class \"dgCMatrix\" #>                     cell37846 cell37847 cell37848 cell37849  cell37850 #> ENSMUSG00000021124 .                  . 0.9993797         . 0.00248139 #> ENSMUSG00000039377 .                  . 0.8955224         . 0.01887621 #> ENSMUSG00000029439 .                  . .                 . .          #> ENSMUSG00000027792 0.05607477         . .                 . .          #> ENSMUSG00000074896 .                  . .                 . ."},{"path":"/articles/comp_bio_normalizing_full_gene_sequencing.html","id":"validation-through-clustering-exploration","dir":"Articles","previous_headings":"","what":"Validation through clustering exploration","title":"Normalizing full-length gene sequencing data","text":"Let’s perform basic clustering analysis see cell types cluster expected using normalized counts. First basic filtering cells genes. normalize account sequencing depth transform data log scale. subset highly variable genes. finally scale values across gene axis. Now can proceed clustering analysis.  exceptions can see cells cell type cluster near serves sanity check gene-length normalization applied. Don’t forget close census.","code":"cells_per_gene <- rowSums(GetAssayData(liver_seurat, slot = \"counts\") > 0) genes_per_cell <- Matrix::colSums(liver_seurat$RNA@counts > 0) liver_seurat <- liver_seurat[cells_per_gene >= 5, genes_per_cell >= 500] liver_seurat <- Seurat::NormalizeData(   liver_seurat,   normalization.method = \"LogNormalize\",   scale.factor = 10000 ) liver_seurat <- Seurat::FindVariableFeatures(   liver_seurat,   selection.method = \"vst\",   nfeatures = 1000 ) all.genes <- rownames(liver_seurat) liver_seurat <- Seurat::ScaleData(liver_seurat, features = all.genes) liver_seurat <- RunPCA(   liver_seurat,   features = VariableFeatures(object = liver_seurat) ) liver_seurat <- FindNeighbors(liver_seurat, dims = 1:40) liver_seurat <- RunUMAP(liver_seurat, dims = 1:40) DimPlot(liver_seurat, reduction = \"umap\", group.by = \"cell_type\") census$close()"},{"path":"/articles/comp_bio_summarize_axis_query.html","id":"opening-the-census","dir":"Articles","previous_headings":"","what":"Opening the Census","title":"Summarizing cell and gene metadata","text":"cellxgene.census R package contains convenient API open version Census (default, newest stable version). open Census, close census$close(). can automated using .exit(census$close(), add = TRUE) immediately census <- open_soma(). can learn cellxgene.census methods accessing corresponding documentation. example ?cellxgene.census::open_soma.","code":"library(\"cellxgene.census\") census <- open_soma()"},{"path":"/articles/comp_bio_summarize_axis_query.html","id":"summarizing-cell-metadata","dir":"Articles","previous_headings":"","what":"Summarizing cell metadata","title":"Summarizing cell and gene metadata","text":"Census open can use TileDB-SOMA methods SOMACollection. can thus access metadata SOMADataFrame objects encoding cell gene metadata. Tips: can read entire SOMADataFrame R using .data.frame(soma_df$read()$concat()). Queries much faster request DataFrame columns required analysis (e.g. column_names = c(\"soma_joinid\", \"cell_type_ontology_term_id\")). can also refine query results using value_filter, filter census matching records.","code":""},{"path":"/articles/comp_bio_summarize_axis_query.html","id":"example-summarize-all-cell-types","dir":"Articles","previous_headings":"Summarizing cell metadata","what":"Example: Summarize all cell types","title":"Summarizing cell and gene metadata","text":"example reads cell metadata (obs) R data frame summarize variety ways.","code":"human <- census$get(\"census_data\")$get(\"homo_sapiens\")  # Read obs into an R data frame (tibble). obs_df <- human$obs$read(column_names = c(\"cell_type\")) obs_df <- as.data.frame(obs_df$concat())  # Find all unique values in the cell_type column. unique_cell_type <- unique(obs_df$cell_type)  cat(   \"There are\",   length(unique_cell_type),   \"cell types in the Census! The first few are: \",   paste(head(unique_cell_type), collapse = \", \") ) #> There are 698 cell types in the Census! The first few are:  plasma cell, mature B cell, macrophage, follicular dendritic cell, plasmacytoid dendritic cell, conventional dendritic cell"},{"path":"/articles/comp_bio_summarize_axis_query.html","id":"example-summarize-a-subset-of-cell-types-selected-with-a-value_filter","dir":"Articles","previous_headings":"Summarizing cell metadata","what":"Example: Summarize a subset of cell types, selected with a value_filter","title":"Summarizing cell and gene metadata","text":"example utilizes SOMA “value filter” read subset cells tissue_ontology_term_id equal UBERON:0002048 (lung tissue), summarizes query result. can also define much complex value filters. example: combine terms & | use %% operator query multiple values","code":"# Read cell_type terms for cells which have a specific tissue term LUNG_TISSUE <- \"UBERON:0002048\"  obs_df <- human$obs$read(column_names = c(\"cell_type\"), value_filter = paste0(\"tissue_ontology_term_id == '\", LUNG_TISSUE, \"'\")) obs_df <- as.data.frame(obs_df$concat())  # Find all unique values in the cell_type column as an R data frame. unique_cell_type <- unique(obs_df$cell_type) cat(   \"There are \",   length(unique_cell_type),   \" cell types in the Census where tissue_ontology_term_id == \",   LUNG_TISSUE,   \"!\\nThe first few are:\",   paste(head(unique_cell_type), collapse = \", \"),   \"\\n\" ) #> There are  202  cell types in the Census where tissue_ontology_term_id ==  UBERON:0002048 ! #> The first few are: Schwann cell, immature Schwann cell, neuron, Schwann cell precursor, neural progenitor cell, lung ciliated cell  # Report the 10 most common top_10 <- sort(table(obs_df$cell_type), decreasing = TRUE)[1:10] cat(   \"The top 10 cell types where tissue_ontology_term_id ==\",   LUNG_TISSUE,   \"are: \",   paste(names(top_10), collapse = \", \") ) #> The top 10 cell types where tissue_ontology_term_id == UBERON:0002048 are:  unknown, alveolar macrophage, CD8-positive, alpha-beta T cell, CD4-positive, alpha-beta T cell, macrophage, type II pneumocyte, classical monocyte, natural killer cell, malignant cell, epithelial cell of lower respiratory tract # You can also do more complex queries, such as testing for inclusion in a list of values obs_df <- human$obs$read(   column_names = c(\"cell_type_ontology_term_id\"),   value_filter = \"tissue_ontology_term_id %in% c('UBERON:0002082', 'UBERON:OOO2084', 'UBERON:0002080')\" )  obs_df <- as.data.frame(obs_df$concat())  # Summarize top_10 <- sort(table(obs_df$cell_type_ontology_term_id), decreasing = TRUE)[1:10] print(top_10) #>  #> CL:0000746 CL:0008034 CL:0002131 CL:0002548 CL:0000115 CL:0000763 CL:0000057 CL:0000669  #>     160974      99458      96953      79733      79626      35560      33075      27515  #>    unknown CL:0002144  #>      23613      18593"},{"path":"/articles/comp_bio_summarize_axis_query.html","id":"full-census-metadata-stats","dir":"Articles","previous_headings":"","what":"Full Census metadata stats","title":"Summarizing cell and gene metadata","text":"example queries organisms Census, summarizes diversity various metadata labels.","code":"cols_to_query <- c(   \"cell_type_ontology_term_id\",   \"assay_ontology_term_id\",   \"tissue_ontology_term_id\" )  total_cells <- 0 for (organism in census$get(\"census_data\")$names()) {   print(organism)    obs_df <- census$get(\"census_data\")$get(organism)$obs$read(column_names = cols_to_query)   obs_df <- as.data.frame(obs_df$concat())    total_cells <- total_cells + nrow(obs_df)   for (col in cols_to_query) {     cat(\"  Unique \", col, \" values: \", length(unique(obs_df[[col]])), \"\\n\")   } } #> [1] \"homo_sapiens\" #>   Unique  cell_type_ontology_term_id  values:  698  #>   Unique  assay_ontology_term_id  values:  24  #>   Unique  tissue_ontology_term_id  values:  267  #> [1] \"mus_musculus\" #>   Unique  cell_type_ontology_term_id  values:  364  #>   Unique  assay_ontology_term_id  values:  11  #>   Unique  tissue_ontology_term_id  values:  84 cat(\"Complete Census contains \", total_cells, \" cells.\") #> Complete Census contains  115556140  cells."},{"path":"/articles/comp_bio_summarize_axis_query.html","id":"close-the-census","dir":"Articles","previous_headings":"Full Census metadata stats","what":"Close the census","title":"Summarizing cell and gene metadata","text":"use, census object closed release memory resources. also closes SOMA objects accessed via top-level census. Closing can automated using .exit(census$close(), add = TRUE) immediately census <- open_soma().","code":"census$close()"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Chan Zuckerberg Initiative Foundation. Author, maintainer, copyright holder, funder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chan Zuckerberg Initiative Foundation (2024). cellxgene.census: CZ CELLxGENE Discover Cell Census. R package version 1.15.0, https://github.com/chanzuckerberg/cellxgene-census.","code":"@Manual{,   title = {cellxgene.census: CZ CELLxGENE Discover Cell Census},   author = {{Chan Zuckerberg Initiative Foundation}},   year = {2024},   note = {R package version 1.15.0},   url = {https://github.com/chanzuckerberg/cellxgene-census}, }"},{"path":"/index.html","id":"r-package-of-cz-cellxgene-discover-census","dir":"","previous_headings":"","what":"CZ CELLxGENE Discover Cell Census","title":"CZ CELLxGENE Discover Cell Census","text":"documentation R package cellxgene.census part CZ CELLxGENE Discover Census. full details Census data capabilities please go main Census site. cellxgene.census provides API efficiently access cloud-hosted Census single-cell data R. just seconds users can access slice Census data using cell gene filters across hundreds single-cell datasets. Census data can fetched iterative fashion bigger--memory slices data, quickly exported basic R structures, well Seurat SingleCellExperiment objects downstream analysis.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"CZ CELLxGENE Discover Cell Census","text":"installing Ubuntu, may need install following libraries via apt install, libxml2-dev libssl-dev libcurl4-openssl-dev. addition must cmake v3.21 greater. installing MacOS, need install developer tools Xcode. Windows supported. R session install cellxgene.census R-Universe. able export Census data Seurat SingleCellExperiment also need install respective packages.","code":"install.packages(   \"cellxgene.census\",   repos=c('https://chanzuckerberg.r-universe.dev', 'https://cloud.r-project.org') ) # Seurat install.packages(\"Seurat\")  # SingleCellExperiment if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"SingleCellExperiment\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"CZ CELLxGENE Discover Cell Census","text":"Check vignettes “Articles” section navigation bar site. highly recommend following vignettes starting point: Querying fetching single-cell data cell/gene metadata Learning CZ CELLxGENE Discover Census can also check quick start guide main Census site.","code":""},{"path":"/index.html","id":"example-seurat-and-singlecellexperiment-query","dir":"","previous_headings":"Usage","what":"Example Seurat and SingleCellExperiment query","title":"CZ CELLxGENE Discover Cell Census","text":"following creates Seurat object -demand sympathetic neurons Census filtering genes ENSG00000161798, ENSG00000188229. following retrieves data SingleCellExperiment object.","code":"library(\"cellxgene.census\") library(\"Seurat\")  census <- open_soma()  organism <- \"Homo sapiens\" gene_filter <- \"feature_id %in% c('ENSG00000107317', 'ENSG00000106034')\" cell_filter <-  \"cell_type == 'sympathetic neuron'\" cell_columns <- c(\"assay\", \"cell_type\", \"tissue\", \"tissue_general\", \"suspension_type\", \"disease\")  seurat_obj <- get_seurat(    census = census,    organism = organism,    var_value_filter = gene_filter,    obs_value_filter = cell_filter,    obs_column_names = cell_columns ) library(\"SingleCellExperiment\")  sce_obj <- get_single_cell_experiment(    census = census,    organism = organism,    var_value_filter = gene_filter,    obs_value_filter = cell_filter,    obs_column_names = cell_columns )"},{"path":"/index.html","id":"for-more-help","dir":"","previous_headings":"","what":"For More Help","title":"CZ CELLxGENE Discover Cell Census","text":"help, please go visit main Census site. believe found security issue, appreciate notification. Please send email security@chanzuckerberg.com.","code":""},{"path":"/reference/download_source_h5ad.html","id":null,"dir":"Reference","previous_headings":"","what":"Download source H5AD to local file name. — download_source_h5ad","title":"Download source H5AD to local file name. — download_source_h5ad","text":"Download source H5AD local file name.","code":""},{"path":"/reference/download_source_h5ad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download source H5AD to local file name. — download_source_h5ad","text":"","code":"download_source_h5ad(   dataset_id,   file,   overwrite = FALSE,   census_version = \"stable\",   census = NULL )"},{"path":"/reference/download_source_h5ad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download source H5AD to local file name. — download_source_h5ad","text":"dataset_id dataset_id interest. file Local file name store H5AD file. overwrite TRUE allow overwriting existing file. census_version desired Census version. census open Census handle census_version. provided, opened closed automatically; efficient reuse handle calling download_source_h5ad() multiple times.","code":""},{"path":"/reference/download_source_h5ad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download source H5AD to local file name. — download_source_h5ad","text":"","code":"download_source_h5ad(\"0895c838-e550-48a3-a777-dbcd35d30272\", \"/tmp/data.h5ad\", overwrite = TRUE)"},{"path":"/reference/get_census_mirror.html","id":null,"dir":"Reference","previous_headings":"","what":"Get locator information about a Census mirror — get_census_mirror","title":"Get locator information about a Census mirror — get_census_mirror","text":"Get locator information Census mirror","code":""},{"path":"/reference/get_census_mirror.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get locator information about a Census mirror — get_census_mirror","text":"","code":"get_census_mirror(mirror)"},{"path":"/reference/get_census_mirror.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get locator information about a Census mirror — get_census_mirror","text":"mirror Name mirror.","code":""},{"path":"/reference/get_census_mirror.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get locator information about a Census mirror — get_census_mirror","text":"List mirror information","code":""},{"path":"/reference/get_census_mirror.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get locator information about a Census mirror — get_census_mirror","text":"","code":"get_census_mirror(\"AWS-S3-us-west-2\") #> $provider #> [1] \"S3\" #>  #> $base_uri #> [1] \"s3://cellxgene-census-public-us-west-2/\" #>  #> $embeddings_base_uri #> [1] \"s3://cellxgene-contrib-public/\" #>  #> $region #> [1] \"us-west-2\" #>  #> $alias #> [1] \"\" #>"},{"path":"/reference/get_census_mirror_directory.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the directory of Census mirrors currently available — get_census_mirror_directory","title":"Get the directory of Census mirrors currently available — get_census_mirror_directory","text":"Get directory Census mirrors currently available","code":""},{"path":"/reference/get_census_mirror_directory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the directory of Census mirrors currently available — get_census_mirror_directory","text":"","code":"get_census_mirror_directory()"},{"path":"/reference/get_census_mirror_directory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the directory of Census mirrors currently available — get_census_mirror_directory","text":"Nested list information available mirrors","code":""},{"path":"/reference/get_census_mirror_directory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the directory of Census mirrors currently available — get_census_mirror_directory","text":"","code":"get_census_mirror_directory() #> $default #> $default$provider #> [1] \"S3\" #>  #> $default$base_uri #> [1] \"s3://cellxgene-census-public-us-west-2/\" #>  #> $default$embeddings_base_uri #> [1] \"s3://cellxgene-contrib-public/\" #>  #> $default$region #> [1] \"us-west-2\" #>  #> $default$alias #> [1] \"default\" #>  #>  #> $`AWS-S3-us-west-2` #> $`AWS-S3-us-west-2`$provider #> [1] \"S3\" #>  #> $`AWS-S3-us-west-2`$base_uri #> [1] \"s3://cellxgene-census-public-us-west-2/\" #>  #> $`AWS-S3-us-west-2`$embeddings_base_uri #> [1] \"s3://cellxgene-contrib-public/\" #>  #> $`AWS-S3-us-west-2`$region #> [1] \"us-west-2\" #>  #> $`AWS-S3-us-west-2`$alias #> [1] \"\" #>  #>"},{"path":"/reference/get_census_version_description.html","id":null,"dir":"Reference","previous_headings":"","what":"Get release description for a Census version — get_census_version_description","title":"Get release description for a Census version — get_census_version_description","text":"Get release description Census version","code":""},{"path":"/reference/get_census_version_description.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get release description for a Census version — get_census_version_description","text":"","code":"get_census_version_description(census_version)"},{"path":"/reference/get_census_version_description.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get release description for a Census version — get_census_version_description","text":"census_version census version name.","code":""},{"path":"/reference/get_census_version_description.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get release description for a Census version — get_census_version_description","text":"List release location metadata","code":""},{"path":"/reference/get_census_version_description.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get release description for a Census version — get_census_version_description","text":"","code":"as.data.frame(get_census_version_description(\"stable\")) #>   release_date release_build #> 1                 2024-07-01 #>                                                              soma.uri #> 1 s3://cellxgene-census-public-us-west-2/cell-census/2024-07-01/soma/ #>               soma.relative_uri soma.s3_region #> 1 /cell-census/2024-07-01/soma/      us-west-2 #>                                                              h5ads.uri #> 1 s3://cellxgene-census-public-us-west-2/cell-census/2024-07-01/h5ads/ #>               h5ads.relative_uri h5ads.s3_region do_not_delete  lts  alias #> 1 /cell-census/2024-07-01/h5ads/       us-west-2          TRUE TRUE stable #>   census_version #> 1         stable"},{"path":"/reference/get_census_version_directory.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the directory of Census releases currently available — get_census_version_directory","title":"Get the directory of Census releases currently available — get_census_version_directory","text":"Get directory Census releases currently available","code":""},{"path":"/reference/get_census_version_directory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the directory of Census releases currently available — get_census_version_directory","text":"","code":"get_census_version_directory()"},{"path":"/reference/get_census_version_directory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the directory of Census releases currently available — get_census_version_directory","text":"Data frame available cell census releases, including location metadata.","code":""},{"path":"/reference/get_census_version_directory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the directory of Census releases currently available — get_census_version_directory","text":"","code":"get_census_version_directory() #>            release_date release_build #> stable                     2024-07-01 #> latest                     2024-07-08 #> 2023-05-15                 2023-05-15 #> 2023-07-25                 2023-07-25 #> 2023-12-15                 2023-12-15 #> 2024-05-20                 2024-05-20 #> 2024-06-10                 2024-06-10 #> 2024-06-17                 2024-06-17 #> 2024-06-24                 2024-06-24 #> 2024-07-01                 2024-07-01 #> 2024-07-08                 2024-07-08 #>                                                                       soma.uri #> stable     s3://cellxgene-census-public-us-west-2/cell-census/2024-07-01/soma/ #> latest     s3://cellxgene-census-public-us-west-2/cell-census/2024-07-08/soma/ #> 2023-05-15 s3://cellxgene-census-public-us-west-2/cell-census/2023-05-15/soma/ #> 2023-07-25 s3://cellxgene-census-public-us-west-2/cell-census/2023-07-25/soma/ #> 2023-12-15 s3://cellxgene-census-public-us-west-2/cell-census/2023-12-15/soma/ #> 2024-05-20 s3://cellxgene-census-public-us-west-2/cell-census/2024-05-20/soma/ #> 2024-06-10 s3://cellxgene-census-public-us-west-2/cell-census/2024-06-10/soma/ #> 2024-06-17 s3://cellxgene-census-public-us-west-2/cell-census/2024-06-17/soma/ #> 2024-06-24 s3://cellxgene-census-public-us-west-2/cell-census/2024-06-24/soma/ #> 2024-07-01 s3://cellxgene-census-public-us-west-2/cell-census/2024-07-01/soma/ #> 2024-07-08 s3://cellxgene-census-public-us-west-2/cell-census/2024-07-08/soma/ #>                        soma.relative_uri soma.s3_region #> stable     /cell-census/2024-07-01/soma/      us-west-2 #> latest     /cell-census/2024-07-08/soma/      us-west-2 #> 2023-05-15 /cell-census/2023-05-15/soma/      us-west-2 #> 2023-07-25 /cell-census/2023-07-25/soma/      us-west-2 #> 2023-12-15 /cell-census/2023-12-15/soma/      us-west-2 #> 2024-05-20 /cell-census/2024-05-20/soma/      us-west-2 #> 2024-06-10 /cell-census/2024-06-10/soma/      us-west-2 #> 2024-06-17 /cell-census/2024-06-17/soma/      us-west-2 #> 2024-06-24 /cell-census/2024-06-24/soma/      us-west-2 #> 2024-07-01 /cell-census/2024-07-01/soma/      us-west-2 #> 2024-07-08 /cell-census/2024-07-08/soma/      us-west-2 #>                                                                       h5ads.uri #> stable     s3://cellxgene-census-public-us-west-2/cell-census/2024-07-01/h5ads/ #> latest     s3://cellxgene-census-public-us-west-2/cell-census/2024-07-08/h5ads/ #> 2023-05-15 s3://cellxgene-census-public-us-west-2/cell-census/2023-05-15/h5ads/ #> 2023-07-25 s3://cellxgene-census-public-us-west-2/cell-census/2023-07-25/h5ads/ #> 2023-12-15 s3://cellxgene-census-public-us-west-2/cell-census/2023-12-15/h5ads/ #> 2024-05-20 s3://cellxgene-census-public-us-west-2/cell-census/2024-05-20/h5ads/ #> 2024-06-10 s3://cellxgene-census-public-us-west-2/cell-census/2024-06-10/h5ads/ #> 2024-06-17 s3://cellxgene-census-public-us-west-2/cell-census/2024-06-17/h5ads/ #> 2024-06-24 s3://cellxgene-census-public-us-west-2/cell-census/2024-06-24/h5ads/ #> 2024-07-01 s3://cellxgene-census-public-us-west-2/cell-census/2024-07-01/h5ads/ #> 2024-07-08 s3://cellxgene-census-public-us-west-2/cell-census/2024-07-08/h5ads/ #>                        h5ads.relative_uri h5ads.s3_region do_not_delete  lts #> stable     /cell-census/2024-07-01/h5ads/       us-west-2          TRUE TRUE #> latest     /cell-census/2024-07-08/h5ads/       us-west-2         FALSE   NA #> 2023-05-15 /cell-census/2023-05-15/h5ads/       us-west-2          TRUE TRUE #> 2023-07-25 /cell-census/2023-07-25/h5ads/       us-west-2          TRUE TRUE #> 2023-12-15 /cell-census/2023-12-15/h5ads/       us-west-2          TRUE TRUE #> 2024-05-20 /cell-census/2024-05-20/h5ads/       us-west-2          TRUE   NA #> 2024-06-10 /cell-census/2024-06-10/h5ads/       us-west-2         FALSE   NA #> 2024-06-17 /cell-census/2024-06-17/h5ads/       us-west-2         FALSE   NA #> 2024-06-24 /cell-census/2024-06-24/h5ads/       us-west-2         FALSE   NA #> 2024-07-01 /cell-census/2024-07-01/h5ads/       us-west-2          TRUE TRUE #> 2024-07-08 /cell-census/2024-07-08/h5ads/       us-west-2         FALSE   NA #>             alias #> stable     stable #> latest     latest #> 2023-05-15        #> 2023-07-25        #> 2023-12-15        #> 2024-05-20        #> 2024-06-10        #> 2024-06-17        #> 2024-06-24        #> 2024-07-01        #> 2024-07-08"},{"path":"/reference/get_presence_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the feature dataset presence matrix. — get_presence_matrix","title":"Read the feature dataset presence matrix. — get_presence_matrix","text":"Read feature dataset presence matrix.","code":""},{"path":"/reference/get_presence_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the feature dataset presence matrix. — get_presence_matrix","text":"","code":"get_presence_matrix(census, organism, measurement_name = \"RNA\")"},{"path":"/reference/get_presence_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the feature dataset presence matrix. — get_presence_matrix","text":"census census object cellxgene.census::open_soma(). organism organism query, usually one Homo sapiens Mus musculus measurement_name measurement object query. Defaults RNA.","code":""},{"path":"/reference/get_presence_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read the feature dataset presence matrix. — get_presence_matrix","text":"tiledbsoma::matrixZeroBasedView object dataset join id & feature join id dimensions, filled 1s indicating presence. sparse matrix accessed zero-based indexes since join id's may zero.","code":""},{"path":"/reference/get_presence_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read the feature dataset presence matrix. — get_presence_matrix","text":"","code":"census <- open_soma() #> The stable Census release is currently 2024-07-01. Specify census_version = \"2024-07-01\" in future calls to open_soma() to ensure data consistency. on.exit(census$close(), add = TRUE) print(get_presence_matrix(census, \"Homo sapiens\")$dim()) #> Error in private$check_open_for_read_or_write(): Item must be open for read or write. s3://cellxgene-census-public-us-west-2/cell-census/2024-07-01/soma/"},{"path":"/reference/get_seurat.html","id":null,"dir":"Reference","previous_headings":"","what":"Export Census slices to Seurat — get_seurat","title":"Export Census slices to Seurat — get_seurat","text":"Convenience wrapper around SOMAExperimentAxisQuery, build execute query, return Seurat object.","code":""},{"path":"/reference/get_seurat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export Census slices to Seurat — get_seurat","text":"","code":"get_seurat(   census,   organism,   measurement_name = \"RNA\",   X_layers = c(counts = \"raw\", data = NULL),   obs_value_filter = NULL,   obs_coords = NULL,   obs_column_names = NULL,   obsm_layers = FALSE,   var_value_filter = NULL,   var_coords = NULL,   var_column_names = NULL,   var_index = \"feature_id\" )"},{"path":"/reference/get_seurat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export Census slices to Seurat — get_seurat","text":"census census object, usually returned cellxgene.census::open_soma(). organism organism query, usually one Homo sapiens Mus musculus measurement_name measurement object query. Defaults RNA. X_layers named character X layers add Seurat assay, names names Seurat slots (counts data) values names layers within X. obs_value_filter SOMA value_filter across columns obs dataframe, expressed string. obs_coords set coordinates obs dataframe index, expressed type format supported SOMADataFrame's read() method. obs_column_names Columns fetch obs data frame. obsm_layers Names arrays obsm add cell embeddings; pass FALSE suppress loading dimensional reductions. var_value_filter obs_value_filter var. var_coords obs_coords var. var_column_names Columns fetch var data frame. var_index Name column ‘var’ add feature names.","code":""},{"path":"/reference/get_seurat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export Census slices to Seurat — get_seurat","text":"Seurat object containing sensus slice.","code":""},{"path":"/reference/get_seurat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export Census slices to Seurat — get_seurat","text":"","code":"if (FALSE) { # \\dontrun{ census <- open_soma() seurat_obj <- get_seurat(   census,   organism = \"Homo sapiens\",   obs_value_filter = \"cell_type == 'leptomeningeal cell'\",   var_value_filter = \"feature_id %in% c('ENSG00000107317', 'ENSG00000106034')\" )  seurat_obj  census$close() } # }"},{"path":"/reference/get_single_cell_experiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Export Census slices to SingleCellExperiment — get_single_cell_experiment","title":"Export Census slices to SingleCellExperiment — get_single_cell_experiment","text":"Convenience wrapper around SOMAExperimentAxisQuery, build execute query, return SingleCellExperiment object.","code":""},{"path":"/reference/get_single_cell_experiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export Census slices to SingleCellExperiment — get_single_cell_experiment","text":"","code":"get_single_cell_experiment(   census,   organism,   measurement_name = \"RNA\",   X_layers = c(counts = \"raw\"),   obs_value_filter = NULL,   obs_coords = NULL,   obs_column_names = NULL,   obsm_layers = FALSE,   var_value_filter = NULL,   var_coords = NULL,   var_column_names = NULL,   var_index = \"feature_id\" )"},{"path":"/reference/get_single_cell_experiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export Census slices to SingleCellExperiment — get_single_cell_experiment","text":"census census object, usually returned cellxgene.census::open_soma(). organism organism query, usually one Homo sapiens Mus musculus measurement_name measurement object query. Defaults RNA. X_layers character vector X layers add assays main experiment; may optionally named set name resulting assay (eg. ‘X_layers = c(counts = \"raw\")’ load X layer “‘raw’” assay “‘counts’”); default, loads X layers obs_value_filter SOMA value_filter across columns obs dataframe, expressed string. obs_coords set coordinates obs dataframe index, expressed type format supported SOMADataFrame's read() method. obs_column_names Columns fetch obs data frame. obsm_layers Names arrays obsm add cell embeddings; pass FALSE suppress loading dimensional reductions. var_value_filter obs_value_filter var. var_coords obs_coords var. var_column_names Columns fetch var data frame. var_index Name column ‘var’ add feature names.","code":""},{"path":"/reference/get_single_cell_experiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export Census slices to SingleCellExperiment — get_single_cell_experiment","text":"SingleCellExperiment object containing sensus slice.","code":""},{"path":"/reference/get_single_cell_experiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export Census slices to SingleCellExperiment — get_single_cell_experiment","text":"","code":"if (FALSE) { # \\dontrun{ census <- open_soma() sce_obj <- get_single_cell_experiment(   census,   organism = \"Homo sapiens\",   obs_value_filter = \"cell_type == 'leptomeningeal cell'\",   var_value_filter = \"feature_id %in% c('ENSG00000107317', 'ENSG00000106034')\" )  sce_obj  census$close() } # }"},{"path":"/reference/get_source_h5ad_uri.html","id":null,"dir":"Reference","previous_headings":"","what":"Locate source h5ad file for a dataset. — get_source_h5ad_uri","title":"Locate source h5ad file for a dataset. — get_source_h5ad_uri","text":"Locate source h5ad file dataset.","code":""},{"path":"/reference/get_source_h5ad_uri.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locate source h5ad file for a dataset. — get_source_h5ad_uri","text":"","code":"get_source_h5ad_uri(dataset_id, census_version = \"stable\", census = NULL)"},{"path":"/reference/get_source_h5ad_uri.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locate source h5ad file for a dataset. — get_source_h5ad_uri","text":"dataset_id dataset_id interest. census_version desired Census version. census open Census handle census_version. provided, opened closed automatically; efficient reuse handle calling get_source_h5ad_uri() multiple times.","code":""},{"path":"/reference/get_source_h5ad_uri.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locate source h5ad file for a dataset. — get_source_h5ad_uri","text":"list uri optional s3_region.","code":""},{"path":"/reference/get_source_h5ad_uri.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Locate source h5ad file for a dataset. — get_source_h5ad_uri","text":"","code":"get_source_h5ad_uri(\"0895c838-e550-48a3-a777-dbcd35d30272\") #> $uri #> [1] \"s3://cellxgene-census-public-us-west-2/cell-census/2024-07-01/h5ads/0895c838-e550-48a3-a777-dbcd35d30272.h5ad\" #>  #> $s3_region #> [1] \"us-west-2\" #>"},{"path":"/reference/new_SOMATileDBContext_for_census.html","id":null,"dir":"Reference","previous_headings":"","what":"Create SOMATileDBContext for Census — new_SOMATileDBContext_for_census","title":"Create SOMATileDBContext for Census — new_SOMATileDBContext_for_census","text":"Create SOMATileDBContext suitable using open_soma(). Typically open_soma() creates context automatically, one can created separately order set custom configuration options, share multiple open Census handles.","code":""},{"path":"/reference/new_SOMATileDBContext_for_census.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create SOMATileDBContext for Census — new_SOMATileDBContext_for_census","text":"","code":"new_SOMATileDBContext_for_census(   census_version_description,   mirror = \"default\",   ... )"},{"path":"/reference/new_SOMATileDBContext_for_census.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create SOMATileDBContext for Census — new_SOMATileDBContext_for_census","text":"census_version_description result get_census_version_description() desired Census version. mirror name intended census mirror (get_census_mirror_directory()[[name]] save lookup), NULL configure local file access. ... Custom configuration options.","code":""},{"path":"/reference/new_SOMATileDBContext_for_census.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create SOMATileDBContext for Census — new_SOMATileDBContext_for_census","text":"SOMATileDBContext object open_soma().","code":""},{"path":"/reference/new_SOMATileDBContext_for_census.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create SOMATileDBContext for Census — new_SOMATileDBContext_for_census","text":"","code":"census_desc <- get_census_version_description(\"stable\") ctx <- new_SOMATileDBContext_for_census(census_desc, \"soma.init_buffer_bytes\" = paste(4 * 1024**3)) census <- open_soma(\"stable\", tiledbsoma_ctx = ctx) #> The stable Census release is currently 2024-07-01. Specify census_version = \"2024-07-01\" in future calls to open_soma() to ensure data consistency. census$close()"},{"path":"/reference/open_soma.html","id":null,"dir":"Reference","previous_headings":"","what":"Open the Census — open_soma","title":"Open the Census — open_soma","text":"Open Census","code":""},{"path":"/reference/open_soma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open the Census — open_soma","text":"","code":"open_soma(   census_version = \"stable\",   uri = NULL,   tiledbsoma_ctx = NULL,   mirror = NULL )"},{"path":"/reference/open_soma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open the Census — open_soma","text":"census_version version Census, e.g., \"stable\". uri URI containing Census SOMA objects open instead released version. (supplied, takes precedence census_version.) tiledbsoma_ctx tiledbsoma::SOMATileDBContext built using new_SOMATileDBContext_for_census(). Optional (created automatically) using census_version context need reused. mirror Census mirror access; one names(get_census_mirror_directory()).","code":""},{"path":"/reference/open_soma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open the Census — open_soma","text":"Top-level tiledbsoma::SOMACollection object. use, census closed release memory resources, usually .exit(census$close(), add = TRUE). Closing top-level census also close SOMA objects accessed .","code":""},{"path":"/reference/open_soma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open the Census — open_soma","text":"","code":"census <- open_soma() #> The stable Census release is currently 2024-07-01. Specify census_version = \"2024-07-01\" in future calls to open_soma() to ensure data consistency. as.data.frame(census$get(\"census_info\")$get(\"summary\")$read()$concat()) #>   soma_joinid                      label      value #> 1           0      census_schema_version      2.0.1 #> 2           1          census_build_date 2024-05-20 #> 3           2     dataset_schema_version      5.0.0 #> 4           3           total_cell_count  115556140 #> 5           4          unique_cell_count   60597966 #> 6           5 number_donors_homo_sapiens      17651 #> 7           6 number_donors_mus_musculus       4216 census$close()"}]
