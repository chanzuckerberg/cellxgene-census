[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Chan Zuckerberg Initiative Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/census_axis_query.html","id":"axis-query-example","dir":"Articles","previous_headings":"","what":"Axis Query Example","title":"Axis Query Example","text":"Goal: demonstrate basic axis metadata handling. CZ CELLxGENE Census stores obs (cell) metadata SOMA DataFrame, can queried read R data frame. Cell Census also convenience package simplifies opening census. R data frames -memory objects. Take care queries small enough results fit memory.","code":""},{"path":"/articles/census_axis_query.html","id":"opening-the-census","dir":"Articles","previous_headings":"Axis Query Example","what":"Opening the census","title":"Axis Query Example","text":"cellxgene.census R package contains convenient API open latest version Census. can learn cellxgene.census methods accessing corresponding documentation. example ?cellxgene.census::open_soma.","code":"census <- cellxgene.census::open_soma()"},{"path":"/articles/census_axis_query.html","id":"summarize-census-cell-metadata","dir":"Articles","previous_headings":"Axis Query Example","what":"Summarize Census cell metadata","title":"Axis Query Example","text":"Tips: can read entire SOMA dataframe R using .data.frame(soma_df$read()). Queries much faster request DataFrame columns required analysis (e.g. column_names = c(\"soma_joinid\", \"cell_type_ontology_term_id\")). can also refine query results using value_filter, filter census matching records.","code":""},{"path":"/articles/census_axis_query.html","id":"summarize-all-cell-types","dir":"Articles","previous_headings":"Axis Query Example > Summarize Census cell metadata","what":"Summarize all cell types","title":"Axis Query Example","text":"example reads cell metadata (obs) R data frame summarize variety ways.","code":"human <- census$get(\"census_data\")$get(\"homo_sapiens\")  # Read obs into an R data frame (tibble). obs_df <- as.data.frame(human$obs$read(   column_names = c(\"soma_joinid\", \"cell_type_ontology_term_id\") ))  # Find all unique values in the cell_type_ontology_term_id column. unique_cell_type_ontology_term_id <- unique(obs_df$cell_type_ontology_term_id)  cat(paste(   \"There are\",   length(unique_cell_type_ontology_term_id),   \"cell types in the Cell Census! The first few are:\" )) #> There are 588 cell types in the Cell Census! The first few are: head(unique_cell_type_ontology_term_id) #> [1] \"CL:0000649\" \"CL:0002187\" \"CL:0000148\" \"CL:0000312\" \"CL:0000242\" #> [6] \"CL:0000988\""},{"path":"/articles/census_axis_query.html","id":"summarize-a-subset-of-cell-types-selected-with-a-value_filter","dir":"Articles","previous_headings":"Axis Query Example > Summarize Census cell metadata","what":"Summarize a subset of cell types, selected with a value_filter","title":"Axis Query Example","text":"example utilizes SOMA “value filter” read subset cells tissue_ontology_term_id equal UBERON:0002048 (lung tissue), summarizes query result. can also define much complex value filters. example: combine terms use %% operator query multiple values","code":"# Read cell_type terms for cells which have a specific tissue term LUNG_TISSUE <- \"UBERON:0002048\"  obs_df <- as.data.frame(human$obs$read(   column_names = c(\"cell_type_ontology_term_id\"),   value_filter = paste(\"tissue_ontology_term_id == '\", LUNG_TISSUE, \"'\", sep = \"\") ))  # Find all unique values in the cell_type_ontology_term_id column as an R data frame. unique_cell_type_ontology_term_id <- unique(obs_df$cell_type_ontology_term_id) cat(paste(   \"There are \",   length(unique_cell_type_ontology_term_id),   \" cell types in the Cell Census where tissue_ontology_term_id == \",   LUNG_TISSUE,   \"!\\nThe first few are:\",   sep = \"\" )) #> There are 179 cell types in the Cell Census where tissue_ontology_term_id == UBERON:0002048! #> The first few are: head(unique_cell_type_ontology_term_id) #> [1] \"CL:1000271\" \"CL:0000583\" \"CL:0002063\" \"CL:0000359\" \"CL:1000143\" #> [6] \"CL:0000235\"  # Report the 10 most common top_10 <- sort(table(obs_df$cell_type_ontology_term_id), decreasing = TRUE)[1:10] cat(paste(\"The top 10 cell types where tissue_ontology_term_id ==\", LUNG_TISSUE)) #> The top 10 cell types where tissue_ontology_term_id == UBERON:0002048 print(top_10) #>  #> CL:0000235 CL:0000583 CL:0000624 CL:0000625 CL:0000623 CL:0000003 CL:0002063  #>     524362     330014     273098     251614     168957     168203     163561  #> CL:0000860 CL:0001064 CL:0002632  #>     160365     149067     126058 # You can also do more complex queries, such as testing for inclusion in a list of values obs_df <- as.data.frame(human$obs$read(   column_names = c(\"cell_type_ontology_term_id\"),   value_filter = \"tissue_ontology_term_id %in% c('UBERON:0002082', 'UBERON:OOO2084', 'UBERON:0002080')\" ))  # Summarize top_10 <- sort(table(obs_df$cell_type_ontology_term_id), decreasing = TRUE)[1:10] print(top_10) #>  #> CL:0000746 CL:0008034 CL:0002548 CL:0000115 CL:0002131 CL:0000763 CL:0000669  #>     159096      84750      79618      64190      61830      32088      27515  #> CL:0000003 CL:0000057 CL:0002144  #>      22707      20117      18593"},{"path":"/articles/census_axis_query.html","id":"full-census-stats","dir":"Articles","previous_headings":"Axis Query Example > Summarize Census cell metadata","what":"Full census stats","title":"Axis Query Example","text":"example queries organisms Census, summarizes diversity various metadata labels.","code":"cols_to_query <- c(   \"cell_type_ontology_term_id\",   \"assay_ontology_term_id\",   \"tissue_ontology_term_id\" )  total_cells <- 0 for (organism in census$get(\"census_data\")$names()) {   print(organism)   obs_df <- as.data.frame(     census$get(\"census_data\")$get(organism)$obs$read(column_names = cols_to_query)   )   total_cells <- total_cells + nrow(obs_df)   for (col in cols_to_query) {     cat(paste(\"  Unique \", col, \" values: \", length(unique(obs_df[[col]])), \"\\n\", sep = \"\"))   } } #> [1] \"homo_sapiens\" #>   Unique cell_type_ontology_term_id values: 588 #>   Unique assay_ontology_term_id values: 20 #>   Unique tissue_ontology_term_id values: 216 #> [1] \"mus_musculus\" #>   Unique cell_type_ontology_term_id values: 211 #>   Unique assay_ontology_term_id values: 9 #>   Unique tissue_ontology_term_id values: 45 cat(paste(\"Complete cell census contains\", total_cells, \"cells.\")) #> Complete cell census contains 49423515 cells."},{"path":"/articles/census_dataset_presence.html","id":"is-a-feature-present-in-a-dataset","dir":"Articles","previous_headings":"","what":"Is a feature present in a dataset?","title":"Census datasets presence","text":"Goal: test given feature present given dataset. Important: (one-based) indexes sparse presence matrix correspond (zero-based) soma_joinid + 1. words: first dimension presence matrix (one plus) dataset’s soma_joinid stored census_datasets dataframe. second dimension presence matrix (one plus) feature’s soma_joinid stored var dataframe.","code":"var_joinid <- var_df$soma_joinid[var_df$feature_id == \"ENSG00000286096\"] dataset_joinid <- datasets_df$soma_joinid[datasets_df$dataset_id == \"97a17473-e2b1-4f31-a544-44a60773e2dd\"] is_present <- presence_matrix[dataset_joinid + 1, var_joinid + 1] cat(paste(\"Feature is\", if (is_present) \"present.\" else \"not present.\")) #> Feature is present."},{"path":"/articles/census_dataset_presence.html","id":"what-datasets-contain-a-feature","dir":"Articles","previous_headings":"","what":"What datasets contain a feature?","title":"Census datasets presence","text":"Goal: look datasets feature_id present.","code":"# Grab the feature's soma_joinid from the var dataframe var_joinid <- var_df$soma_joinid[var_df$feature_id == \"ENSG00000286096\"]  # The presence matrix is indexed by the joinids of the dataset and var dataframes, # so slice out the feature of interest by its joinid. dataset_joinids <- datasets_df$soma_joinid[presence_matrix[, var_joinid + 1] != 0]  print(datasets_df[dataset_joinids + 1, ]) #> # A tibble: 24 × 8 #>    soma_joinid collection_id     colle…¹ colle…² datas…³ datas…⁴ datas…⁵ datas…⁶ #>          <int> <chr>             <chr>   <chr>   <chr>   <chr>   <chr>     <int> #>  1          89 283d65eb-dd53-49… Transc… 10.110… 07b1d7… Dissec… 07b1d7…   27210 #>  2         102 283d65eb-dd53-49… Transc… 10.110… 7c1c3d… Dissec… 7c1c3d…   49512 #>  3         103 283d65eb-dd53-49… Transc… 10.110… 9372df… Dissec… 9372df…   33794 #>  4         131 283d65eb-dd53-49… Transc… 10.110… dd03ce… Dissec… dd03ce…   23732 #>  5         145 283d65eb-dd53-49… Transc… 10.110… 7a0a88… Superc… 7a0a88…   74979 #>  6         147 283d65eb-dd53-49… Transc… 10.110… d2b5ef… Dissec… d2b5ef…   36886 #>  7         151 283d65eb-dd53-49… Transc… 10.110… f8dda9… Dissec… f8dda9…   31899 #>  8         154 283d65eb-dd53-49… Transc… 10.110… 3a7f3a… Superc… 3a7f3a…  291833 #>  9         156 283d65eb-dd53-49… Transc… 10.110… bdb26a… Superc… bdb26a…  227671 #> 10         158 283d65eb-dd53-49… Transc… 10.110… 5e5ab9… Dissec… 5e5ab9…   32306 #> # … with 14 more rows, and abbreviated variable names ¹​collection_name, #> #   ²​collection_doi, ³​dataset_id, ⁴​dataset_title, ⁵​dataset_h5ad_path, #> #   ⁶​dataset_total_cell_count"},{"path":"/articles/census_dataset_presence.html","id":"what-features-are-in-a-dataset","dir":"Articles","previous_headings":"","what":"What features are in a dataset?","title":"Census datasets presence","text":"Goal: lookup features present given dataset. example also demonstrates ability query multiple datasets.","code":"# Slice the dataset(s) of interest, and get the joinid(s) dataset_joinids <- datasets_df$soma_joinid[datasets_df$collection_id == \"17481d16-ee44-49e5-bcf0-28c0780d8c4a\"]  # Slice the presence matrix by the first dimension, i.e., by dataset var_joinids <- var_df$soma_joinid[which(Matrix::colSums(presence_matrix[dataset_joinids + 1, ]) > 0)]  print(var_df[var_joinids + 1, ]) #> # A tibble: 27,211 × 4 #>    soma_joinid feature_id      feature_name   feature_length #>          <int> <chr>           <chr>                   <int> #>  1           0 ENSG00000238009 RP11-34P13.7             3726 #>  2           1 ENSG00000279457 WASH9P                   1397 #>  3           2 ENSG00000228463 AP006222.1               8224 #>  4           3 ENSG00000237094 RP4-669L17.4             6204 #>  5           4 ENSG00000230021 RP11-206L10.17           5495 #>  6           5 ENSG00000237491 LINC01409                8413 #>  7           6 ENSG00000177757 FAM87B                   1947 #>  8           7 ENSG00000225880 LINC00115                1317 #>  9           8 ENSG00000230368 FAM41C                   1971 #> 10           9 ENSG00000230699 RP11-54O7.1              3043 #> # … with 27,201 more rows"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Chan Zuckerberg Initiative. Author, maintainer, copyright holder, funder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chan Zuckerberg Initiative (2023). cellxgene.census: CZ CELLxGENE Discover Cell Census. R package version 0.0.0.9000, https://github.com/chanzuckerberg/cellxgene-census.","code":"@Manual{,   title = {cellxgene.census: CZ CELLxGENE Discover Cell Census},   author = {{Chan Zuckerberg Initiative}},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://github.com/chanzuckerberg/cellxgene-census}, }"},{"path":"/index.html","id":"cz-cellxgene-discover-census","dir":"","previous_headings":"","what":"CZ CELLxGENE Discover Cell Census","title":"CZ CELLxGENE Discover Cell Census","text":"cellxgene.census package provides API facilitate use CZ CELLxGENE Discover Census. information API project visit chanzuckerberg/cellxgene-census GitHub repo. Status: Pre-release, rapid development. Expect API changes. Also see Python API.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"CZ CELLxGENE Discover Cell Census","text":"can install development version cellxgene.census GitHub : (minimal apt dependencies: r-base cmake git)","code":"# install.packages(\"devtools\") devtools::install_github(\"chanzuckerberg/cellxgene-census/api/r/cellxgene.census\") print(cellxgene.census::open_soma())"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"CZ CELLxGENE Discover Cell Census","text":"basic example shows solve common problem:","code":"library(cellxgene.census) ## basic example code"},{"path":"/index.html","id":"for-more-help","dir":"","previous_headings":"","what":"For More Help","title":"CZ CELLxGENE Discover Cell Census","text":"help, please file issue repo, contact us soma@chanzuckerberg.com believe found security issue, appreciate notification. Please send email security@chanzuckerberg.com.","code":""},{"path":"/reference/download_source_h5ad.html","id":null,"dir":"Reference","previous_headings":"","what":"Download source H5AD to local file name. — download_source_h5ad","title":"Download source H5AD to local file name. — download_source_h5ad","text":"Download source H5AD local file name.","code":""},{"path":"/reference/download_source_h5ad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download source H5AD to local file name. — download_source_h5ad","text":"","code":"download_source_h5ad(   dataset_id,   file,   overwrite = FALSE,   census_version = \"latest\" )"},{"path":"/reference/download_source_h5ad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download source H5AD to local file name. — download_source_h5ad","text":"dataset_id dataset_id interest. file Local file name store H5AD file. overwrite TRUE allow overwriting existing file. census_version census version.","code":""},{"path":"/reference/get_census_version_description.html","id":null,"dir":"Reference","previous_headings":"","what":"Get release description for given census version — get_census_version_description","title":"Get release description for given census version — get_census_version_description","text":"Get release description given census version","code":""},{"path":"/reference/get_census_version_description.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get release description for given census version — get_census_version_description","text":"","code":"get_census_version_description(census_version)"},{"path":"/reference/get_census_version_description.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get release description for given census version — get_census_version_description","text":"census_version census version name.","code":""},{"path":"/reference/get_census_version_description.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get release description for given census version — get_census_version_description","text":"List release location metadata","code":""},{"path":"/reference/get_census_version_directory.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the directory of cell census releases currently available — get_census_version_directory","title":"Get the directory of cell census releases currently available — get_census_version_directory","text":"Get directory cell census releases currently available","code":""},{"path":"/reference/get_census_version_directory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the directory of cell census releases currently available — get_census_version_directory","text":"","code":"get_census_version_directory()"},{"path":"/reference/get_census_version_directory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the directory of cell census releases currently available — get_census_version_directory","text":"Data frame available cell census releases, including location metadata.","code":""},{"path":"/reference/get_presence_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the feature dataset presence matrix. — get_presence_matrix","title":"Read the feature dataset presence matrix. — get_presence_matrix","text":"Read feature dataset presence matrix.","code":""},{"path":"/reference/get_presence_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the feature dataset presence matrix. — get_presence_matrix","text":"","code":"get_presence_matrix(census, organism, measurement_name = \"RNA\")"},{"path":"/reference/get_presence_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the feature dataset presence matrix. — get_presence_matrix","text":"census census object, usually returned cellxgene.census::open_soma(). organism organism query, usually one Homo sapiens Mus musculus measurement_name measurement object query. Defaults RNA.","code":""},{"path":"/reference/get_presence_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read the feature dataset presence matrix. — get_presence_matrix","text":"Matrix::sparseMatrix dataset join id & feature join id dimensions, filled 1s indicating presence","code":""},{"path":"/reference/get_seurat.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience wrapper around SOMAExperimentAxisQuery, to build and execute a\nquery, and return it as a Seurat object. — get_seurat","title":"Convenience wrapper around SOMAExperimentAxisQuery, to build and execute a\nquery, and return it as a Seurat object. — get_seurat","text":"Convenience wrapper around SOMAExperimentAxisQuery, build execute query, return Seurat object.","code":""},{"path":"/reference/get_seurat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience wrapper around SOMAExperimentAxisQuery, to build and execute a\nquery, and return it as a Seurat object. — get_seurat","text":"","code":"get_seurat(   census,   organism,   measurement_name = \"RNA\",   X_name = \"raw\",   obs_query = NULL,   obs_column_names = NULL,   var_query = NULL,   var_column_names = NULL )"},{"path":"/reference/get_seurat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience wrapper around SOMAExperimentAxisQuery, to build and execute a\nquery, and return it as a Seurat object. — get_seurat","text":"census census object, usually returned cellxgene.census::open_soma(). organism organism query, usually one Homo sapiens Mus musculus measurement_name measurement object query. Defaults RNA. X_name X layer query. Defaults raw. obs_query SOMAAxisQuery obs axis. obs_column_names Columns fetch obs data frame. var_query SOMAAxisQuery var axis. var_column_names Columns fetch var data frame.","code":""},{"path":"/reference/get_seurat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience wrapper around SOMAExperimentAxisQuery, to build and execute a\nquery, and return it as a Seurat object. — get_seurat","text":"Seurat object containing sensus slice.","code":""},{"path":"/reference/get_source_h5ad_uri.html","id":null,"dir":"Reference","previous_headings":"","what":"Locate source h5ad file for a dataset. — get_source_h5ad_uri","title":"Locate source h5ad file for a dataset. — get_source_h5ad_uri","text":"Locate source h5ad file dataset.","code":""},{"path":"/reference/get_source_h5ad_uri.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locate source h5ad file for a dataset. — get_source_h5ad_uri","text":"","code":"get_source_h5ad_uri(dataset_id, census_version = \"latest\")"},{"path":"/reference/get_source_h5ad_uri.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locate source h5ad file for a dataset. — get_source_h5ad_uri","text":"dataset_id dataset_id interest. census_version census version.","code":""},{"path":"/reference/get_source_h5ad_uri.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locate source h5ad file for a dataset. — get_source_h5ad_uri","text":"list uri optional s3_region.","code":""},{"path":"/reference/open_soma.html","id":null,"dir":"Reference","previous_headings":"","what":"Open the Cell Census — open_soma","title":"Open the Cell Census — open_soma","text":"Open Cell Census","code":""},{"path":"/reference/open_soma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open the Cell Census — open_soma","text":"","code":"open_soma(census_version = \"latest\", uri = NULL, tiledbsoma_ctx = NULL)"},{"path":"/reference/open_soma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open the Cell Census — open_soma","text":"census_version version Census, e.g., \"latest\". uri URI containing Census SOMA objects. specified, takes precedence census_version. tiledbsoma_ctx custom tiledbsoma::SOMATileDBContext","code":""},{"path":"/reference/open_soma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open the Cell Census — open_soma","text":"Top-level tiledbsoma::SOMACollection object","code":""}]
