[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Chan Zuckerberg Initiative Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/census_dataset_presence.html","id":"opening-the-census","dir":"Articles","previous_headings":"","what":"Opening the Census","title":"Genes measured in each cell (dataset presence matrix)","text":"cellxgene.census R package contains convenient API open version Census (default, newest stable version).","code":"census <- cellxgene.census::open_soma() #> The stable Census release is currently 2023-05-15. Specify census_version = \"2023-05-15\" in future calls to open_soma() to ensure data consistency."},{"path":"/articles/census_dataset_presence.html","id":"fetching-the-ids-of-the-census-datasets","dir":"Articles","previous_headings":"","what":"Fetching the IDs of the Census datasets","title":"Genes measured in each cell (dataset presence matrix)","text":"Let’s grab table datasets included Census use table combination presence matrix .","code":"# Grab the experiment containing human data, and the measurement therein with RNA human <- census$get(\"census_data\")$get(\"homo_sapiens\") human_rna <- human$ms$get(\"RNA\")  # The census-wide datasets datasets_df <- as.data.frame(census$get(\"census_info\")$get(\"datasets\")$read()$concat()) print(datasets_df) #>    soma_joinid                        collection_id #> 1            0 6b701826-37bb-4356-9792-ff41fc4c3161 #> 2            1 4195ab4c-20bd-4cd3-8b3d-65601277e731 #> 3            2 4195ab4c-20bd-4cd3-8b3d-65601277e731 #> 4            3 4195ab4c-20bd-4cd3-8b3d-65601277e731 #> 5            4 4195ab4c-20bd-4cd3-8b3d-65601277e731 #> 6            5 74e10dc4-cbb2-4605-a189-8a1cd8e44d8c #> 7            6 74e10dc4-cbb2-4605-a189-8a1cd8e44d8c #> 8            7 74e10dc4-cbb2-4605-a189-8a1cd8e44d8c #> 9            8 74e10dc4-cbb2-4605-a189-8a1cd8e44d8c #> 10           9 6d203948-a779-4b69-9b3f-1ee1dadc3980 #> 11          10 6d203948-a779-4b69-9b3f-1ee1dadc3980 #> 12          11 6d203948-a779-4b69-9b3f-1ee1dadc3980 #>                                                                                        collection_name #> 1                                                                       Abdominal White Adipose Tissue #> 2                             A spatially resolved single cell genomic atlas of the adult human breast #> 3                             A spatially resolved single cell genomic atlas of the adult human breast #> 4                             A spatially resolved single cell genomic atlas of the adult human breast #> 5                             A spatially resolved single cell genomic atlas of the adult human breast #> 6       Spatial proteogenomics reveals distinct and evolutionarily conserved hepatic macrophage niches #> 7       Spatial proteogenomics reveals distinct and evolutionarily conserved hepatic macrophage niches #> 8       Spatial proteogenomics reveals distinct and evolutionarily conserved hepatic macrophage niches #> 9       Spatial proteogenomics reveals distinct and evolutionarily conserved hepatic macrophage niches #> 10 Differential cell composition and split epidermal differentiation in human palm, sole, and hip skin #> 11 Differential cell composition and split epidermal differentiation in human palm, sole, and hip skin #> 12 Differential cell composition and split epidermal differentiation in human palm, sole, and hip skin #>                  collection_doi                           dataset_id #> 1                               9d8e5dca-03a3-457d-b7fb-844c75735c83 #> 2                               a6388a6f-6076-401b-9b30-7d4306a20035 #> 3                               842c6f5d-4a94-4eef-8510-8c792d1124bc #> 4                               74520626-b0ba-4ee9-86b5-714649554def #> 5                               396a9124-fb20-4822-bf9c-e93fdf7c999a #> 6    10.1016/j.cell.2021.12.018 e84f2780-51e8-4cfa-8aa0-13bbfef677c7 #> 7    10.1016/j.cell.2021.12.018 dfdf1ae2-d624-4004-9353-f18b902f6bca #> 8    10.1016/j.cell.2021.12.018 d1cbed97-d88f-4954-8925-13302fe30b39 #> 9    10.1016/j.cell.2021.12.018 b03e4ef8-4e6b-47f4-84a7-e8ed033d08cd #> 10 10.1016/j.celrep.2023.111994 f1f123cc-ca2c-460f-b7f1-88240efb1e82 #> 11 10.1016/j.celrep.2023.111994 de94c504-4b58-4f42-b68d-74a8e4892f0e #> 12 10.1016/j.celrep.2023.111994 da684768-fb01-455b-9f0f-b63a3e2f844f #>                                     dataset_title #> 1                           22 integrated samples #> 2                  scRNA-seq data - myeloid cells #> 3                      scRNA-seq data - all cells #> 4                        scRNA-seq data - T cells #> 5                        scRNA-seq data - B cells #> 6              All cells from human liver dataset #> 7          Myeloid cells from human liver dataset #> 8    CD45 negative cells from human liver dataset #> 9         Lymphoid cells from human liver dataset #> 10 UMAP visualization of keratinocyte subclusters #> 11          UMAP visualization of all 12 datasets #> 12   UMAP visualization of fibroblast subclusters #>                            dataset_h5ad_path dataset_total_cell_count #> 1  9d8e5dca-03a3-457d-b7fb-844c75735c83.h5ad                    72335 #> 2  a6388a6f-6076-401b-9b30-7d4306a20035.h5ad                    30789 #> 3  842c6f5d-4a94-4eef-8510-8c792d1124bc.h5ad                   714331 #> 4  74520626-b0ba-4ee9-86b5-714649554def.h5ad                    76567 #> 5  396a9124-fb20-4822-bf9c-e93fdf7c999a.h5ad                    12510 #> 6  e84f2780-51e8-4cfa-8aa0-13bbfef677c7.h5ad                   167598 #> 7  dfdf1ae2-d624-4004-9353-f18b902f6bca.h5ad                    40821 #> 8  d1cbed97-d88f-4954-8925-13302fe30b39.h5ad                    15481 #> 9  b03e4ef8-4e6b-47f4-84a7-e8ed033d08cd.h5ad                   105790 #> 10 f1f123cc-ca2c-460f-b7f1-88240efb1e82.h5ad                     9471 #> 11 de94c504-4b58-4f42-b68d-74a8e4892f0e.h5ad                    15243 #> 12 da684768-fb01-455b-9f0f-b63a3e2f844f.h5ad                     2303 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 550 rows ]"},{"path":"/articles/census_dataset_presence.html","id":"fetching-the-dataset-presence-matrix","dir":"Articles","previous_headings":"","what":"Fetching the dataset presence matrix","title":"Genes measured in each cell (dataset presence matrix)","text":"Now let’s fetch dataset presence matrix. convenience, read entire presence matrix (Homo sapiens) sparse matrix. convenience API providing capability: also need var dataframe, read R data frame convenient manipulation:","code":"presence_matrix <- cellxgene.census::get_presence_matrix(census, \"Homo sapiens\", \"RNA\") print(dim(presence_matrix)) #> NULL var_df <- as.data.frame(human_rna$var$read()$concat()) print(var_df) #>    soma_joinid      feature_id  feature_name feature_length #> 1            0 ENSG00000243485   MIR1302-2HG           1021 #> 2            1 ENSG00000237613       FAM138A           1219 #> 3            2 ENSG00000186092         OR4F5           2618 #> 4            3 ENSG00000238009  RP11-34P13.7           3726 #> 5            4 ENSG00000239945  RP11-34P13.8           1319 #> 6            5 ENSG00000239906 RP11-34P13.14            323 #> 7            6 ENSG00000241860 RP11-34P13.13           7559 #> 8            7 ENSG00000241599  RP11-34P13.9            457 #> 9            8 ENSG00000286448    AP006222.3            736 #> 10           9 ENSG00000236601  RP4-669L17.2           1095 #> 11          10 ENSG00000284733        OR4F29            939 #> 12          11 ENSG00000235146  RP5-857K21.2            635 #> 13          12 ENSG00000284662        OR4F16            995 #> 14          13 ENSG00000229905 RP11-206L10.4            456 #> 15          14 ENSG00000237491     LINC01409           8413 #> 16          15 ENSG00000177757        FAM87B           1947 #> 17          16 ENSG00000228794     LINC01128          15682 #> 18          17 ENSG00000225880     LINC00115           1317 #> 19          18 ENSG00000230368        FAM41C           1971 #> 20          19 ENSG00000272438  RP11-54O7.16            351 #> 21          20 ENSG00000230699   RP11-54O7.1           3043 #> 22          21 ENSG00000241180   RP11-54O7.2            443 #> 23          22 ENSG00000223764     LINC02593           4152 #> 24          23 ENSG00000187634        SAMD11           4172 #> 25          24 ENSG00000188976         NOC2L           5540 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 60639 rows ]"},{"path":"/articles/census_dataset_presence.html","id":"identifying-genes-measured-in-a-specific-dataset","dir":"Articles","previous_headings":"","what":"Identifying genes measured in a specific dataset","title":"Genes measured in each cell (dataset presence matrix)","text":"Now dataset table, genes metadata table, dataset presence matrix, can check gene set genes measured specific dataset. Important: presence matrix indexed soma_joinid, positionally indexed. words: first dimension presence matrix dataset’s soma_joinid, stored census_datasets dataframe. second dimension presence matrix feature’s soma_joinid, stored var dataframe. Let’s find gene \"ENSG00000286096\" measured dataset id \"97a17473-e2b1-4f31-a544-44a60773e2dd\".","code":"var_joinid <- var_df$soma_joinid[var_df$feature_id == \"ENSG00000286096\"] dataset_joinid <- datasets_df$soma_joinid[datasets_df$dataset_id == \"97a17473-e2b1-4f31-a544-44a60773e2dd\"] is_present <- presence_matrix$take(dataset_joinid, var_joinid)$get_one_based_matrix()[, , drop = TRUE] cat(paste(\"Feature is\", if (is_present) \"present.\" else \"not present.\")) #> Feature is present."},{"path":"/articles/census_dataset_presence.html","id":"identifying-datasets-that-measured-specific-genes","dir":"Articles","previous_headings":"","what":"Identifying datasets that measured specific genes","title":"Genes measured in each cell (dataset presence matrix)","text":"Similarly, can determine datasets measured specific gene set genes.","code":"# Grab the feature's soma_joinid from the var dataframe var_joinid <- var_df$soma_joinid[var_df$feature_id == \"ENSG00000286096\"]  # The presence matrix is indexed by the joinids of the dataset and var dataframes, # so slice out the feature of interest by its joinid. dataset_joinids <- datasets_df$soma_joinid[   presence_matrix$take(j = var_joinid)$get_one_based_matrix()[, , drop = TRUE] != 0 ]  # From the datasets dataframe, slice out the datasets which have a joinid in the list print(datasets_df[dataset_joinids, ]) #>     soma_joinid                        collection_id #> 105         104 283d65eb-dd53-496d-adb7-7570c7caa443 #> 109         108 283d65eb-dd53-496d-adb7-7570c7caa443 #> 126         125 283d65eb-dd53-496d-adb7-7570c7caa443 #> 131         130 283d65eb-dd53-496d-adb7-7570c7caa443 #> 141         140 283d65eb-dd53-496d-adb7-7570c7caa443 #> 142         141 283d65eb-dd53-496d-adb7-7570c7caa443 #> 143         142 283d65eb-dd53-496d-adb7-7570c7caa443 #> 144         143 283d65eb-dd53-496d-adb7-7570c7caa443 #> 149         148 283d65eb-dd53-496d-adb7-7570c7caa443 #> 162         161 283d65eb-dd53-496d-adb7-7570c7caa443 #> 163         162 283d65eb-dd53-496d-adb7-7570c7caa443 #> 172         171 283d65eb-dd53-496d-adb7-7570c7caa443 #>                                                         collection_name #> 105 Transcriptomic diversity of cell types across the adult human brain #> 109 Transcriptomic diversity of cell types across the adult human brain #> 126 Transcriptomic diversity of cell types across the adult human brain #> 131 Transcriptomic diversity of cell types across the adult human brain #> 141 Transcriptomic diversity of cell types across the adult human brain #> 142 Transcriptomic diversity of cell types across the adult human brain #> 143 Transcriptomic diversity of cell types across the adult human brain #> 144 Transcriptomic diversity of cell types across the adult human brain #> 149 Transcriptomic diversity of cell types across the adult human brain #> 162 Transcriptomic diversity of cell types across the adult human brain #> 163 Transcriptomic diversity of cell types across the adult human brain #> 172 Transcriptomic diversity of cell types across the adult human brain #>                collection_doi                           dataset_id #> 105 10.1101/2022.10.12.511898 ff7d15fa-f4b6-4a0e-992e-fd0c9d088ded #> 109 10.1101/2022.10.12.511898 f9034091-2e8f-4ac6-9874-e7b7eb566824 #> 126 10.1101/2022.10.12.511898 e1f595f6-ba2c-495e-9bee-7056f116b1e4 #> 131 10.1101/2022.10.12.511898 d5452b83-7c3d-4d7c-ab7a-c7fece7196c5 #> 141 10.1101/2022.10.12.511898 c4dd26a8-d956-4bee-a233-44b573f2ce27 #> 142 10.1101/2022.10.12.511898 c4b03352-af8d-492a-8d6b-40f304e0a122 #> 143 10.1101/2022.10.12.511898 c2aad8fc-b63b-4f9b-9cfd-baf7bc9c1771 #> 144 10.1101/2022.10.12.511898 c202b243-1aa1-4b16-bc9a-b36241f3b1e3 #> 149 10.1101/2022.10.12.511898 adda0684-f8ea-4403-b393-2a25607077c4 #> 162 10.1101/2022.10.12.511898 949ec7fc-ac54-47c9-bb6f-ee9e67688cce #> 163 10.1101/2022.10.12.511898 9372df2d-13d6-4fac-980b-919a5b7eb483 #> 172 10.1101/2022.10.12.511898 7cd3c321-e487-4b51-a8af-9bf671b59fe5 #>                                                                                                                                                                  dataset_title #> 105                                                                                            Dissection: Cerebral cortex (Cx) - Cuneus, rostral part - Area Prostriata - Pro #> 109 Dissection: Myelencephalon (medulla oblongata) (Mo) - medullary reticular formation (MoRF) & efferent nuclei of cranial nerves in the medulla oblongata (MoEN) - MoRF-MoEN #> 126                                                                                                             Dissection: Cerebral cortex (Cx) - Middle Temporal Gyrus - MTG #> 131                                                                                                                        Dissection: Body of hippocampus (HiB) - Rostral CA3 #> 141                                                                                                                      Dissection: Body of hippocampus (HiB) - Rostral CA1-2 #> 142                                                                                                                                          Supercluster: Medium spiny neuron #> 143                                                                                            Dissection: Cerebral cortex (Cx) - Temporal pole (TP) - Temporopolar area - A38 #> 144                                                                                                                                          Supercluster: Amygdala excitatory #> 149                                                                   Dissection: Thalamus (THM) - posterior nuclear complex of thalamus (PoN) - medial geniculate nuclei (MG) #> 162                                                                                       Dissection: Cerebral cortex (Cx) - Short insular gyri - Granular insular cortex - Ig #> 163                                                                                                     Dissection: Midbrain (M) - Periaqueductal gray and nearby nuclei - PAG #> 172                                                                         Dissection: Pons (Pn) - other nuclei in pontine tegmentum (XPnTg) - dorsal tegmental nucleus - DTg #>                             dataset_h5ad_path dataset_total_cell_count #> 105 ff7d15fa-f4b6-4a0e-992e-fd0c9d088ded.h5ad                    28051 #> 109 f9034091-2e8f-4ac6-9874-e7b7eb566824.h5ad                    23120 #> 126 e1f595f6-ba2c-495e-9bee-7056f116b1e4.h5ad                   107301 #> 131 d5452b83-7c3d-4d7c-ab7a-c7fece7196c5.h5ad                     8077 #> 141 c4dd26a8-d956-4bee-a233-44b573f2ce27.h5ad                    11265 #> 142 c4b03352-af8d-492a-8d6b-40f304e0a122.h5ad                   152189 #> 143 c2aad8fc-b63b-4f9b-9cfd-baf7bc9c1771.h5ad                    37642 #> 144 c202b243-1aa1-4b16-bc9a-b36241f3b1e3.h5ad                   109452 #> 149 adda0684-f8ea-4403-b393-2a25607077c4.h5ad                    14226 #> 162 949ec7fc-ac54-47c9-bb6f-ee9e67688cce.h5ad                    38937 #> 163 9372df2d-13d6-4fac-980b-919a5b7eb483.h5ad                    33794 #> 172 7cd3c321-e487-4b51-a8af-9bf671b59fe5.h5ad                    26095 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 12 rows ]"},{"path":"/articles/census_dataset_presence.html","id":"identifying-all-genes-measured-in-a-dataset","dir":"Articles","previous_headings":"","what":"Identifying all genes measured in a dataset","title":"Genes measured in each cell (dataset presence matrix)","text":"Finally, can find set genes measured cells given dataset.","code":"# Slice the dataset(s) of interest, and get the joinid(s) dataset_joinids <- datasets_df$soma_joinid[datasets_df$collection_id == \"17481d16-ee44-49e5-bcf0-28c0780d8c4a\"]  # Slice the presence matrix by the first dimension, i.e., by dataset var_joinids <- var_df$soma_joinid[   which(Matrix::colSums(presence_matrix$take(i = dataset_joinids)$get_one_based_matrix()[, , drop = TRUE]) > 0) ]  print(var_df[var_joinids, ]) #>    soma_joinid      feature_id  feature_name feature_length #> 3            2 ENSG00000186092         OR4F5           2618 #> 4            3 ENSG00000238009  RP11-34P13.7           3726 #> 13          12 ENSG00000284662        OR4F16            995 #> 14          13 ENSG00000229905 RP11-206L10.4            456 #> 15          14 ENSG00000237491     LINC01409           8413 #> 17          16 ENSG00000228794     LINC01128          15682 #> 18          17 ENSG00000225880     LINC00115           1317 #> 19          18 ENSG00000230368        FAM41C           1971 #> 20          19 ENSG00000272438  RP11-54O7.16            351 #> 21          20 ENSG00000230699   RP11-54O7.1           3043 #> 22          21 ENSG00000241180   RP11-54O7.2            443 #> 23          22 ENSG00000223764     LINC02593           4152 #> 24          23 ENSG00000187634        SAMD11           4172 #> 25          24 ENSG00000188976         NOC2L           5540 #> 26          25 ENSG00000187961        KLHL17           3402 #> 27          26 ENSG00000187583       PLEKHN1           3451 #> 28          27 ENSG00000187642         PERM1           3424 #> 29          28 ENSG00000272512  RP11-54O7.17           2086 #> 30          29 ENSG00000188290          HES4           1118 #> 31          30 ENSG00000187608         ISG15            867 #> 32          31 ENSG00000224969  RP11-54O7.11            471 #> 35          34 ENSG00000273443  RP11-54O7.18            829 #> 36          35 ENSG00000237330        RNF223           1900 #> 38          37 ENSG00000285812 RP11-465B22.9           1095 #> 39          38 ENSG00000223823     LINC01342           1620 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 27186 rows ]"},{"path":"/articles/census_dataset_presence.html","id":"close-the-census","dir":"Articles","previous_headings":"Identifying all genes measured in a dataset","what":"Close the census","title":"Genes measured in each cell (dataset presence matrix)","text":"use, census object closed release memory resources. also closes SOMA objects accessed via top-level census. Closing can automated using .exit(census$close(), add = TRUE) immediately census <- open_soma().","code":"census$close()"},{"path":"/articles/census_datasets.html","id":"fetching-the-datasets-table","dir":"Articles","previous_headings":"","what":"Fetching the datasets table","title":"Census Datasets example","text":"Census contains top-level data frame itemizing datasets contained therein. can read SOMADataFrame Arrow Table: R data frame: sum cell counts across datasets match number cells across SOMA experiments (human, mouse).","code":"census <- cellxgene.census::open_soma() #> The stable Census release is currently 2023-05-15. Specify census_version = \"2023-05-15\" in future calls to open_soma() to ensure data consistency. census_datasets <- census$get(\"census_info\")$get(\"datasets\")$read()$concat() print(census_datasets) #> Table #> 562 rows x 8 columns #> $soma_joinid <int64 not null> #> $collection_id <large_string not null> #> $collection_name <large_string not null> #> $collection_doi <large_string not null> #> $dataset_id <large_string not null> #> $dataset_title <large_string not null> #> $dataset_h5ad_path <large_string not null> #> $dataset_total_cell_count <int64 not null> census_datasets <- as.data.frame(census_datasets) print(census_datasets[, c(   \"dataset_id\",   \"dataset_title\",   \"dataset_total_cell_count\" )]) #>                              dataset_id #> 1  9d8e5dca-03a3-457d-b7fb-844c75735c83 #> 2  a6388a6f-6076-401b-9b30-7d4306a20035 #> 3  842c6f5d-4a94-4eef-8510-8c792d1124bc #> 4  74520626-b0ba-4ee9-86b5-714649554def #> 5  396a9124-fb20-4822-bf9c-e93fdf7c999a #> 6  e84f2780-51e8-4cfa-8aa0-13bbfef677c7 #> 7  dfdf1ae2-d624-4004-9353-f18b902f6bca #> 8  d1cbed97-d88f-4954-8925-13302fe30b39 #> 9  b03e4ef8-4e6b-47f4-84a7-e8ed033d08cd #> 10 f1f123cc-ca2c-460f-b7f1-88240efb1e82 #> 11 de94c504-4b58-4f42-b68d-74a8e4892f0e #> 12 da684768-fb01-455b-9f0f-b63a3e2f844f #> 13 9f222629-9e39-47d0-b83f-e08d610c7479 #> 14 b0e547f0-462b-4f81-b31b-5b0a5d96f537 #> 15 d41f45c1-1b7b-4573-a998-ac5c5acb1647 #> 16 f801b7a9-80a6-4d09-9161-71474deb58ae #> 17 be39785b-67cb-4177-be19-a40ee3747e45 #> 18 4c6f9f26-5470-455b-8933-c408232fbf56 #> 19 be35c935-ee4f-475c-9d3c-97630d59a735 #> 20 975e13b6-bec1-4eed-b46a-9be1f1357373 #> 21 24ec2dc5-3573-4d66-a9e1-25b7dcf43e27 #> 22 0ba636a1-4754-4786-a8be-7ab3cf760fd6 #> 23 c2876b1b-06d8-4d96-a56b-5304f815b99a #> 24 3f32121d-126b-4e8d-9f69-d86502d2a1b1 #> 25 be46dfdc-0f99-4731-8957-64ca37364985 #> 26 ac2fea99-ce08-4fca-8d03-a19f37bf21a3 #> 27 a13bda79-9134-46c9-9ed1-a2858be9aafe #> 28 5695d556-974e-4d92-9e99-5f61b8695313 #> 29 535e9336-2d8d-43c3-944d-bcbebe20df8a #> 30 4fb330ab-2d74-4649-b58f-7ffef457efdf #> 31 290d50c7-7158-4198-acf5-6d4b624fd3dc #> 32 18e2a8c5-33f7-455e-a58a-b2ba6921db27 #> 33 12967895-3d58-4e93-be2c-4e1bcf4388d5 #>                                                                                                                            dataset_title #> 1                                                                                                                  22 integrated samples #> 2                                                                                                         scRNA-seq data - myeloid cells #> 3                                                                                                             scRNA-seq data - all cells #> 4                                                                                                               scRNA-seq data - T cells #> 5                                                                                                               scRNA-seq data - B cells #> 6                                                                                                     All cells from human liver dataset #> 7                                                                                                 Myeloid cells from human liver dataset #> 8                                                                                           CD45 negative cells from human liver dataset #> 9                                                                                                Lymphoid cells from human liver dataset #> 10                                                                                        UMAP visualization of keratinocyte subclusters #> 11                                                                                                 UMAP visualization of all 12 datasets #> 12                                                                                          UMAP visualization of fibroblast subclusters #> 13                                                               An integrated cell atlas of the human lung in health and disease (full) #> 14                                AIDA Phase 1: Chinese, Indian, Japanese, Korean, and Malay donors in Japan, Singapore, and South Korea #> 15  Transcriptional connectivity of regulatory T cells in the tumor microenvironment informs novel combination cancer therapy strategies #> 16 normal - Single-cell analyses of renal cell cancers reveal insights into tumor microenvironment, cell of origin, and therapy response #> 17  ccRCC - Single-cell analyses of renal cell cancers reveal insights into tumor microenvironment, cell of origin, and therapy response #> 18  chRCC - Single-cell analyses of renal cell cancers reveal insights into tumor microenvironment, cell of origin, and therapy response #> 19                                                                                                                         HBCA - stroma #> 20                                                                                                                     HBCA - epithelial #> 21                                                                                                                         HBCA - immune #> 22                                                                                                                         HBCA - global #> 23                                                                      Whole Taxonomy - MTG: Seattle Alzheimer's Disease Atlas (SEA-AD) #> 24                                                                                        fetal and neonatal human small intestine cells #> 25                                                                                                            Mouse Somatic Cell Lineage #> 26                                                                                                             Human Immune Cell Lineage #> 27                                                                                                                            Mouse Male #> 28                                                                                                                      Mouse Germ Cells #> 29                                                                                                                            Human Male #> 30                                                                                                            Human Somatic Cell Lineage #> 31                                                                                                                      Human Germ Cells #> 32                                                                                                                          Human Female #> 33                                                                                                                          Mouse Female #>    dataset_total_cell_count #> 1                     72335 #> 2                     30789 #> 3                    714331 #> 4                     76567 #> 5                     12510 #> 6                    167598 #> 7                     40821 #> 8                     15481 #> 9                    105790 #> 10                     9471 #> 11                    15243 #> 12                     2303 #> 13                  2282447 #> 14                  1058909 #> 15                    82991 #> 16                     6044 #> 17                    20509 #> 18                     2576 #> 19                   413997 #> 20                   353167 #> 21                    23714 #> 22                   800198 #> 23                  1226855 #> 24                    36359 #> 25                    50933 #> 26                    20556 #> 27                    32889 #> 28                    10411 #> 29                   133811 #> 30                   191230 #> 31                    10993 #> 32                   213898 #> 33                    69709 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 529 rows ] census_data <- census$get(\"census_data\") all_experiments <- lapply(census_data$to_list(), function(it) census_data$get(it$name)) print(all_experiments) #> $homo_sapiens #> <SOMAExperiment> #>   uri: s3://cellxgene-data-public/cell-census/2023-05-15/soma/census_data/homo_sapiens  #>   arrays: obs*  #>   groups: ms*  #>  #> $mus_musculus #> <SOMAExperiment> #>   uri: s3://cellxgene-data-public/cell-census/2023-05-15/soma/census_data/mus_musculus  #>   arrays: obs*  #>   groups: ms* experiments_total_cells <- sum(sapply(all_experiments, function(it) {   nrow(it$obs$read(column_names = c(\"soma_joinid\"))$concat()) })) print(paste(\"Found\", experiments_total_cells, \"cells in all experiments.\")) #> [1] \"Found 57880760 cells in all experiments.\" print(paste(   \"Found\", sum(as.vector(census_datasets$dataset_total_cell_count)),   \"cells in all datasets.\" )) #> [1] \"Found 57880760 cells in all datasets.\""},{"path":"/articles/census_datasets.html","id":"fetching-the-expression-data-from-a-single-dataset","dir":"Articles","previous_headings":"","what":"Fetching the expression data from a single dataset","title":"Census Datasets example","text":"Let’s pick one dataset slice census, turn Seurat -memory object. (requires Seurat package installed beforehand.) Create query mouse experiment, “RNA” measurement, dataset_id.","code":"census_datasets[census_datasets$dataset_id == \"0bd1a1de-3aee-40e0-b2ec-86c7a30c7149\", ] #>     soma_joinid                        collection_id    collection_name #> 492         491 0b9d8a04-bb9d-44da-aa27-705bb65b54eb Tabula Muris Senis #>                collection_doi                           dataset_id #> 492 10.1038/s41586-020-2496-1 0bd1a1de-3aee-40e0-b2ec-86c7a30c7149 #>                                                                                        dataset_title #> 492 Bone marrow - A single-cell transcriptomic atlas characterizes ageing tissues in the mouse - 10x #>                             dataset_h5ad_path dataset_total_cell_count #> 492 0bd1a1de-3aee-40e0-b2ec-86c7a30c7149.h5ad                    40220 obs_query <- tiledbsoma::SOMAAxisQuery$new(   value_filter = \"dataset_id == '0bd1a1de-3aee-40e0-b2ec-86c7a30c7149'\" ) expt_query <- tiledbsoma::SOMAExperimentAxisQuery$new(   census_data$get(\"mus_musculus\"), \"RNA\",   obs_query = obs_query ) dataset_seurat <- expt_query$to_seurat(c(counts = \"raw\")) #> The legacy packages maptools, rgdal, and rgeos, underpinning the sp package, #> which was just loaded, will retire in October 2023. #> Please refer to R-spatial evolution reports for details, especially #> https://r-spatial.org/r/2023/05/15/evolution4.html. #> It may be desirable to make the sf package available; #> package maintainers should consider adding sf to Suggests:. #> The sp package is now running under evolution status 2 #>      (status 2 uses the sf package in place of rgdal) print(dataset_seurat) #> An object of class Seurat  #> 52392 features across 40220 samples within 1 assay  #> Active assay: RNA (52392 features, 0 variable features)"},{"path":"/articles/census_datasets.html","id":"downloading-the-original-source-h5ad-file-of-a-dataset","dir":"Articles","previous_headings":"","what":"Downloading the original source H5AD file of a dataset","title":"Census Datasets example","text":"can use cellxgene.census::get_source_h5ad_uri() API fetch URI pointing H5AD associated dataset_id. H5AD can download CZ CELLxGENE Discover, may contain additional data-submitter provided information included Census. can fetch location cloud directly download system. local H5AD file can used R using SeuratDisk’s anndata converter.","code":"# Option 1: Direct download cellxgene.census::download_source_h5ad(\"0bd1a1de-3aee-40e0-b2ec-86c7a30c7149\",   file = \"/tmp/Tabula_Muris_Senis-bone_marrow.h5ad\",   overwrite = TRUE ) # Option 2: Get location and download via preferred method cellxgene.census::get_source_h5ad_uri(\"0bd1a1de-3aee-40e0-b2ec-86c7a30c7149\") #> $uri #> [1] \"s3://cellxgene-data-public/cell-census/2023-05-15/h5ads/0bd1a1de-3aee-40e0-b2ec-86c7a30c7149.h5ad\" #>  #> $s3_region #> [1] \"us-west-2\""},{"path":"/articles/census_datasets.html","id":"close-the-census","dir":"Articles","previous_headings":"Downloading the original source H5AD file of a dataset","what":"Close the census","title":"Census Datasets example","text":"use, census object closed release memory resources. also closes SOMA objects accessed via top-level census. Closing can automated using .exit(census$close(), add = TRUE) immediately census <- open_soma().","code":"census$close()"},{"path":"/articles/census_query_extract.html","id":"opening-the-census","dir":"Articles","previous_headings":"","what":"Opening the census","title":"Querying and fetching the single-cell data and cell/gene metadata","text":"cellxgene.census R package contains convenient API open version Census (default, newest stable version). can learn cellxgene.census methods accessing corresponding documentation, example ?cellxgene.census::open_soma.","code":"census <- cellxgene.census::open_soma() #> The stable Census release is currently 2023-05-15. Specify census_version = \"2023-05-15\" in future calls to open_soma() to ensure data consistency."},{"path":"/articles/census_query_extract.html","id":"querying-cell-metadata-obs","dir":"Articles","previous_headings":"","what":"Querying cell metadata (obs)","title":"Querying and fetching the single-cell data and cell/gene metadata","text":"human gene metadata Census, RNA assays, located census$get(\"census_data\")$get(\"homo_sapiens\")$obs. SOMADataFrame can materialized R data frame (tibble) using .data.frame(obs$read()$concat()). mouse cell metadata census$get(\"census_data\")$get(\"mus_musculus\").obs. slicing cell metadata two relevant arguments can passed read(): column_names — character vector indicating metadata columns fetch. Expressions one comparisons Comparisons one <column> <op> <value> <column> <op> <column> Expressions can combine comparisons using && || op one < | > | <= | >= | == | != %% learn metadata columns available fetching filtering can directly look keys cell metadata. soma_joinid special SOMADataFrame column used join operations. definition columns can found Census schema. can used fetch specific columns specific rows matching condition. latter need know values looking priori. example let’s see possible values available sex. can load cell metadata fetching column sex. can see three different values sex, \"male\", \"female\" \"unknown\". information can fetch cell metatadata specific sex value, example \"unknown\". can use column_names value_filter perform specific queries. example let’s fetch disease column cell_type \"B cell\" tissue_general \"lung\".","code":"census$get(\"census_data\")$get(\"homo_sapiens\")$obs$colnames() #>  [1] \"soma_joinid\"                              #>  [2] \"dataset_id\"                               #>  [3] \"assay\"                                    #>  [4] \"assay_ontology_term_id\"                   #>  [5] \"cell_type\"                                #>  [6] \"cell_type_ontology_term_id\"               #>  [7] \"development_stage\"                        #>  [8] \"development_stage_ontology_term_id\"       #>  [9] \"disease\"                                  #> [10] \"disease_ontology_term_id\"                 #> [11] \"donor_id\"                                 #> [12] \"is_primary_data\"                          #> [13] \"self_reported_ethnicity\"                  #> [14] \"self_reported_ethnicity_ontology_term_id\" #> [15] \"sex\"                                      #> [16] \"sex_ontology_term_id\"                     #> [17] \"suspension_type\"                          #> [18] \"tissue\"                                   #> [19] \"tissue_ontology_term_id\"                  #> [20] \"tissue_general\"                           #> [21] \"tissue_general_ontology_term_id\" unique(as.data.frame(census$get(\"census_data\")$get(\"homo_sapiens\")$obs$read(column_names = \"sex\")$concat())) #>             sex #> 1        female #> 10741      male #> 1263241 unknown as.data.frame(census$get(\"census_data\")$get(\"homo_sapiens\")$obs$read(value_filter = \"sex == 'unknown'\")$concat()) #>    soma_joinid                           dataset_id                          assay #> 1      1263240 9f222629-9e39-47d0-b83f-e08d610c7479                      10x 3' v2 #> 2      1263245 9f222629-9e39-47d0-b83f-e08d610c7479 10x 3' transcription profiling #> 3      1263247 9f222629-9e39-47d0-b83f-e08d610c7479                      10x 3' v3 #> 4      1263249 9f222629-9e39-47d0-b83f-e08d610c7479                      10x 3' v2 #> 5      1263251 9f222629-9e39-47d0-b83f-e08d610c7479 10x 3' transcription profiling #> 6      1263253 9f222629-9e39-47d0-b83f-e08d610c7479                      10x 3' v2 #> 7      1263255 9f222629-9e39-47d0-b83f-e08d610c7479                      10x 3' v2 #> 8      1263258 9f222629-9e39-47d0-b83f-e08d610c7479                      10x 3' v2 #> 9      1263259 9f222629-9e39-47d0-b83f-e08d610c7479                      10x 3' v2 #> 10     1263263 9f222629-9e39-47d0-b83f-e08d610c7479                      10x 3' v2 #> 11     1263264 9f222629-9e39-47d0-b83f-e08d610c7479 10x 3' transcription profiling #> 12     1263266 9f222629-9e39-47d0-b83f-e08d610c7479 10x 5' transcription profiling #>    assay_ontology_term_id                       cell_type cell_type_ontology_term_id #> 1             EFO:0009899                     native cell                 CL:0000003 #> 2             EFO:0030003 CD8-positive, alpha-beta T cell                 CL:0000625 #> 3             EFO:0009922                     native cell                 CL:0000003 #> 4             EFO:0009899 CD4-positive, alpha-beta T cell                 CL:0000624 #> 5             EFO:0030003                     native cell                 CL:0000003 #> 6             EFO:0009899                     native cell                 CL:0000003 #> 7             EFO:0009899                     native cell                 CL:0000003 #> 8             EFO:0009899 CD8-positive, alpha-beta T cell                 CL:0000625 #> 9             EFO:0009899                     native cell                 CL:0000003 #> 10            EFO:0009899                     native cell                 CL:0000003 #> 11            EFO:0030003 CD4-positive, alpha-beta T cell                 CL:0000624 #> 12            EFO:0030004      capillary endothelial cell                 CL:0002144 #>    development_stage development_stage_ontology_term_id #> 1            unknown                            unknown #> 2            unknown                            unknown #> 3            unknown                            unknown #> 4            unknown                            unknown #> 5            unknown                            unknown #> 6            unknown                            unknown #> 7            unknown                            unknown #> 8            unknown                            unknown #> 9            unknown                            unknown #> 10           unknown                            unknown #> 11           unknown                            unknown #> 12           unknown                            unknown #>                                  disease disease_ontology_term_id #> 1                                 normal             PATO:0000461 #> 2           squamous cell lung carcinoma            MONDO:0005097 #> 3                               COVID-19            MONDO:0100096 #> 4                    lung adenocarcinoma            MONDO:0005061 #> 5                               COVID-19            MONDO:0100096 #> 6  chronic obstructive pulmonary disease            MONDO:0005002 #> 7                     pulmonary fibrosis            MONDO:0002771 #> 8                    lung adenocarcinoma            MONDO:0005061 #> 9  chronic obstructive pulmonary disease            MONDO:0005002 #> 10                                normal             PATO:0000461 #> 11                   lung adenocarcinoma            MONDO:0005061 #> 12                 pulmonary sarcoidosis            MONDO:0001708 #>                                                                             donor_id #> 1         homosapiens_None_2023_None_sikkemalisa_002_d10_1101_2022_03_10_483747cc05p #> 2  homosapiens_None_2023_None_sikkemalisa_002_d10_1101_2022_03_10_483747lambrechts_7 #> 3           homosapiens_None_2023_None_sikkemalisa_002_d10_1101_2022_03_10_483747D12 #> 4         homosapiens_None_2023_None_sikkemalisa_002_d10_1101_2022_03_10_483747RU682 #> 5            homosapiens_None_2023_None_sikkemalisa_002_d10_1101_2022_03_10_483747S2 #> 6         homosapiens_None_2023_None_sikkemalisa_002_d10_1101_2022_03_10_483747207CO #> 7          homosapiens_None_2023_None_sikkemalisa_002_d10_1101_2022_03_10_483747051I #> 8         homosapiens_None_2023_None_sikkemalisa_002_d10_1101_2022_03_10_483747RU684 #> 9         homosapiens_None_2023_None_sikkemalisa_002_d10_1101_2022_03_10_483747192CO #> 10         homosapiens_None_2023_None_sikkemalisa_002_d10_1101_2022_03_10_483747439C #> 11 homosapiens_None_2023_None_sikkemalisa_002_d10_1101_2022_03_10_483747lambrechts_6 #> 12      homosapiens_None_2023_None_sikkemalisa_002_d10_1101_2022_03_10_483747VUILD57 #>    is_primary_data self_reported_ethnicity self_reported_ethnicity_ontology_term_id #> 1             TRUE                 unknown                                  unknown #> 2             TRUE                 unknown                                  unknown #> 3            FALSE                 unknown                                  unknown #> 4             TRUE                 unknown                                  unknown #> 5            FALSE                 unknown                                  unknown #> 6            FALSE                 unknown                                  unknown #> 7            FALSE                 unknown                                  unknown #> 8             TRUE                 unknown                                  unknown #> 9            FALSE                 unknown                                  unknown #> 10           FALSE                 unknown                                  unknown #> 11            TRUE                 unknown                                  unknown #> 12           FALSE                 unknown                                  unknown #>        sex sex_ontology_term_id suspension_type tissue tissue_ontology_term_id #> 1  unknown              unknown            cell   lung          UBERON:0002048 #> 2  unknown              unknown            cell   lung          UBERON:0002048 #> 3  unknown              unknown            cell   lung          UBERON:0002048 #> 4  unknown              unknown            cell   lung          UBERON:0002048 #> 5  unknown              unknown            cell   lung          UBERON:0002048 #> 6  unknown              unknown            cell   lung          UBERON:0002048 #> 7  unknown              unknown            cell   lung          UBERON:0002048 #> 8  unknown              unknown            cell   lung          UBERON:0002048 #> 9  unknown              unknown            cell   lung          UBERON:0002048 #> 10 unknown              unknown            cell   lung          UBERON:0002048 #> 11 unknown              unknown            cell   lung          UBERON:0002048 #> 12 unknown              unknown            cell   lung          UBERON:0002048 #>    tissue_general tissue_general_ontology_term_id #> 1            lung                  UBERON:0002048 #> 2            lung                  UBERON:0002048 #> 3            lung                  UBERON:0002048 #> 4            lung                  UBERON:0002048 #> 5            lung                  UBERON:0002048 #> 6            lung                  UBERON:0002048 #> 7            lung                  UBERON:0002048 #> 8            lung                  UBERON:0002048 #> 9            lung                  UBERON:0002048 #> 10           lung                  UBERON:0002048 #> 11           lung                  UBERON:0002048 #> 12           lung                  UBERON:0002048 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 3083759 rows ] cell_metadata_b_cell <- as.data.frame(   census$get(\"census_data\")$get(\"homo_sapiens\")$obs$read(     value_filter = \"cell_type == 'B cell' && tissue_general == 'lung'\",     column_names = \"disease\"   )$concat() ) table(cell_metadata_b_cell) #> disease #> chronic obstructive pulmonary disease                              COVID-19  #>                                  6369                                  2729  #>          hypersensitivity pneumonitis             interstitial lung disease  #>                                    52                                   376  #>                   lung adenocarcinoma             lung large cell carcinoma  #>                                 62351                                  1534  #>              lymphangioleiomyomatosis         non-small cell lung carcinoma  #>                                   133                                 17484  #>   non-specific interstitial pneumonia                                normal  #>                                   231                                 25374  #>                 pleomorphic carcinoma                             pneumonia  #>                                  1210                                    50  #>                   pulmonary emphysema                    pulmonary fibrosis  #>                                  1512                                  6798  #>                 pulmonary sarcoidosis             small cell lung carcinoma  #>                                     6                                   583  #>          squamous cell lung carcinoma  #>                                 11920"},{"path":"/articles/census_query_extract.html","id":"querying-gene-metadata-var","dir":"Articles","previous_headings":"","what":"Querying gene metadata (var)","title":"Querying and fetching the single-cell data and cell/gene metadata","text":"human gene metadata Census located census$get(\"census_data\")$get(\"homo_sapiens\")$ms$get(\"RNA\")$var. Similarly cell metadata, SOMADataFrame thus can also use method read(). mouse gene metadata census$get(\"census_data\")$get(\"mus_musculus\")$ms$get(\"RNA\")$var. Let’s take look metadata available column selection row filtering. exception soma_joinid columns defined Census schema. Similarly cell metadata, can use operations learn fetch gene metadata. example, get feature_name feature_length genes \"ENSG00000161798\" \"ENSG00000188229\" can following.","code":"census$get(\"census_data\")$get(\"homo_sapiens\")$ms$get(\"RNA\")$var$colnames() #> [1] \"soma_joinid\"    \"feature_id\"     \"feature_name\"   \"feature_length\" as.data.frame(   census$get(\"census_data\")$get(\"homo_sapiens\")$ms$get(\"RNA\")$var$read(     value_filter = \"feature_id %in% c('ENSG00000161798', 'ENSG00000188229')\",     column_names = c(\"feature_name\", \"feature_length\")   )$concat() ) #>   feature_name feature_length #> 1       TUBB4B           2037 #> 2         AQP5           1884"},{"path":"/articles/census_query_extract.html","id":"querying-expression-data","dir":"Articles","previous_headings":"","what":"Querying expression data","title":"Querying and fetching the single-cell data and cell/gene metadata","text":"convenient way query fetch expression data use get_seurat method cellxgene.census API. method combines column selection value filtering described obtain slices expression data based metadata queries. method return Seurat object, takes input census object, string organism, cell gene metadata can specify filters column selection described following arguments: obs_column_names — character vector indicating columns select cell metadata. obs_value_filter — expression selection conditions fetch cells meeting criteria. var_column_names — character vector indicating columns select gene metadata. var_value_filter — expression selection conditions fetch genes meeting criteria. example want fetch expression data : Genes \"ENSG00000161798\" \"ENSG00000188229\". \"B cells\" \"lung\" \"COVID-19\". gene metadata adding sex cell metadata. full description refer ?cellxgene.census::get_seurat.","code":"seurat_obj <- cellxgene.census::get_seurat(   census, \"Homo sapiens\",   obs_column_names = c(\"cell_type\", \"tissue_general\", \"disease\", \"sex\"),   var_value_filter = \"feature_id %in% c('ENSG00000161798', 'ENSG00000188229')\",   obs_value_filter = \"cell_type == 'B cell' && tissue_general == 'lung' && disease == 'COVID-19'\" ) #> The legacy packages maptools, rgdal, and rgeos, underpinning the sp package, #> which was just loaded, will retire in October 2023. #> Please refer to R-spatial evolution reports for details, especially #> https://r-spatial.org/r/2023/05/15/evolution4.html. #> It may be desirable to make the sf package available; #> package maintainers should consider adding sf to Suggests:. #> The sp package is now running under evolution status 2 #>      (status 2 uses the sf package in place of rgdal) seurat_obj #> An object of class Seurat  #> 2 features across 2729 samples within 1 assay  #> Active assay: RNA (2 features, 0 variable features) head(seurat_obj@meta.data) #>                orig.ident nCount_RNA nFeature_RNA cell_type tissue_general  disease #> cell1263835 SeuratProject          0            0    B cell           lung COVID-19 #> cell1266343 SeuratProject          1            1    B cell           lung COVID-19 #> cell1266997 SeuratProject          0            0    B cell           lung COVID-19 #> cell1267503 SeuratProject          0            0    B cell           lung COVID-19 #> cell1268547 SeuratProject          0            0    B cell           lung COVID-19 #> cell1270014 SeuratProject          0            0    B cell           lung COVID-19 #>                 sex #> cell1263835    male #> cell1266343 unknown #> cell1266997    male #> cell1267503 unknown #> cell1268547    male #> cell1270014 unknown head(seurat_obj$RNA@meta.features) #>                   feature_id feature_name feature_length #> feature17442 ENSG00000188229       TUBB4B           2037 #> feature21624 ENSG00000161798         AQP5           1884"},{"path":"/articles/census_query_extract.html","id":"close-the-census","dir":"Articles","previous_headings":"Querying expression data","what":"Close the census","title":"Querying and fetching the single-cell data and cell/gene metadata","text":"use, census object closed release memory resources. also closes SOMA objects accessed via top-level census. Closing can automated using .exit(census$close(), add = TRUE) immediately census <- open_soma().","code":"census$close()"},{"path":"/articles/comp_bio_census_info.html","id":"opening-the-census","dir":"Articles","previous_headings":"","what":"Opening the Census","title":"Learning about the CZ CELLxGENE Census","text":"cellxgene.census R package contains convenient open_soma() API open version Census (stable default). can learn cellxgene.census methods accessing corresponding documentation, example ?cellxgene.census::open_soma.","code":"census <- cellxgene.census::open_soma() #> The stable Census release is currently 2023-05-15. Specify census_version = \"2023-05-15\" in future calls to open_soma() to ensure data consistency."},{"path":"/articles/comp_bio_census_info.html","id":"census-organization","dir":"Articles","previous_headings":"","what":"Census organization","title":"Learning about the CZ CELLxGENE Census","text":"Census schema defines structure Census. short, can think Census structured collection items stores different pieces information. items parent collection SOMA objects various types can accessed TileDB-SOMA API (documentation). cellxgene.census package contains convenient wrappers TileDB-SOMA API. example function used open Census: cellxgene_census.open_soma().","code":""},{"path":"/articles/comp_bio_census_info.html","id":"main-census-components","dir":"Articles","previous_headings":"Census organization","what":"Main Census components","title":"Learning about the CZ CELLxGENE Census","text":"command created census, SOMACollection, R6 class providing key-value associative map. get() method can access two top-level collection members, census_info census_data, instances SOMACollection.","code":""},{"path":"/articles/comp_bio_census_info.html","id":"census-summary-info","dir":"Articles","previous_headings":"Census organization","what":"Census summary info","title":"Learning about the CZ CELLxGENE Census","text":"census$get(\"census_info\")$get(\"summary\"): data frame high-level information Census, e.g. build date, total cell count, etc. census$get(\"census_info\")$get(\"datasets\"): data frame datasets CELLxGENE Discover used create Census. census$get(\"census_info\")$get(\"summary_cell_counts\"): data frame cell counts stratified relevant cell metadata Census data Data organism stored independent SOMAExperiment objects specialized form SOMACollection. store data matrix (cell genes), cell metadata, gene metadata, useful components covered notebook. data organized one organism – Homo sapiens: census$get(\"census_data\")$get(\"homo_sapiens\")$obs: Cell metadata census$get(\"census_data\")$get(\"homo_sapiens\")$ms$get(\"RNA\"): Data matrices, currently … census$get(\"census_data\")$get(\"homo_sapiens\")$ms$get(\"RNA\")$X$get(\"raw\"): matrix raw counts SOMASparseNDArray census$get(\"census_data\")$get(\"homo_sapiens\")$ms$get(\"RNA\")$var: Gene Metadata","code":""},{"path":"/articles/comp_bio_census_info.html","id":"cell-metadata","dir":"Articles","previous_headings":"","what":"Cell metadata","title":"Learning about the CZ CELLxGENE Census","text":"can obtain cell metadata variables directly querying columns corresponding SOMADataFrame. variables can used querying Census case want work specific cells. variables defined CELLxGENE dataset schema except following: soma_joinid: SOMA-defined value use join operations. dataset_id: dataset id encoded census$get(\"census_info\")$get(\"datasets\"). tissue_general tissue_general_ontology_term_id: high-level tissue mapping.","code":"census$get(\"census_data\")$get(\"homo_sapiens\")$obs$colnames() #>  [1] \"soma_joinid\"                              #>  [2] \"dataset_id\"                               #>  [3] \"assay\"                                    #>  [4] \"assay_ontology_term_id\"                   #>  [5] \"cell_type\"                                #>  [6] \"cell_type_ontology_term_id\"               #>  [7] \"development_stage\"                        #>  [8] \"development_stage_ontology_term_id\"       #>  [9] \"disease\"                                  #> [10] \"disease_ontology_term_id\"                 #> [11] \"donor_id\"                                 #> [12] \"is_primary_data\"                          #> [13] \"self_reported_ethnicity\"                  #> [14] \"self_reported_ethnicity_ontology_term_id\" #> [15] \"sex\"                                      #> [16] \"sex_ontology_term_id\"                     #> [17] \"suspension_type\"                          #> [18] \"tissue\"                                   #> [19] \"tissue_ontology_term_id\"                  #> [20] \"tissue_general\"                           #> [21] \"tissue_general_ontology_term_id\""},{"path":"/articles/comp_bio_census_info.html","id":"gene-metadata","dir":"Articles","previous_headings":"","what":"Gene metadata","title":"Learning about the CZ CELLxGENE Census","text":"Similarly, can obtain gene metadata variables directly querying columns corresponding SOMADataFrame. variables can use querying Census case specific genes interested . variables defined CELLxGENE dataset schema except following: soma_joinid: SOMA-defined value use join operations. feature_length: length base pairs gene.","code":"census$get(\"census_data\")$get(\"homo_sapiens\")$ms$get(\"RNA\")$var$colnames() #> [1] \"soma_joinid\"    \"feature_id\"     \"feature_name\"   \"feature_length\""},{"path":"/articles/comp_bio_census_info.html","id":"census-summary-content-tables","dir":"Articles","previous_headings":"","what":"Census summary content tables","title":"Learning about the CZ CELLxGENE Census","text":"can take quick look high-level Census information looking census$get(\"census_info\")$get(\"summary\"): special interest label-value combinations : total_cell_count total number cells Census. unique_cell_count number unique cells, cells may present twice due meta-analysis consortia-like data. number_donors_homo_sapiens number_donors_mus_musculus number individuals human mouse. guaranteed unique one individual ID may present identical different datasets.","code":"as.data.frame(census$get(\"census_info\")$get(\"summary\")$read()$concat()) #>   soma_joinid                      label      value #> 1           0      census_schema_version      1.0.0 #> 2           1          census_build_date 2023-05-15 #> 3           2     dataset_schema_version      3.0.0 #> 4           3           total_cell_count   57880760 #> 5           4          unique_cell_count   36673205 #> 6           5 number_donors_homo_sapiens      12493 #> 7           6 number_donors_mus_musculus       1362"},{"path":"/articles/comp_bio_census_info.html","id":"cell-counts-by-cell-metadata","dir":"Articles","previous_headings":"Census summary content tables","what":"Cell counts by cell metadata","title":"Learning about the CZ CELLxGENE Census","text":"looking census$get(\"census_info)$get(\"summary_cell_counts\") can get general idea cell counts stratified relevant cell metadata. cell metadata included table, can take look cell gene metadata available sections “Cell metadata” “Gene metadata”. line retrieves table casts R data frame: combination organism values category cell metadata can take look total_cell_count unique_cell_count cell counts combination. values category specified ontology_term_id label, value’s IDs labels, respectively.","code":"census_counts <- as.data.frame(census$get(\"census_info\")$get(\"summary_cell_counts\")$read()$concat()) head(census_counts) #>   soma_joinid     organism category ontology_term_id unique_cell_count total_cell_count #> 1           0 Homo sapiens      all               na          33758887         53794728 #> 2           1 Homo sapiens    assay      EFO:0008722            264166           279635 #> 3           2 Homo sapiens    assay      EFO:0008780             25652            51304 #> 4           3 Homo sapiens    assay      EFO:0008913            133511           133511 #> 5           4 Homo sapiens    assay      EFO:0008919             89477           206754 #> 6           5 Homo sapiens    assay      EFO:0008931             78750           161197 #>                        label #> 1                         na #> 2                   Drop-seq #> 3                     inDrop #> 4 single-cell RNA sequencing #> 5                   Seq-Well #> 6                 Smart-seq2"},{"path":"/articles/comp_bio_census_info.html","id":"example-cell-metadata-included-in-the-summary-counts-table","dir":"Articles","previous_headings":"Census summary content tables > Cell counts by cell metadata","what":"Example: cell metadata included in the summary counts table","title":"Learning about the CZ CELLxGENE Census","text":"get available cell metadata summary counts table can following. Remember cell metadata available, variables omitted creation table.","code":"t(table(census_counts$organism, census_counts$category)) #>                           #>                           Homo sapiens Mus musculus #>   all                                1            1 #>   assay                             20            9 #>   cell_type                        604          226 #>   disease                           68            5 #>   self_reported_ethnicity           26            1 #>   sex                                3            3 #>   suspension_type                    1            1 #>   tissue                           227           51 #>   tissue_general                    61           27"},{"path":"/articles/comp_bio_census_info.html","id":"example-cell-counts-for-each-sequencing-assay-in-human-data","dir":"Articles","previous_headings":"Census summary content tables > Cell counts by cell metadata","what":"Example: cell counts for each sequencing assay in human data","title":"Learning about the CZ CELLxGENE Census","text":"get cell counts sequencing assay type human data, can perform following operations:","code":"human_assay_counts <- census_counts[census_counts$organism == \"Homo sapiens\" & census_counts$category == \"assay\", ] human_assay_counts <- human_assay_counts[order(human_assay_counts$total_cell_count, decreasing = TRUE), ]"},{"path":"/articles/comp_bio_census_info.html","id":"example-number-of-microglial-cells-in-the-census","dir":"Articles","previous_headings":"Census summary content tables > Cell counts by cell metadata","what":"Example: number of microglial cells in the Census","title":"Learning about the CZ CELLxGENE Census","text":"specific term categories shown can directly find number cells term.","code":"census_counts[census_counts$label == \"microglial cell\", ] #>      soma_joinid     organism  category ontology_term_id unique_cell_count #> 71            70 Homo sapiens cell_type       CL:0000129            264424 #> 1049        1048 Mus musculus cell_type       CL:0000129             48998 #>      total_cell_count           label #> 71             363182 microglial cell #> 1049            62617 microglial cell"},{"path":"/articles/comp_bio_census_info.html","id":"understanding-census-contents-beyond-the-summary-tables","dir":"Articles","previous_headings":"","what":"Understanding Census contents beyond the summary tables","title":"Learning about the CZ CELLxGENE Census","text":"using pre-computed tables census$get(\"census_info\") easy quick way understand contents Census, falls short want learn certain slices Census. example, may want learn : cell types available human liver? total number cells lung datasets stratified sequencing technology? sex distribution cells brain mouse? diseases available T cells? questions can answered directly querying cell metadata shown examples .","code":""},{"path":"/articles/comp_bio_census_info.html","id":"example-all-cell-types-available-in-human","dir":"Articles","previous_headings":"Understanding Census contents beyond the summary tables","what":"Example: all cell types available in human","title":"Learning about the CZ CELLxGENE Census","text":"exemplify process accessing slicing cell metadata summary stats, let’s start trivial example take look human cell types available Census: number rows total number cells humans. Now, wish get cell counts per cell type can work data frame. addition, focus cells marked is_primary_data=TRUE ensures de-duplicate cells appear CELLxGENE Discover. number unique cells. Now let’s look counts per cell type: shows abundant cell types “glutamatergic neuron”, “CD8-positive, alpha-beta T cell”, “CD4-positive, alpha-beta T cell”. Now let’s take look number unique cell types: total number different cell types human. information example can quickly obtained summary table census$get(\"census-info\")$get(\"summary_cell_counts\"). examples complex can achieved accessing cell metadata.","code":"as.data.frame(   census$get(\"census_data\")$get(\"homo_sapiens\")$obs$read(     column_names = c(\"cell_type\", \"is_primary_data\")   )$concat() ) #>                            cell_type is_primary_data #> 1                       myeloid cell            TRUE #> 2                       myeloid cell            TRUE #> 3                           fat cell            TRUE #> 4                       myeloid cell            TRUE #> 5                           fat cell            TRUE #> 6                           fat cell            TRUE #> 7                           fat cell            TRUE #> 8                           fat cell            TRUE #> 9                           fat cell            TRUE #> 10                          fat cell            TRUE #> 11                          fat cell            TRUE #> 12                      myeloid cell            TRUE #> 13                          fat cell            TRUE #> 14                      myeloid cell            TRUE #> 15                          fat cell            TRUE #> 16                        macrophage            TRUE #> 17                        macrophage            TRUE #> 18                          fat cell            TRUE #> 19                  endothelial cell            TRUE #> 20                        macrophage            TRUE #> 21                        macrophage            TRUE #> 22                        macrophage            TRUE #> 23                        macrophage            TRUE #> 24                          fat cell            TRUE #> 25                        macrophage            TRUE #> 26                          pericyte            TRUE #> 27                        macrophage            TRUE #> 28                          fat cell            TRUE #> 29                  endothelial cell            TRUE #> 30                  endothelial cell            TRUE #> 31                      myeloid cell            TRUE #> 32                        macrophage            TRUE #> 33                  endothelial cell            TRUE #> 34                        macrophage            TRUE #> 35                        macrophage            TRUE #> 36                  endothelial cell            TRUE #> 37                  endothelial cell            TRUE #> 38                  endothelial cell            TRUE #> 39  fibro/adipogenic progenitor cell            TRUE #> 40                  endothelial cell            TRUE #> 41                          fat cell            TRUE #> 42                  endothelial cell            TRUE #> 43                          fat cell            TRUE #> 44                  endothelial cell            TRUE #> 45  fibro/adipogenic progenitor cell            TRUE #> 46                  endothelial cell            TRUE #> 47                  endothelial cell            TRUE #> 48                        macrophage            TRUE #> 49                        macrophage            TRUE #> 50  fibro/adipogenic progenitor cell            TRUE #> 51  fibro/adipogenic progenitor cell            TRUE #> 52                  endothelial cell            TRUE #> 53                          fat cell            TRUE #> 54                          fat cell            TRUE #> 55                          pericyte            TRUE #> 56                  endothelial cell            TRUE #> 57  fibro/adipogenic progenitor cell            TRUE #> 58                  endothelial cell            TRUE #> 59                        macrophage            TRUE #> 60  fibro/adipogenic progenitor cell            TRUE #> 61  fibro/adipogenic progenitor cell            TRUE #> 62                        macrophage            TRUE #> 63  fibro/adipogenic progenitor cell            TRUE #> 64                  endothelial cell            TRUE #> 65                      myeloid cell            TRUE #> 66  fibro/adipogenic progenitor cell            TRUE #> 67                  endothelial cell            TRUE #> 68                  endothelial cell            TRUE #> 69                  endothelial cell            TRUE #> 70                          fat cell            TRUE #> 71                  endothelial cell            TRUE #> 72                  endothelial cell            TRUE #> 73                  endothelial cell            TRUE #> 74                  endothelial cell            TRUE #> 75                  endothelial cell            TRUE #> 76                  endothelial cell            TRUE #> 77                  endothelial cell            TRUE #> 78                          fat cell            TRUE #> 79                          pericyte            TRUE #> 80                        macrophage            TRUE #> 81                          fat cell            TRUE #> 82                        lymphocyte            TRUE #> 83                  endothelial cell            TRUE #> 84                  endothelial cell            TRUE #> 85                  endothelial cell            TRUE #> 86  fibro/adipogenic progenitor cell            TRUE #> 87  fibro/adipogenic progenitor cell            TRUE #> 88            neuron associated cell            TRUE #> 89                  endothelial cell            TRUE #> 90                        macrophage            TRUE #> 91                          fat cell            TRUE #> 92                        macrophage            TRUE #> 93                        macrophage            TRUE #> 94                  endothelial cell            TRUE #> 95                        lymphocyte            TRUE #> 96                          fat cell            TRUE #> 97                  endothelial cell            TRUE #> 98                  endothelial cell            TRUE #> 99                  endothelial cell            TRUE #> 100                 endothelial cell            TRUE #> 101                 endothelial cell            TRUE #> 102                       macrophage            TRUE #> 103                       macrophage            TRUE #> 104                 endothelial cell            TRUE #> 105                 endothelial cell            TRUE #> 106                 endothelial cell            TRUE #> 107               smooth muscle cell            TRUE #> 108                 endothelial cell            TRUE #> 109                         pericyte            TRUE #> 110                 endothelial cell            TRUE #> 111                 endothelial cell            TRUE #> 112                 endothelial cell            TRUE #> 113                 endothelial cell            TRUE #> 114                       macrophage            TRUE #> 115                 endothelial cell            TRUE #> 116                       macrophage            TRUE #> 117 fibro/adipogenic progenitor cell            TRUE #> 118                 endothelial cell            TRUE #> 119                 endothelial cell            TRUE #> 120                 endothelial cell            TRUE #> 121                 endothelial cell            TRUE #> 122                         fat cell            TRUE #> 123                 endothelial cell            TRUE #> 124 fibro/adipogenic progenitor cell            TRUE #> 125                 endothelial cell            TRUE #> 126                       macrophage            TRUE #> 127                         pericyte            TRUE #> 128                 endothelial cell            TRUE #>  [ reached 'max' / getOption(\"max.print\") -- omitted 53794600 rows ] human_cell_types <- as.data.frame(   census$get(\"census_data\")$get(\"homo_sapiens\")$obs$read(     column_names = \"cell_type\",     value_filter = \"is_primary_data == TRUE\"   )$concat() )$cell_type length(human_cell_types) #> [1] 33758887 human_cell_type_counts <- table(human_cell_types) sort(human_cell_type_counts, decreasing = TRUE)[1:10] #> human_cell_types #>                          neuron            glutamatergic neuron  #>                         2682728                         1539105  #> CD4-positive, alpha-beta T cell CD8-positive, alpha-beta T cell  #>                         1274999                         1211278  #>              classical monocyte                          B cell  #>                          998008                          943900  #>                      fibroblast                     native cell  #>                          826495                          806177  #>             natural killer cell                 oligodendrocyte  #>                          766437                          692112 dim(human_cell_type_counts) #> [1] 588"},{"path":"/articles/comp_bio_census_info.html","id":"example-cell-types-available-in-human-liver","dir":"Articles","previous_headings":"Understanding Census contents beyond the summary tables","what":"Example: cell types available in human liver","title":"Learning about the CZ CELLxGENE Census","text":"Similar example , can learn cell types available specific tissue, e.g. liver. achieve goal just need limit cell metadata tissue. use information cell metadata variable tissue_general. variable contains high-level tissue label cells Census: cell types cell counts human liver.","code":"human_liver_cell_types <- as.data.frame(   census$get(\"census_data\")$get(\"homo_sapiens\")$obs$read(     column_names = \"cell_type\",     value_filter = \"is_primary_data == TRUE && tissue_general == 'liver'\"   )$concat() )$cell_type sort(table(human_liver_cell_types), decreasing = TRUE)[1:10] #> human_liver_cell_types #>                          T cell                     hepatoblast  #>                           86780                           58447  #>                 neoplastic cell                    erythroblast  #>                           52431                           45605  #>                        monocyte                      hepatocyte  #>                           34585                           30909  #>             natural killer cell    periportal region hepatocyte  #>                           26871                           23509  #>                      macrophage centrilobular region hepatocyte  #>                           16760                           15819"},{"path":"/articles/comp_bio_census_info.html","id":"example-diseased-t-cells-in-human-tissues","dir":"Articles","previous_headings":"Understanding Census contents beyond the summary tables","what":"Example: diseased T cells in human tissues","title":"Learning about the CZ CELLxGENE Census","text":"example going get counts diseased cells annotated T cells. sake example focus “CD8-positive, alpha-beta T cell” “CD4-positive, alpha-beta T cell”: cell counts annotated indicated disease across human tissues “CD8-positive, alpha-beta T cell” “CD4-positive, alpha-beta T cell”.","code":"t_cells_diseased <- as.data.frame(   census$get(\"census_data\")$get(\"homo_sapiens\")$obs$read(     column_names = c(\"disease\", \"tissue_general\"),     value_filter = \"is_primary_data == TRUE && disease != 'normal' && cell_type %in% c('CD8-positive, alpha-beta T cell', 'CD4-positive, alpha-beta T cell')\"   )$concat() ) print(table(t_cells_diseased)) #>                                        tissue_general #> disease                                 adrenal gland  blood bone marrow  brain breast #>   B-cell non-Hodgkin lymphoma                       0  62499           0      0      0 #>   breast cancer                                     0      0           0      0   1850 #>   chronic obstructive pulmonary disease             0      0           0      0      0 #>   chronic rhinitis                                  0      0           0      0      0 #>   COVID-19                                          0 834850           0      0      0 #>   Crohn disease                                     0      0           0      0      0 #>   cystic fibrosis                                   0      0           0      0      0 #>   Down syndrome                                     0      0         181      0      0 #>   follicular lymphoma                               0      0           0      0      0 #>   influenza                                         0   8871           0      0      0 #>   interstitial lung disease                         0      0           0      0      0 #>   lung adenocarcinoma                             205      0           0   3274      0 #>   lung large cell carcinoma                         0      0           0      0      0 #>   lymphangioleiomyomatosis                          0      0           0      0      0 #>   non-small cell lung carcinoma                     0      0           0      0      0 #>   pleomorphic carcinoma                             0      0           0      0      0 #>   pneumonia                                         0      0           0      0      0 #>   pulmonary fibrosis                                0      0           0      0      0 #>                                        tissue_general #> disease                                  colon  liver   lung lymph node   nose #>   B-cell non-Hodgkin lymphoma                0      0      0          0      0 #>   breast cancer                              0      0      0          0      0 #>   chronic obstructive pulmonary disease      0      0   9382          0      0 #>   chronic rhinitis                           0      0      0          0    909 #>   COVID-19                                   0      0  30578          0     13 #>   Crohn disease                          17490      0      0          0      0 #>   cystic fibrosis                            0      0      7          0      0 #>   Down syndrome                              0      0      0          0      0 #>   follicular lymphoma                        0      0      0       1089      0 #>   influenza                                  0      0      0          0      0 #>   interstitial lung disease                  0      0   1803          0      0 #>   lung adenocarcinoma                        0    507 215013      24969      0 #>   lung large cell carcinoma                  0      0   5922          0      0 #>   lymphangioleiomyomatosis                   0      0    513          0      0 #>   non-small cell lung carcinoma              0      0  36573          0      0 #>   pleomorphic carcinoma                      0      0   1715          0      0 #>   pneumonia                                  0      0    856          0      0 #>   pulmonary fibrosis                         0      0   1671          0      0 #>                                        tissue_general #> disease                                 pleural fluid respiratory system saliva #>   B-cell non-Hodgkin lymphoma                       0                  0      0 #>   breast cancer                                     0                  0      0 #>   chronic obstructive pulmonary disease             0                  0      0 #>   chronic rhinitis                                  0                  0      0 #>   COVID-19                                          0                  4     41 #>   Crohn disease                                     0                  0      0 #>   cystic fibrosis                                   0                  0      0 #>   Down syndrome                                     0                  0      0 #>   follicular lymphoma                               0                  0      0 #>   influenza                                         0                  0      0 #>   interstitial lung disease                         0                  0      0 #>   lung adenocarcinoma                           11558                  0      0 #>   lung large cell carcinoma                         0                  0      0 #>   lymphangioleiomyomatosis                          0                  0      0 #>   non-small cell lung carcinoma                     0                  0      0 #>   pleomorphic carcinoma                             0                  0      0 #>   pneumonia                                         0                  0      0 #>   pulmonary fibrosis                                0                  0      0 #>                                        tissue_general #> disease                                 small intestine #>   B-cell non-Hodgkin lymphoma                         0 #>   breast cancer                                       0 #>   chronic obstructive pulmonary disease               0 #>   chronic rhinitis                                    0 #>   COVID-19                                            0 #>   Crohn disease                                   52029 #>   cystic fibrosis                                     0 #>   Down syndrome                                       0 #>   follicular lymphoma                                 0 #>   influenza                                           0 #>   interstitial lung disease                           0 #>   lung adenocarcinoma                                 0 #>   lung large cell carcinoma                           0 #>   lymphangioleiomyomatosis                            0 #>   non-small cell lung carcinoma                       0 #>   pleomorphic carcinoma                               0 #>   pneumonia                                           0 #>   pulmonary fibrosis                                  0 #>  [ reached getOption(\"max.print\") -- omitted 3 rows ]"},{"path":"/articles/comp_bio_summarize_axis_query.html","id":"opening-the-census","dir":"Articles","previous_headings":"","what":"Opening the Census","title":"Summarizing cell and gene metadata","text":"cellxgene.census R package contains convenient API open version Census (default, newest stable version). open Census, close census$close(). can automated using .exit(census$close(), add = TRUE) immediately census <- open_soma(). can learn cellxgene.census methods accessing corresponding documentation. example ?cellxgene.census::open_soma.","code":"census <- cellxgene.census::open_soma() #> The stable Census release is currently 2023-05-15. Specify census_version = \"2023-05-15\" in future calls to open_soma() to ensure data consistency."},{"path":"/articles/comp_bio_summarize_axis_query.html","id":"summarizing-cell-metadata","dir":"Articles","previous_headings":"","what":"Summarizing cell metadata","title":"Summarizing cell and gene metadata","text":"Census open can use TileDB-SOMA methods SOMACollection. can thus access metadata SOMADataFrame objects encoding cell gene metadata. Tips: can read entire SOMADataFrame R using .data.frame(soma_df$read()$concat()). Queries much faster request DataFrame columns required analysis (e.g. column_names = c(\"soma_joinid\", \"cell_type_ontology_term_id\")). can also refine query results using value_filter, filter census matching records.","code":""},{"path":"/articles/comp_bio_summarize_axis_query.html","id":"example-summarize-all-cell-types","dir":"Articles","previous_headings":"Summarizing cell metadata","what":"Example: Summarize all cell types","title":"Summarizing cell and gene metadata","text":"example reads cell metadata (obs) R data frame summarize variety ways.","code":"human <- census$get(\"census_data\")$get(\"homo_sapiens\")  # Read obs into an R data frame (tibble). obs_df <- as.data.frame(human$obs$read(   column_names = c(\"soma_joinid\", \"cell_type_ontology_term_id\") )$concat())  # Find all unique values in the cell_type_ontology_term_id column. unique_cell_type_ontology_term_id <- unique(obs_df$cell_type_ontology_term_id)  cat(paste(   \"There are\",   length(unique_cell_type_ontology_term_id),   \"cell types in the Census! The first few are:\" )) #> There are 604 cell types in the Census! The first few are: head(unique_cell_type_ontology_term_id) #> [1] \"CL:0000763\" \"CL:0000136\" \"CL:0000235\" \"CL:0000115\" \"CL:0000669\" \"CL:0009099\""},{"path":"/articles/comp_bio_summarize_axis_query.html","id":"example-summarize-a-subset-of-cell-types-selected-with-a-value_filter","dir":"Articles","previous_headings":"Summarizing cell metadata","what":"Example: Summarize a subset of cell types, selected with a value_filter","title":"Summarizing cell and gene metadata","text":"example utilizes SOMA “value filter” read subset cells tissue_ontology_term_id equal UBERON:0002048 (lung tissue), summarizes query result. can also define much complex value filters. example: combine terms use %% operator query multiple values","code":"# Read cell_type terms for cells which have a specific tissue term LUNG_TISSUE <- \"UBERON:0002048\"  obs_df <- as.data.frame(human$obs$read(   column_names = c(\"cell_type_ontology_term_id\"),   value_filter = paste(\"tissue_ontology_term_id == '\", LUNG_TISSUE, \"'\", sep = \"\") )$concat())  # Find all unique values in the cell_type_ontology_term_id column as an R data frame. unique_cell_type_ontology_term_id <- unique(obs_df$cell_type_ontology_term_id) cat(paste(   \"There are \",   length(unique_cell_type_ontology_term_id),   \" cell types in the Census where tissue_ontology_term_id == \",   LUNG_TISSUE,   \"!\\nThe first few are:\",   sep = \"\" )) #> There are 185 cell types in the Census where tissue_ontology_term_id == UBERON:0002048! #> The first few are: head(unique_cell_type_ontology_term_id) #> [1] \"CL:0000003\" \"CL:4028004\" \"CL:0002145\" \"CL:0000625\" \"CL:0000624\" \"CL:4028006\"  # Report the 10 most common top_10 <- sort(table(obs_df$cell_type_ontology_term_id), decreasing = TRUE)[1:10] cat(paste(\"The top 10 cell types where tissue_ontology_term_id ==\", LUNG_TISSUE)) #> The top 10 cell types where tissue_ontology_term_id == UBERON:0002048 print(top_10) #>  #> CL:0000003 CL:0000583 CL:0000625 CL:0000624 CL:0000235 CL:0002063 CL:0000860 CL:0000623  #>     562038     526859     323433     323067     254173     246279     203526     164944  #> CL:0001064 CL:0002632  #>     149067     132243 # You can also do more complex queries, such as testing for inclusion in a list of values obs_df <- as.data.frame(human$obs$read(   column_names = c(\"cell_type_ontology_term_id\"),   value_filter = \"tissue_ontology_term_id %in% c('UBERON:0002082', 'UBERON:OOO2084', 'UBERON:0002080')\" )$concat())  # Summarize top_10 <- sort(table(obs_df$cell_type_ontology_term_id), decreasing = TRUE)[1:10] print(top_10) #>  #> CL:0000746 CL:0008034 CL:0002548 CL:0000115 CL:0002131 CL:0000763 CL:0000669 CL:0000003  #>     159096      84750      79618      64190      61830      32088      27515      22707  #> CL:0000057 CL:0002144  #>      20117      18593"},{"path":"/articles/comp_bio_summarize_axis_query.html","id":"full-census-metadata-stats","dir":"Articles","previous_headings":"","what":"Full Census metadata stats","title":"Summarizing cell and gene metadata","text":"example queries organisms Census, summarizes diversity various metadata labels.","code":"cols_to_query <- c(   \"cell_type_ontology_term_id\",   \"assay_ontology_term_id\",   \"tissue_ontology_term_id\" )  total_cells <- 0 for (organism in census$get(\"census_data\")$names()) {   print(organism)   obs_df <- as.data.frame(     census$get(\"census_data\")$get(organism)$obs$read(column_names = cols_to_query)$concat()   )   total_cells <- total_cells + nrow(obs_df)   for (col in cols_to_query) {     cat(paste(\"  Unique \", col, \" values: \", length(unique(obs_df[[col]])), \"\\n\", sep = \"\"))   } } #> [1] \"homo_sapiens\" #>   Unique cell_type_ontology_term_id values: 604 #>   Unique assay_ontology_term_id values: 20 #>   Unique tissue_ontology_term_id values: 227 #> [1] \"mus_musculus\" #>   Unique cell_type_ontology_term_id values: 226 #>   Unique assay_ontology_term_id values: 9 #>   Unique tissue_ontology_term_id values: 51 cat(paste(\"Complete Census contains\", total_cells, \"cells.\")) #> Complete Census contains 57880760 cells."},{"path":"/articles/comp_bio_summarize_axis_query.html","id":"close-the-census","dir":"Articles","previous_headings":"Full Census metadata stats","what":"Close the census","title":"Summarizing cell and gene metadata","text":"use, census object closed release memory resources. also closes SOMA objects accessed via top-level census. Closing can automated using .exit(census$close(), add = TRUE) immediately census <- open_soma().","code":"census$close()"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Chan Zuckerberg Initiative. Author, maintainer, copyright holder, funder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chan Zuckerberg Initiative (2023). cellxgene.census: CZ CELLxGENE Discover Cell Census. R package version 0.0.0.9000, https://github.com/chanzuckerberg/cellxgene-census.","code":"@Manual{,   title = {cellxgene.census: CZ CELLxGENE Discover Cell Census},   author = {{Chan Zuckerberg Initiative}},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://github.com/chanzuckerberg/cellxgene-census}, }"},{"path":"/index.html","id":"cz-cellxgene-discover-census","dir":"","previous_headings":"","what":"CZ CELLxGENE Discover Cell Census","title":"CZ CELLxGENE Discover Cell Census","text":"cellxgene.census package provides API facilitate use CZ CELLxGENE Discover Census. information API project visit chanzuckerberg/cellxgene-census GitHub repo. Status: Pre-release, rapid development. Expect API changes. Also see Python API.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"CZ CELLxGENE Discover Cell Census","text":"can install development version cellxgene.census GitHub : (minimal apt dependencies: r-base cmake git)","code":"# install.packages(\"devtools\") devtools::install_github(\"chanzuckerberg/cellxgene-census/api/r/cellxgene.census\") print(cellxgene.census::open_soma())"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"CZ CELLxGENE Discover Cell Census","text":"basic example shows solve common problem:","code":"library(cellxgene.census) ## basic example code"},{"path":"/index.html","id":"for-more-help","dir":"","previous_headings":"","what":"For More Help","title":"CZ CELLxGENE Discover Cell Census","text":"help, please file issue repo, contact us soma@chanzuckerberg.com believe found security issue, appreciate notification. Please send email security@chanzuckerberg.com.","code":""},{"path":"/index.html","id":"internal-vignettes-and-pkgdown-docs","dir":"","previous_headings":"","what":"(internal) vignettes and pkgdown docs","title":"CZ CELLxGENE Discover Cell Census","text":"vignettes use much time memory build routinely standard R CMD build procedure (especially limited memory available GitHub Actions workers used r-universe, also doesn’t provide build flags like ---build-vignettes). reason, vignettes stored vignettes_/ instead vignettes/ R CMD build doesn’t find . vignettes included pkgdown documentation site. build , update_docs.sh script locally+temporarily symlinks vignettes/ vignettes_/ pkgdown finds . check resulting docs/ folder git, copied docsite docsite-build-deploy workflow.","code":""},{"path":"/reference/download_source_h5ad.html","id":null,"dir":"Reference","previous_headings":"","what":"Download source H5AD to local file name. — download_source_h5ad","title":"Download source H5AD to local file name. — download_source_h5ad","text":"Download source H5AD local file name.","code":""},{"path":"/reference/download_source_h5ad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download source H5AD to local file name. — download_source_h5ad","text":"","code":"download_source_h5ad(   dataset_id,   file,   overwrite = FALSE,   census_version = \"stable\",   census = NULL )"},{"path":"/reference/download_source_h5ad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download source H5AD to local file name. — download_source_h5ad","text":"dataset_id dataset_id interest. file Local file name store H5AD file. overwrite TRUE allow overwriting existing file. census_version desired Census version. census open Census handle census_version. provided, opened closed automatically; efficient reuse handle calling download_source_h5ad() multiple times.","code":""},{"path":"/reference/get_census_version_description.html","id":null,"dir":"Reference","previous_headings":"","what":"Get release description for given census version — get_census_version_description","title":"Get release description for given census version — get_census_version_description","text":"Get release description given census version","code":""},{"path":"/reference/get_census_version_description.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get release description for given census version — get_census_version_description","text":"","code":"get_census_version_description(census_version)"},{"path":"/reference/get_census_version_description.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get release description for given census version — get_census_version_description","text":"census_version census version name.","code":""},{"path":"/reference/get_census_version_description.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get release description for given census version — get_census_version_description","text":"List release location metadata","code":""},{"path":"/reference/get_census_version_directory.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the directory of cell census releases currently available — get_census_version_directory","title":"Get the directory of cell census releases currently available — get_census_version_directory","text":"Get directory cell census releases currently available","code":""},{"path":"/reference/get_census_version_directory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the directory of cell census releases currently available — get_census_version_directory","text":"","code":"get_census_version_directory()"},{"path":"/reference/get_census_version_directory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the directory of cell census releases currently available — get_census_version_directory","text":"Data frame available cell census releases, including location metadata.","code":""},{"path":"/reference/get_presence_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the feature dataset presence matrix. — get_presence_matrix","title":"Read the feature dataset presence matrix. — get_presence_matrix","text":"Read feature dataset presence matrix.","code":""},{"path":"/reference/get_presence_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the feature dataset presence matrix. — get_presence_matrix","text":"","code":"get_presence_matrix(census, organism, measurement_name = \"RNA\")"},{"path":"/reference/get_presence_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the feature dataset presence matrix. — get_presence_matrix","text":"census census object, usually returned cellxgene.census::open_soma(). organism organism query, usually one Homo sapiens Mus musculus measurement_name measurement object query. Defaults RNA.","code":""},{"path":"/reference/get_presence_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read the feature dataset presence matrix. — get_presence_matrix","text":"tiledbsoma::matrixZeroBasedView object dataset join id & feature join id dimensions, filled 1s indicating presence. sparse matrix accessed zero-based indexes since join id's may zero.","code":""},{"path":"/reference/get_seurat.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience wrapper around SOMAExperimentAxisQuery, to build and execute a\nquery, and return it as a Seurat object. — get_seurat","title":"Convenience wrapper around SOMAExperimentAxisQuery, to build and execute a\nquery, and return it as a Seurat object. — get_seurat","text":"Convenience wrapper around SOMAExperimentAxisQuery, build execute query, return Seurat object.","code":""},{"path":"/reference/get_seurat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience wrapper around SOMAExperimentAxisQuery, to build and execute a\nquery, and return it as a Seurat object. — get_seurat","text":"","code":"get_seurat(   census,   organism,   measurement_name = \"RNA\",   X_name = \"raw\",   obs_value_filter = NULL,   obs_coords = NULL,   obs_column_names = NULL,   var_value_filter = NULL,   var_coords = NULL,   var_column_names = NULL )"},{"path":"/reference/get_seurat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience wrapper around SOMAExperimentAxisQuery, to build and execute a\nquery, and return it as a Seurat object. — get_seurat","text":"census census object, usually returned cellxgene.census::open_soma(). organism organism query, usually one Homo sapiens Mus musculus measurement_name measurement object query. Defaults RNA. X_name X layer query. Defaults raw. obs_value_filter SOMA value_filter across columns obs dataframe, expressed string. obs_coords set coordinates obs dataframe index, expressed type format supported SOMADataFrame's read() method. obs_column_names Columns fetch obs data frame. var_value_filter obs_value_filter var. var_coords obs_coords var. var_column_names Columns fetch var data frame.","code":""},{"path":"/reference/get_seurat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience wrapper around SOMAExperimentAxisQuery, to build and execute a\nquery, and return it as a Seurat object. — get_seurat","text":"Seurat object containing sensus slice.","code":""},{"path":"/reference/get_source_h5ad_uri.html","id":null,"dir":"Reference","previous_headings":"","what":"Locate source h5ad file for a dataset. — get_source_h5ad_uri","title":"Locate source h5ad file for a dataset. — get_source_h5ad_uri","text":"Locate source h5ad file dataset.","code":""},{"path":"/reference/get_source_h5ad_uri.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locate source h5ad file for a dataset. — get_source_h5ad_uri","text":"","code":"get_source_h5ad_uri(dataset_id, census_version = \"stable\", census = NULL)"},{"path":"/reference/get_source_h5ad_uri.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locate source h5ad file for a dataset. — get_source_h5ad_uri","text":"dataset_id dataset_id interest. census_version desired Census version. census open Census handle census_version. provided, opened closed automatically; efficient reuse handle calling get_source_h5ad_uri() multiple times.","code":""},{"path":"/reference/get_source_h5ad_uri.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locate source h5ad file for a dataset. — get_source_h5ad_uri","text":"list uri optional s3_region.","code":""},{"path":"/reference/new_SOMATileDBContext_for_census.html","id":null,"dir":"Reference","previous_headings":"","what":"Create SOMATileDBContext for Cell Census — new_SOMATileDBContext_for_census","title":"Create SOMATileDBContext for Cell Census — new_SOMATileDBContext_for_census","text":"Create SOMATileDBContext suitable using open_soma(). Typically open_soma() creates context automatically, can created separately order set custom configuration options share multiple open Census handles.","code":""},{"path":"/reference/new_SOMATileDBContext_for_census.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create SOMATileDBContext for Cell Census — new_SOMATileDBContext_for_census","text":"","code":"new_SOMATileDBContext_for_census(census_version_description, ...)"},{"path":"/reference/new_SOMATileDBContext_for_census.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create SOMATileDBContext for Cell Census — new_SOMATileDBContext_for_census","text":"census_version_description result get_census_version_description() desired Census version. ... Custom configuration options.","code":""},{"path":"/reference/open_soma.html","id":null,"dir":"Reference","previous_headings":"","what":"Open the Cell Census — open_soma","title":"Open the Cell Census — open_soma","text":"Open Cell Census","code":""},{"path":"/reference/open_soma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open the Cell Census — open_soma","text":"","code":"open_soma(census_version = \"stable\", uri = NULL, tiledbsoma_ctx = NULL)"},{"path":"/reference/open_soma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open the Cell Census — open_soma","text":"census_version version Census, e.g., \"stable\". uri URI containing Census SOMA objects. specified, takes precedence census_version. tiledbsoma_ctx tiledbsoma::SOMATileDBContext built using new_SOMATileDBContext_for_census(). Optional (created automatically) using census_version context need reused.","code":""},{"path":"/reference/open_soma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open the Cell Census — open_soma","text":"Top-level tiledbsoma::SOMACollection object. use, census closed release memory resources, usually .exit(census$close(), add = TRUE). Closing top-level census also close SOMA objects accessed .","code":""}]
